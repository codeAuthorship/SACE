#include <algorithm> #include <bits/stdc++.h> #include <bitset> #include <cctype> #include <climits> #include <cmath> #include <complex> #include <cstdio> #include <cstring> #include <ctime> #include <fstream> #include <iomanip> #include <iostream> #include <iterator> #include <map> #include <math.h> #include <numeric> #include <queue> #include <set> #include <stack> #include <stdio.h> #include <string> #include <unordered_map> #include <utility> #include <vector>   using namespace std; 
ofstream fout;  typedef long long LL; typedef pair<int, int> PII; typedef long double LD; typedef vector<int> VI; typedef set<int> si;  using ll = long long; using ull = unsigned long long; using pii = pair<int, int>; using pll = pair<ll, ll>; using vi = vector<int>; using vll = vector<ll>; using pill = pair<int, ll>; using vvi = vector<vi>;  ll gcd(ll a, ll b) {   ll t;   for (; (t = a % b) != 0;) {     a = b;     b = t;   }   return b; }  bool get(int i, ll v) { return (v >> i) & 1; }  int count_bits(ll v) {   int ans = 0;   for (int i = 0; i < 64; ++i)     if (get(i, v))       ++ans;   return ans; }  int first_bit(ll v) {   int i = 0;   while (i < 64)     if (get(i++, v))       return i - 1;   return -1; }  
int main() {   int ret_val = 0;   fout.open("/home/tom/project/ramdisk/blackbox_3264486_5633382285312000_10_Usenix_RF_1.0_True_MCTS_Classic_True/bennikartefla/ibrahim5253/outer_temp/ibrahim5253/A-small-practice_transformation.out");   ios::sync_with_stdio(false);   int t;   cin >> t;    for (int i = 1; i <= t; ++i) {     string n;     cin >> n;     char y = '0';     int s = n.length();     for (int j = 0; j < s; ++j) {       if (n[j] < y) {         --j;         int tc = j;         while (tc > 0 && n[tc] == '1')           n[tc] = '9', --tc;         n[tc] -= 1;         while (tc > 0 && n[tc - 1] > n[tc])           n[tc - 1] -= 1, n[tc] = '9', --tc;         for (int x = j + 1; x < s; ++x)           n[x] = '9';         break;       }       y = n[j];     }     int tc = 0;     while (n[tc] == '0')       ++tc;     fout << "Case #" << i << ": " << n.substr(tc) << "\n";   }   return ret_val; }
#include <algorithm> #include <bits/stdc++.h> #include <climits> #include <cmath> #include <cstdio> #include <cstring> #include <iostream> #include <iterator> #include <map> #include <queue> #include <set> #include <stack> #include <stdio.h> #include <string> #include <unordered_map> #include <utility> #include <vector>   using namespace std; 
typedef pair<int, int> ii;  using ll = long long; using ull = unsigned long long; using pii = pair<int, int>; using pll = pair<ll, ll>; using vi = vector<int>; using vll = vector<ll>; using pill = pair<int, ll>; using vvi = vector<vi>;  inline void fudskwfwey(ll &a, ll &b, ll &ct) {   a = b;   b = ct; }  ll gcd(ll a, ll b) {   ll ct;   while ((ct = a % b) != 0)     fudskwfwey(a, b, ct);   return b; }  ll fast_exp(ll base, ll n, ll m) {   if (n == 0)     return 1;   ll ct = fast_exp(base, n / 2, m);   if (n % 2 == 0)     return (ct * ct) % m;   else     return (((ct * ct) % m) * base) % m; }  bool is_set(int i, ll mask) { return (mask >> i) & 1; }  int count_bits(ll mask) {   int ans = 0;   for (int i = 0; i < 64; ++i)     if (is_set(i, mask))       ++ans;   return ans; }  int first_bit(ll mask) {   int i = 0;   while (i < 64)     if (is_set(i++, mask))       return i - 1;   return -1; }  
int main() {   freopen("/home/tom/project/ramdisk/blackbox_3264486_5633382285312000_10_Usenix_RF_1.0_True_MCTS_Classic_True/ccsnoopy/ibrahim5253/A-small-practice.in",           "r", stdin);    freopen("/home/tom/project/ramdisk/blackbox_3264486_5633382285312000_10_Usenix_RF_1.0_True_MCTS_Classic_True/ccsnoopy/ibrahim5253/outer_temp/ibrahim5253/A-small-practice_transformation.out",           "w", stdout);    int ct;   scanf("%d ", &ct);   for (int i = 1; i <= ct; ++i) {     string n;     cin >> n;     char l = '0';     int s = n.length();     for (int j = 0; j < s; ++j) {       if (n[j] < l) {         --j;         int k = j;         while (k > 0 && n[k] == '1')           n[k] = '9', --k;         n[k] -= 1;         while (k > 0 && n[k - 1] > n[k])           n[k - 1] -= 1, n[k] = '9', --k;         for (int x = j + 1; x < s; ++x)           n[x] = '9';         break;       }       l = n[j];     }     int k = 0;     while (n[k] == '0')       ++k;     printf("Case #%d: %s\n", i, n.substr(k).c_str());   }   return 0; }
#include <algorithm> #include <bits/stdc++.h> #include <climits> #include <cmath> #include <cstdio> #include <cstring> #include <iostream> #include <iterator> #include <map> #include <queue> #include <set> #include <stack> #include <stdio.h> #include <string> #include <unordered_map> #include <utility> #include <vector>  using namespace std; 
using ll = long long; using ull = unsigned long long; using pii = pair<int, int>; using pll = pair<ll, ll>; using vi = vector<int>; using vll = vector<ll>; using pill = pair<int, ll>; using vvi = vector<vi>;  ll fast_exp(ll base, ll n, ll pyal_Var) {   if (n == 0)     return 1;   ll tt = fast_exp(base, n / 2, pyal_Var);   if (n % 2 == 0)     return (tt * tt) % pyal_Var;   else     return (((tt * tt) % pyal_Var) * base) % pyal_Var; }  bool is_set(int i, ll mask) { return (mask >> i) & 1; }  int do_intylg_fct(ll mask) {   int ans = 0;   for (int i = 0; i < 64; ++i)     if (is_set(i, mask))       ++ans;   return ans; }  int first_bit(ll mask) {   int i = 0;   while (i < 64)     if (is_set(i++, mask)) {       return i - 1;     }   return -1; }  
int main() {   freopen("/home/tom/project/ramdisk/blackbox_3264486_5633382285312000_11_Usenix_RF_1.0_True_MCTS_Classic_True/fragusbot/ibrahim5253/A-small-practice.in",           "r", stdin);    int ret_val = 0;   freopen("/home/tom/project/ramdisk/blackbox_3264486_5633382285312000_11_Usenix_RF_1.0_True_MCTS_Classic_True/fragusbot/ibrahim5253/outer_temp/ibrahim5253/A-small-practice_transformation.out",           "w", stdout);   int tt;   scanf("%d ", &tt);   {     int i = 1;     while (i <= tt) {       string n;       cin >> n;       char l = '0';       int s = n.length();       int j;       for (j = 0; j < s; ++j) {         if (n[j] < l) {           --j;           int cc = j;           while (cc > 0 && n[cc] == '1')             n[cc] = '9', --cc;           n[cc] -= 1;           while (cc > 0 && n[cc - 1] > n[cc])             n[cc - 1] -= 1, n[cc] = '9', --cc;            for (int x = j + 1; x < s; ++x)             n[x] = '9';           break;         }         l = n[j];       }       int cc = 0;       while (n[cc] == '0')         ++cc;       printf("Case #%d: %s\n", i, n.substr(cc).c_str());       ++i;     }   }   return ret_val; }
#include <algorithm> #include <bits/stdc++.h> #include <bitset> #include <cassert> #include <cctype> #include <climits> #include <cmath> #include <complex> #include <cstdio> #include <cstring> #include <ctime> #include <deque> #include <fstream> #include <functional> #include <iomanip> #include <iostream> #include <iterator> #include <list> #include <map> #include <numeric> #include <queue> #include <set> #include <stack> #include <stdio.h> #include <stdlib.h> #include <string> #include <unordered_map> #include <utility> #include <vector>   using namespace std;  
ofstream fout;  ifstream fin;  using ll = long long; using ull = unsigned long long; using pii = pair<int, int>; using pll = pair<ll, ll>; using vi = vector<int>; using vll = vector<ll>; using pill = pair<int, ll>; using vvi = vector<vi>;  ll gcd(ll a, ll b) {   ll t;   for (; (t = a % b) != 0;) {     a = b;     b = t;   }   return b; }  bool is_set(int i, ll mask) { return (mask >> i) & 1; }  int get(ll mask) {   int ans = 0;   for (int i = 0; i < 64; ++i)     if (is_set(i, mask))       ++ans;    return ans; }  int first_bit(ll mask) {   int ret_val = -1;   int i = 0;   while (i < 64)     if (is_set(i++, mask))       return i - 1;   return ret_val; }  
int main() {   fout.open("/home/tom/project/ramdisk/blackbox_3264486_5633382285312000_11_Usenix_RF_1.0_True_MCTS_Classic_True/gultai4ukr/ibrahim5253/outer_temp/ibrahim5253/A-small-practice_transformation.out");    fin.open("/home/tom/project/ramdisk/blackbox_3264486_5633382285312000_11_Usenix_RF_1.0_True_MCTS_Classic_True/gultai4ukr/ibrahim5253/A-small-practice.in");    int t;   fin >> t;   for (int i = 1; i <= t; ++i) {     string n;     fin >> n;     char l = '0';     int s = n.length();     for (int j = 0; j < s; ++j) {       if (n[j] < l) {         --j;         int k = j;         while (k > 0 && n[k] == '1')           n[k] = '9', --k;         n[k] -= 1;         while (k > 0 && n[k - 1] > n[k])           n[k - 1] -= 1, n[k] = '9', --k;         for (int x = j + 1; x < s; ++x)           n[x] = '9';         break;       }       l = n[j];     }     int k = 0;     while (n[k] == '0')       ++k;     fout << "Case #" << i << ": " << n.substr(k) << "\n";   }   return 0; }
#include <algorithm> #include <cassert> #include <climits> #include <cstdio> #include <cstring> #include <ctime> #include <deque> #include <functional> #include <iomanip> #include <iostream> #include <iterator> #include <math.h> #include <set> #include <sstream> #include <stack> #include <stdio.h> #include <string> #include <unordered_map> #include <utility> #include <vector> using namespace std; 
typedef long double ld; typedef long long ll; typedef pair<int, int> ii; typedef pair<int, int> PII; typedef vector<int> vi;  bool f(int n) {   if (n < 10)     return 1;   int a = n % 10;   int b = n % 100 / 10;   return f(n / 10) && (a >= b); }  char s[100]; 
int main(void) {   ios::sync_with_stdio(false);    int t;   cin >> t;   for (int tt = 1; tt <= t; tt++) {       cin >> s;     int x;     {       x = 1;       while (s[x] != 0) {         if (s[x] < s[x - 1])           break;         ++x;       }     }     if (s[x] == 0) {       printf("Case #%d: %s\n", tt, s);       continue;     }      int i = max(0, x - 1);     for (int j = strlen(s) - 1; j > i; --j) {       s[j] = '9';     }      for (; i >= 0; --i) {       if (i == 0 || s[i] > s[i - 1]) {         --s[i];         break;       }       s[i] = '9';     }      printf("Case #%d: %s\n", tt, s[0] == '0' ? s + 1 : s);   }   return 0; }
#include <algorithm> #include <bits/stdc++.h> #include <bitset> #include <cassert> #include <cctype> #include <climits> #include <cmath> #include <complex> #include <cstdio> #include <cstring> #include <ctime> #include <deque> #include <fstream> #include <iomanip> #include <iostream> #include <iterator> #include <map> #include <math.h> #include <queue> #include <sstream> #include <stack> #include <stdio.h> #include <stdlib.h> #include <unordered_map> #include <utility> #include <vector> using namespace std;
typedef set<int> si; typedef vector<vector<int>> vvi; typedef long double ld; typedef pair<int, int> PII; typedef unsigned long long ull; typedef vector<int> VI; typedef long double LD; typedef long long ll;  
int main() {   int ret_val = 0;   ios::sync_with_stdio(0);   freopen("/home/tom/project/ramdisk/blackbox_3264486_5633382285312000_11_Usenix_RF_1.0_True_MCTS_Classic_True/ibrahim5253/jiian/A-small-practice.in",           "r", stdin);   freopen("/home/tom/project/ramdisk/blackbox_3264486_5633382285312000_11_Usenix_RF_1.0_True_MCTS_Classic_True/ibrahim5253/jiian/outer_temp/jiian/A-small-practice_transformation.out",           "w", stdout);   int solve, ans = 0;   cin >> solve;   while (solve--) {     string get;     cin >> get;     reverse(get.begin(), get.end());     int n = get.size();     for (int i = 1; i < n; i++) {       if (get[i] <= get[i - 1])         continue;       {         int j = 0;         while (j < i) {           get[j] = '9';           j++;         }       }       int j = i;       while (get[j] == '0')         get[j] = '9', j++;       get[j]--;     }     while (get.back() == '0')       get.pop_back();     reverse(get.begin(), get.end());     printf("Case #%d: %s\n", ++ans, get.c_str());   }   return ret_val; }
#include <algorithm> #include <bits/stdc++.h> #include <bitset> #include <cassert> #include <cctype> #include <climits> #include <complex> #include <cstdio> #include <cstdlib> #include <cstring> #include <ctime> #include <iostream> #include <iterator> #include <map> #include <math.h> #include <numeric> #include <queue> #include <set> #include <stack> #include <stdio.h> #include <stdlib.h> #include <string> #include <unordered_map> #include <utility> #include <vector> using namespace std; 
const int mod = 1000000007; const int MAXN = 1005;  typedef long long ll; typedef pair<int, int> PII; typedef long double LD; typedef set<int> si; typedef vector<vector<int>> vvi;  ofstream fout("/home/tom/project/ramdisk/blackbox_3264486_5633382285312000_4_Usenix_RF_1.0_True_MCTS_Classic_True/ibrahim5253/sammyMaX/outer_temp/sammyMaX/A-small-practice_transformation.out");  inline bool bhewdgreus(char &minc, std::string &s, std::string &bhewd) {   string p = "";   if (s[0] > minc && s[0] > '1')     p += (char)(s[0] - 1);   for (int i = 1; i < s.size(); i++) {     p += '9';   }   bhewd = p;   return true;   return false; }  string solves(string s, char get) {   if (s.size() == 0)     return "";   char minc = '9';   for (char c : s)     minc = min(minc, c);   if (s[0] > minc) {     if (s.size() > 1 && s[1] > s[0])       return s[0] + solves(s.substr(1), s[0]);     else {       std::string bhewd;       if (bhewdgreus(minc, s, bhewd)) {         return bhewd;       }     }   }   return minc + solves(s.substr(1), minc); }  void solve() {   string s;   cin >> s;   fout << solves(s, '0') << '\n'; }  inline void zbtiijsvqd(int &i) { fout << "Case #" << i + 1 << ": ", solve(); }  
int main() {   ios::sync_with_stdio(false);   int t;   cin >> t;   for (int i = 0; i < t; i++)     zbtiijsvqd(i);   return 0; }
#include <algorithm> #include <climits> #include <cmath> #include <cstdio> #include <cstring> #include <iostream> #include <iterator> #include <map> #include <queue> #include <set> #include <stack> #include <stdio.h> #include <string> #include <unordered_map> #include <utility> #include <vector>   using namespace std; 
using ll = long long; using ull = unsigned long long; using pii = pair<int, int>; using pll = pair<ll, ll>; using vi = vector<int>; using vll = vector<ll>; using pill = pair<int, ll>; using vvi = vector<vi>;  inline void fewhoobnbj(ll &a, ll &tt, ll &t) {   a = tt;   tt = t; }  ll do_llubd_fct(ll a, ll tt) {   ll t;   while ((t = a % tt) != 0)     fewhoobnbj(a, tt, t);   return tt; }  ll do_llirc_fct(ll base, ll n, ll duol_Var) {   if (n == 0)     return 1;   ll t = do_llirc_fct(base, n / 2, duol_Var);   if (n % 2 == 0)     return (t * t) % duol_Var;   else     return (((t * t) % duol_Var) * base) % duol_Var; }  bool do__Bobfp_fct(int i, ll rjcl_Var) { return (rjcl_Var >> i) & 1; }  int do_intilo_fct(ll rjcl_Var) {   int i = 0;   while (i < 64)     if (do__Bobfp_fct(i++, rjcl_Var))       return i - 1;   return -1; }  
int main() {    int t;   scanf("%d ", &t);   {     int i = 1;     for (; i <= t;) {       string n;       cin >> n;       char qqgc_Var = '0';       int s = n.length();       for (int wxsi_Var = 0; wxsi_Var < s; ++wxsi_Var) {         if (n[wxsi_Var] < qqgc_Var) {           --wxsi_Var;           int k = wxsi_Var;           while (k > 0 && n[k] == '1')             n[k] = '9', --k;           n[k] -= 1;           while (k > 0 && n[k - 1] > n[k])             n[k - 1] -= 1, n[k] = '9', --k;           for (int x = wxsi_Var + 1; x < s; ++x)             n[x] = '9';           break;         }         qqgc_Var = n[wxsi_Var];       }       int k = 0;       while (n[k] == '0')         ++k;       printf("Case #%d: %s\n", i, n.substr(k).c_str());       ++i;     }   }   return 0; }
#include <algorithm> #include <bits/stdc++.h> #include <climits> #include <cmath> #include <cstdio> #include <cstring> #include <iostream> #include <iterator> #include <map> #include <queue> #include <set> #include <stack> #include <stdio.h> #include <string> #include <unordered_map> #include <utility> #include <vector>   using namespace std; 
using ll = long long; using ull = unsigned long long; using pii = pair<int, int>; using pll = pair<ll, ll>; using vi = vector<int>; using vll = vector<ll>; using pill = pair<int, ll>; using vvi = vector<vi>;  ll gcd(ll cnfl_Var, ll nvtl_Var) {   ll r;   while ((r = cnfl_Var % nvtl_Var) != 0) {     cnfl_Var = nvtl_Var;     nvtl_Var = r;   }   return nvtl_Var; }  ll fast_exp(ll ksyl_Var, ll n, ll m) {   if (n == 0)     return 1;   ll r = fast_exp(ksyl_Var, n / 2, m);   if (n % 2 == 0)     return (r * r) % m;   else     return (((r * r) % m) * ksyl_Var) % m; }  bool is_set(int i, ll mask) { return (mask >> i) & 1; }  int count_bits(ll mask) {   int ans = 0;   int i;   {     i = 0;     while (i < 64) {       if (is_set(i, mask))         ++ans;       ++i;     }   }   return ans; }  int first_bit(ll mask) {   int i = 0;   while (i < 64) {     if (is_set(i++, mask))       return i - 1;   }   return -1; }  
int main() {   ios::sync_with_stdio(true);    freopen("/home/tom/project/ramdisk/blackbox_3264486_5633382285312000_11_Usenix_RF_1.0_True_MCTS_Classic_True/jiian/ibrahim5253/A-small-practice.in",           "r", stdin);    freopen("/home/tom/project/ramdisk/blackbox_3264486_5633382285312000_11_Usenix_RF_1.0_True_MCTS_Classic_True/jiian/ibrahim5253/outer_temp/ibrahim5253/A-small-practice_transformation.out",           "w", stdout);    int r;   scanf("%d ", &r);   for (int i = 1; i <= r; ++i) {     string n;     cin >> n;     char l = '0';     int s = n.length();     for (int cas = 0; cas < s; ++cas) {       if (n[cas] < l) {         --cas;         int k = cas;         while (k > 0 && n[k] == '1')           n[k] = '9', --k;         n[k] -= 1;         while (k > 0 && n[k - 1] > n[k])           n[k - 1] -= 1, n[k] = '9', --k;         for (int x = cas + 1; x < s; ++x)           n[x] = '9';         break;       }       l = n[cas];     }     int k = 0;     while (n[k] == '0')       ++k;     printf("Case #%d: %s\n", i, n.substr(k).c_str());   }   return 0; }
#include <algorithm> #include <bits/stdc++.h> #include <cassert> #include <climits> #include <cmath> #include <complex> #include <cstdio> #include <cstring> #include <deque> #include <fstream> #include <iostream> #include <iterator> #include <list> #include <map> #include <math.h> #include <queue> #include <set> #include <sstream> #include <stack> #include <stdio.h> #include <stdlib.h> #include <string> #include <unordered_map> #include <utility> #include <vector>    using namespace std; 
typedef set<int> si; typedef long double ld; typedef pair<int, int> PII; typedef vector<int> VI;  using ll = long long; using ull = unsigned long long; using pii = pair<int, int>; using pll = pair<ll, ll>; using vi = vector<int>; using vll = vector<ll>; using pill = pair<int, ll>; using vvi = vector<vi>;  ll gcd(ll a, ll b) {   ll t;   while ((t = a % b) != 0) {     a = b;     b = t;   }   return b; }  ll fast_exp(ll base, ll n, ll m) {   if (n == 0)     return 1;   ll t = fast_exp(base, n / 2, m);   if (n % 2 == 0)     return (t * t) % m;   else     return (((t * t) % m) * base) % m; }  bool is_set(int i, ll mask) { return (mask >> i) & 1; }  int first_bit(ll mask) {   int i = 0;   while (i < 64) {     if (is_set(i++, mask))       return i - 1;   }   return -1; }  
int main() {   ios::sync_with_stdio(true);    freopen("/home/tom/project/ramdisk/blackbox_3264486_5633382285312000_10_Usenix_RF_1.0_True_MCTS_Classic_True/KhaleD/ibrahim5253/A-small-practice.in",           "r", stdin);    int ret_val = 0;    freopen("/home/tom/project/ramdisk/blackbox_3264486_5633382285312000_10_Usenix_RF_1.0_True_MCTS_Classic_True/KhaleD/ibrahim5253/outer_temp/ibrahim5253/A-small-practice_transformation.out",           "w", stdout);   int t;   scanf("%d ", &t);   int i;   for (i = 1; i <= t; ++i) {     string n;     cin >> n;     char l = '0';     int s = n.length();     for (int j = 0; j < s; ++j) {       if (n[j] < l) {         --j;         int q = j;         while (q > 0 && n[q] == '1')           n[q] = '9', --q;         n[q] -= 1;         while (q > 0 && n[q - 1] > n[q])           n[q - 1] -= 1, n[q] = '9', --q;         for (int x = j + 1; x < s; ++x)           n[x] = '9';         break;       }       l = n[j];     }     int q = 0;     while (n[q] == '0')       ++q;     printf("Case #%d: %s\n", i, n.substr(q).c_str());   }   return ret_val; }
#include <algorithm> #include <bitset> #include <cctype> #include <climits> #include <cmath> #include <complex> #include <cstdio> #include <cstdlib> #include <cstring> #include <ctime> #include <deque> #include <fstream> #include <iomanip> #include <iostream> #include <iterator> #include <map> #include <math.h> #include <numeric> #include <queue> #include <set> #include <sstream> #include <stack> #include <stdio.h> #include <stdlib.h> #include <string> #include <unordered_map> #include <utility> #include <vector>   using namespace std;  
using ll = long long; using ull = unsigned long long; using pii = pair<int, int>; using pll = pair<ll, ll>; using vi = vector<int>; using vll = vector<ll>; using pill = pair<int, ll>; using vvi = vector<vi>;  inline void iugxuelgwp(ll &a, ll &b, ll &t) {   a = b;   b = t; }  ll gcd(ll a, ll b) {   ll t;   for (; (t = a % b) != 0;)     iugxuelgwp(a, b, t);   return b; }  ll fast_exp(ll d, ll n, ll m) {   if (n == 0)     return 1;   ll t = fast_exp(d, n / 2, m);   if (n % 2 == 0)     return (t * t) % m;   else     return (((t * t) % m) * d) % m; }  bool is_set(int i, ll N) { return (N >> i) & 1; }  int first_bit(ll N) {   int i = 0;   while (i < 64)     if (is_set(i++, N))       return i - 1;    return -1; }  
int main() {    int t;   cin >> t;   for (int i = 1; i <= t; ++i) {     string n;     cin >> n;     char l = '0';     int s = n.length();     {       int j = 0;       for (; j < s;) {         if (n[j] < l) {           --j;           int k = j;           while (k > 0 && n[k] == '1')             n[k] = '9', --k;           n[k] -= 1;           while (k > 0 && n[k - 1] > n[k])             n[k - 1] -= 1, n[k] = '9', --k;           for (int x = j + 1; x < s; ++x)             n[x] = '9';           break;         }         l = n[j];         ++j;       }     }     int k = 0;     while (n[k] == '0')       ++k;     printf("Case #%d: %s\n", i, n.substr(k).c_str());   }   return 0; }
#include <algorithm> #include <bitset> #include <climits> #include <cmath> #include <complex> #include <cstdio> #include <cstdlib> #include <cstring> #include <ctime> #include <fstream> #include <iomanip> #include <iostream> #include <iterator> #include <list> #include <map> #include <queue> #include <set> #include <stack> #include <stdio.h> #include <stdlib.h> #include <string> #include <unordered_map> #include <utility> #include <vector>   using namespace std;  
typedef long long LL; typedef vector<int> VI; typedef long double ld; typedef pair<int, int> PII; typedef long double LD; typedef set<int> si;  using ll = long long; using ull = unsigned long long; using pii = pair<int, int>; using pll = pair<ll, ll>; using vi = vector<int>; using vll = vector<ll>; using pill = pair<int, ll>; using vvi = vector<vi>;  inline void vmqaeohjbu(ll &a, ll &b, ll &t) {   a = b;   b = t; }  ll gcd(ll a, ll b) {   ll t;   while ((t = a % b) != 0)     vmqaeohjbu(a, b, t);   return b; }  ll fast_exp(ll base, ll n, ll r) {   if (n == 0)     return 1;   ll t = fast_exp(base, n / 2, r);   if (n % 2 == 0)     return (t * t) % r;   else     return (((t * t) % r) * base) % r; }  bool is_set(int i, ll c) { return (c >> i) & 1; }  int count_bits(ll c) {   int ans = 0;   for (int i = 0; i < 64; ++i)     if (is_set(i, c))       ++ans;   return ans; }  int get(ll c) {   int i = 0;   while (i < 64)     if (is_set(i++, c))       return i - 1;   return -1; }  
int main() {    int ret_val = 0;   freopen("/home/tom/project/ramdisk/blackbox_3264486_5633382285312000_11_Usenix_RF_1.0_True_MCTS_Classic_True/lazyBit/ibrahim5253/A-small-practice.in",           "r", stdin);   int t;   scanf("%d ", &t);   {     int i = 1;     while (i <= t) {       string n;       cin >> n;       char l = '0';       int s = n.length();       {         int j = 0;         for (; j < s;) {           if (n[j] < l) {             --j;             int k = j;             while (k > 0 && n[k] == '1')               n[k] = '9', --k;             n[k] -= 1;             while (k > 0 && n[k - 1] > n[k])               n[k - 1] -= 1, n[k] = '9', --k;             for (int x = j + 1; x < s; ++x)               n[x] = '9';             break;           }           l = n[j];           ++j;         }       }       int k = 0;       while (n[k] == '0')         ++k;       cout << "Case #" << i << ": " << n.substr(k) << "\n";       ++i;     }   }   return ret_val; }
#include <algorithm> #include <bits/stdc++.h> #include <bitset> #include <cassert> #include <cctype> #include <climits> #include <cmath> #include <complex> #include <cstdio> #include <cstdlib> #include <cstring> #include <ctime> #include <deque> #include <fstream> #include <iomanip> #include <iostream> #include <iterator> #include <list> #include <map> #include <math.h> #include <queue> #include <set> #include <sstream> #include <stack> #include <stdio.h> #include <stdlib.h> #include <string> #include <unordered_map> #include <utility> #include <vector>   using namespace std; 
const int INF = 1000000000; const double EPS = 1e-9; const long double PI = 3.1415926535897932384626433832795; const double eps = 1e-9; ofstream fout;  typedef pair<int, int> ii; typedef long double LD; typedef long long LL; typedef set<int> si;  using ll = long long; using ull = unsigned long long; using pii = pair<int, int>; using pll = pair<ll, ll>; using vi = vector<int>; using vll = vector<ll>; using pill = pair<int, ll>; using vvi = vector<vi>;  ll gcd(ll a, ll b) {   ll t;   for (; (t = a % b) != 0;) {     a = b;     b = t;   }   return b; }  ll get(ll base, ll n, ll m) {   if (n == 0)     return 1;   ll t = get(base, n / 2, m);   if (n % 2 == 0)     return (t * t) % m;   else     return (((t * t) % m) * base) % m; }  bool solve(int i, ll mask) { return (mask >> i) & 1; }  
int main() {   fout.open("/home/tom/project/ramdisk/blackbox_3264486_5633382285312000_11_Usenix_RF_1.0_True_MCTS_Classic_True/Mucosolvan/ibrahim5253/outer_temp/ibrahim5253/A-small-practice_transformation.out");    ios::sync_with_stdio(false);   int t;   cin >> t;   for (int i = 1; i <= t; ++i) {     string n;     cin >> n;     char l = '0';     int s = n.length();     for (int j = 0; j < s; ++j) {       if (n[j] < l) {         --j;         int r = j;         while (r > 0 && n[r] == '1')           n[r] = '9', --r;         n[r] -= 1;         while (r > 0 && n[r - 1] > n[r])           n[r - 1] -= 1, n[r] = '9', --r;         for (int x = j + 1; x < s; ++x)           n[x] = '9';         break;       }       l = n[j];     }     int r = 0;     while (n[r] == '0')       ++r;     fout << "Case #" << i << ": " << n.substr(r) << "\n";   }   return 0; }
#include <algorithm> #include <bits/stdc++.h> #include <bitset> #include <cctype> #include <climits> #include <cmath> #include <complex> #include <cstdio> #include <cstring> #include <ctime> #include <iomanip> #include <iostream> #include <iterator> #include <map> #include <math.h> #include <numeric> #include <queue> #include <set> #include <stack> #include <stdio.h> #include <string> #include <unordered_map> #include <utility> #include <vector>   using namespace std; 
const long double PI = 3.1415926535897932384626433832795; typedef long double ld; typedef long long LL; typedef long double LD;  using ll = long long; using ull = unsigned long long; using pii = pair<int, int>; using pll = pair<ll, ll>; using vi = vector<int>; using vll = vector<ll>; using pill = pair<int, ll>; using vvi = vector<vi>;  ll solve(ll base, ll n, ll m) {   if (n == 0)     return 1;   ll t = solve(base, n / 2, m);   if (n % 2 == 0)     return (t * t) % m;   else     return (((t * t) % m) * base) % m; }  bool do__Boyhd_fct(int i, ll mask) { return (mask >> i) & 1; }  int count_bits(ll mask) {   int ans = 0;   for (int i = 0; i < 64; ++i)     if (do__Boyhd_fct(i, mask))       ++ans;   return ans; }  int get(ll mask) {   int i = 0;   while (i < 64)     if (do__Boyhd_fct(i++, mask))       return i - 1;   return -1; }  
int main() {    int ret_val = 0;   int t;   scanf("%d ", &t);   int i;   for (i = 1; i <= t; ++i) {     string n;     cin >> n;     char l = '0';     int s = n.length();     for (int j = 0; j < s; ++j) {       if (n[j] < l) {         --j;         int k = j;         while (k > 0 && n[k] == '1')           n[k] = '9', --k;         n[k] -= 1;         while (k > 0 && n[k - 1] > n[k])           n[k - 1] -= 1, n[k] = '9', --k;         for (int x = j + 1; x < s; ++x)           n[x] = '9';         break;       }       l = n[j];     }     int k = 0;     while (n[k] == '0')       ++k;     cout << "Case #" << i << ": " << n.substr(k) << "\n";   }   return ret_val; }
#include <algorithm> #include <bits/stdc++.h> #include <bitset> #include <cassert> #include <cctype> #include <climits> #include <cmath> #include <complex> #include <cstdio> #include <cstring> #include <ctime> #include <fstream> #include <iostream> #include <iterator> #include <map> #include <numeric> #include <queue> #include <set> #include <stack> #include <stdio.h> #include <stdlib.h> #include <string> #include <unordered_map> #include <utility> #include <vector>    using namespace std; 
const int MAXN = 1005; const int INF = 1000000000;  ofstream fout;  using ll = long long; using ull = unsigned long long; using pii = pair<int, int>; using pll = pair<ll, ll>; using vi = vector<int>; using vll = vector<ll>; using pill = pair<int, ll>; using vvi = vector<vi>;  inline void zdqhhgakww(ll &a, ll &b, ll &t) {   a = b;   b = t; }  ll gcd(ll a, ll b) {   ll t;   while ((t = a % b) != 0)     zdqhhgakww(a, b, t);   return b; }  ll solve(ll base, ll n, ll m) {   if (n == 0)     return 1;   ll t = solve(base, n / 2, m);   if (n % 2 == 0)     return (t * t) % m;   else     return (((t * t) % m) * base) % m; }  bool is_set(int i, ll mask) { return (mask >> i) & 1; }  int count_bits(ll mask) {   int ans = 0;   for (int i = 0; i < 64; ++i)     if (is_set(i, mask))       ++ans;   return ans; }  int first_bit(ll mask) {   int ret_val = -1;   int i = 0;   while (i < 64)     if (is_set(i++, mask))       return i - 1;   return ret_val; }  inline void puhkcigwwp(int &j, int &s, std::string &n) {   int x = j + 1;   while (x < s) {     n[x] = '9';     ++x;   } }  
int main() {   ios::sync_with_stdio(false);    fout.open("/home/tom/project/ramdisk/blackbox_3264486_5633382285312000_10_Usenix_RF_1.0_True_MCTS_Classic_True/sammyMaX/ibrahim5253/outer_temp/ibrahim5253/A-small-practice_transformation.out");    int ret_val = 0;    int t;   cin >> t;   for (int i = 1; i <= t; ++i) {     string n;     cin >> n;     char l = '0';     int s = n.length();     for (int j = 0; j < s; ++j) {       if (n[j] < l) {         --j;         int N = j;         while (N > 0 && n[N] == '1')           n[N] = '9', --N;         n[N] -= 1;         while (N > 0 && n[N - 1] > n[N])           n[N - 1] -= 1, n[N] = '9', --N;         puhkcigwwp(j, s, n);         break;       }       l = n[j];     }     int N = 0;     while (n[N] == '0')       ++N;     fout << "Case #" << i << ": " << n.substr(N) << "\n";   }   return ret_val; }
#include <algorithm> #include <bitset> #include <climits> #include <cmath> #include <cstdio> #include <cstring> #include <ctime> #include <iostream> #include <iterator> #include <map> #include <queue> #include <set> #include <stack> #include <stdio.h> #include <string> #include <unordered_map> #include <utility> #include <vector>   using namespace std; 
using ll = long long; using ull = unsigned long long; using pii = pair<int, int>; using pll = pair<ll, ll>; using vi = vector<int>; using vll = vector<ll>; using pill = pair<int, ll>; using vvi = vector<vi>;  ll fast_exp(ll base, ll n, ll m) {   if (n == 0)     return 1;   ll t = fast_exp(base, n / 2, m);   if (n % 2 == 0)     return (t * t) % m;   else     return (((t * t) % m) * base) % m; }  bool readData(int i, ll mask) { return (mask >> i) & 1; }  int solve(ll mask) {   int ans = 0;   for (int i = 0; i < 64; ++i)     if (readData(i, mask))       ++ans;   return ans; }  
int main() {   ios::sync_with_stdio(true);    freopen("/home/tom/project/ramdisk/blackbox_3264486_5633382285312000_11_Usenix_RF_1.0_True_MCTS_Classic_True/sdya/ibrahim5253/outer_temp/ibrahim5253/A-small-practice_transformation.out",           "w", stdout);    freopen("/home/tom/project/ramdisk/blackbox_3264486_5633382285312000_11_Usenix_RF_1.0_True_MCTS_Classic_True/sdya/ibrahim5253/A-small-practice.in",           "r", stdin);    int t;   scanf("%d ", &t);   for (int i = 1; i <= t; ++i) {     string n;     cin >> n;     char l = '0';     int s = n.length();     for (int j = 0; j < s; ++j) {       if (n[j] < l) {         --j;         int k = j;         while (k > 0 && n[k] == '1')           n[k] = '9', --k;         n[k] -= 1;         for (; k > 0 && n[k - 1] > n[k];) {           n[k - 1] -= 1, n[k] = '9', --k;         }         int x;         {           x = j + 1;           for (; x < s;) {             n[x] = '9';             ++x;           }         }         break;       }       l = n[j];     }     int k = 0;     while (n[k] == '0')       ++k;     printf("Case #%d: %s\n", i, n.substr(k).c_str());   }   return 0; }
#include <algorithm> #include <climits> #include <cmath> #include <cstdio> #include <cstring> #include <iostream> #include <iterator> #include <map> #include <queue> #include <set> #include <stack> #include <stdio.h> #include <string> #include <unordered_map> #include <utility> #include <vector>    using namespace std; 
const int MOD = 1000000007; using ll = long long; using ull = unsigned long long; using pii = pair<int, int>; using pll = pair<ll, ll>; using vi = vector<int>; using vll = vector<ll>; using pill = pair<int, ll>; using vvi = vector<vi>;  inline void pirqdvygju(ll &a, ll &b, ll &t) {   a = b;   b = t; }  bool is_set(int i, ll mask) { return (mask >> i) & 1; }  int first_bit(ll mask) {   int i;   for (i = 0; i < 64;) {     if (is_set(i++, mask)) {       return i - 1;     }   }   return -1; }  
int main() {   ios::sync_with_stdio(false);    freopen("/home/tom/project/ramdisk/blackbox_3264486_5633382285312000_10_Usenix_RF_1.0_True_MCTS_Classic_True/Tashi711/ibrahim5253/outer_temp/ibrahim5253/A-small-practice_transformation.out",           "w", stdout);    freopen("/home/tom/project/ramdisk/blackbox_3264486_5633382285312000_10_Usenix_RF_1.0_True_MCTS_Classic_True/Tashi711/ibrahim5253/A-small-practice.in",           "r", stdin);    int t;   cin >> t;   for (int i = 1; i <= t; ++i) {     string n;     cin >> n;     char r = '0';     int s = n.length();     {       int j = 0;       while (j < s) {         if (n[j] < r) {           --j;           int k = j;           while (k > 0 && n[k] == '1')             n[k] = '9', --k;           n[k] -= 1;           while (k > 0 && n[k - 1] > n[k])             n[k - 1] -= 1, n[k] = '9', --k;           for (int x = j + 1; x < s; ++x)             n[x] = '9';           break;         }         r = n[j];         ++j;       }     }     int k = 0;     while (n[k] == '0')       ++k;     printf("Case #%d: %s\n", i, n.substr(k).c_str());   }   return 0; }
#include <algorithm> #include <climits> #include <cmath> #include <cstdio> #include <cstring> #include <iostream> #include <iterator> #include <map> #include <queue> #include <set> #include <stack> #include <stdio.h> #include <string> #include <unordered_map> #include <utility> #include <vector>   using namespace std;  
using ll = long long; using ull = unsigned long long; using pii = pair<int, int>; using pll = pair<ll, ll>; using vi = vector<int>; using vll = vector<ll>; using pill = pair<int, ll>; using vvi = vector<vi>;  inline void vmxzqqtbdf(ll &a, ll &b, ll &t) {   a = b;   b = t; }  ll get(ll a, ll b) {   ll t;   for (; (t = a % b) != 0;)     vmxzqqtbdf(a, b, t);   return b; }  bool is_set(int i, ll q) { return (q >> i) & 1; }  int do_intztm_fct(ll q) {   int ans = 0;   for (int i = 0; i < 64; ++i)     if (is_set(i, q))       ++ans;   return ans; }  int solve(ll q) {   int ret_val = -1;   int i = 0;   while (i < 64)     if (is_set(i++, q))       return i - 1;   return ret_val; }  inline void jzvvnsaqof(int &k) { ++k; }  
int main() {    int t;   scanf("%d ", &t);   for (int i = 1; i <= t; ++i) {     string n;     cin >> n;     char l = '0';     int s = n.length();     for (int j = 0; j < s; ++j) {       if (n[j] < l) {         --j;         int k = j;         while (k > 0 && n[k] == '1')           n[k] = '9', --k;         n[k] -= 1;         while (k > 0 && n[k - 1] > n[k])           n[k - 1] -= 1, n[k] = '9', --k;         for (int x = j + 1; x < s; ++x)           n[x] = '9';         break;       }       l = n[j];     }     int k = 0;     while (n[k] == '0')       jzvvnsaqof(k);     printf("Case #%d: %s\n", i, n.substr(k).c_str());   }   return 0; }
#include <algorithm> #include <bitset> #include <cassert> #include <cctype> #include <climits> #include <cmath> #include <cstdio> #include <cstring> #include <deque> #include <fstream> #include <iostream> #include <iterator> #include <list> #include <map> #include <math.h> #include <numeric> #include <queue> #include <set> #include <sstream> #include <stack> #include <stdio.h> #include <string> #include <unordered_map> #include <utility> #include <vector>    using namespace std; 
using ll = long long; using ull = unsigned long long; using pii = pair<int, int>; using pll = pair<ll, ll>; using vi = vector<int>; using vll = vector<ll>; using pill = pair<int, ll>; using vvi = vector<vi>;  ll do_llbrw_fct(ll a, ll b) {   ll t;   while ((t = a % b) != 0) {     a = b;     b = t;   }   return b; }  ll do_llqrg_fct(ll y, ll n, ll m) {   if (n == 0)     return 1;   ll t = do_llqrg_fct(y, n / 2, m);   if (n % 2 == 0)     return (t * t) % m;   else     return (((t * t) % m) * y) % m; }  bool solve(int i, ll mask) { return (mask >> i) & 1; }  int do_intncr_fct(ll mask) {   int ans = 0;   for (int i = 0; i < 64; ++i)     if (solve(i, mask))       ++ans;   return ans; }  int get(ll mask) {   int i = 0;   while (i < 64)     if (solve(i++, mask))       return i - 1;    return -1; }  
int main() {    freopen("/home/tom/project/ramdisk/blackbox_3264486_5633382285312000_10_Usenix_RF_1.0_True_MCTS_Classic_True/try/ibrahim5253/outer_temp/ibrahim5253/A-small-practice_transformation.out",           "w", stdout);    freopen("/home/tom/project/ramdisk/blackbox_3264486_5633382285312000_10_Usenix_RF_1.0_True_MCTS_Classic_True/try/ibrahim5253/A-small-practice.in",           "r", stdin);    int t;   scanf("%d ", &t);   for (int i = 1; i <= t; ++i) {     string n;     cin >> n;     char l = '0';     int s = n.length();     int j;     for (j = 0; j < s; ++j) {       if (n[j] < l) {         --j;         int c = j;         while (c > 0 && n[c] == '1')           n[c] = '9', --c;         n[c] -= 1;         while (c > 0 && n[c - 1] > n[c])           n[c - 1] -= 1, n[c] = '9', --c;         for (int x = j + 1; x < s; ++x)           n[x] = '9';         break;       }       l = n[j];     }     int c = 0;     while (n[c] == '0')       ++c;     printf("Case #%d: %s\n", i, n.substr(c).c_str());   }   return 0; }
#include <algorithm> #include <climits> #include <cmath> #include <cstdio> #include <cstring> #include <fstream> #include <iostream> #include <iterator> #include <map> #include <queue> #include <set> #include <stack> #include <string> #include <unordered_map> #include <utility> #include <vector>   using namespace std;  
using ll = long long; using ull = unsigned long long; using pii = pair<int, int>; using pll = pair<ll, ll>; using vi = vector<int>; using vll = vector<ll>; using pill = pair<int, ll>; using vvi = vector<vi>;  ll solve(ll a, ll b) {   ll t;   while ((t = a % b) != 0) {     a = b;     b = t;   }   return b; }  ll get(ll d, ll n, ll m) {   if (n == 0)     return 1;   ll t = get(d, n / 2, m);   if (n % 2 == 0)     return (t * t) % m;   else     return (((t * t) % m) * d) % m; }  bool is_set(int i, ll mask) { return (mask >> i) & 1; }  int do_inthww_fct(ll mask) {   int i = 0;   while (i < 64)     if (is_set(i++, mask))       return i - 1;   return -1; }  inline void dgppbbaita(std::string &n, int &x) {   n[x] = '9';   ++x; }  inline void invbbtpnpz(int &j, int &s, std::string &n) {   int x = j + 1;   while (x < s)     dgppbbaita(n, x); }  
int main() {    int t;   cin >> t;   for (int i = 1; i <= t; ++i) {     string n;     cin >> n;     char p = '0';     int s = n.length();     for (int j = 0; j < s; ++j) {       if (n[j] < p) {         --j;         int q = j;         while (q > 0 && n[q] == '1')           n[q] = '9', --q;         n[q] -= 1;         while (q > 0 && n[q - 1] > n[q])           n[q - 1] -= 1, n[q] = '9', --q;         invbbtpnpz(j, s, n);         break;       }       p = n[j];     }     int q = 0;     while (n[q] == '0')       ++q;     cout << "Case #" << i << ": " << n.substr(q) << "\n";   }   return 0; }
#include <algorithm> #include <bits/stdc++.h> #include <climits> #include <cmath> #include <cstdio> #include <cstring> #include <fstream> #include <iostream> #include <iterator> #include <map> #include <queue> #include <set> #include <stack> #include <string> #include <unordered_map> #include <utility> #include <vector>    using namespace std; 
typedef double dbl;  ofstream fout;  ifstream fin;  using ll = long long; using ull = unsigned long long; using pii = pair<int, int>; using pll = pair<ll, ll>; using vi = vector<int>; using vll = vector<ll>; using pill = pair<int, ll>; using vvi = vector<vi>;  ll gcd(ll a, ll xcbl_Var) {   ll t;   while ((t = a % xcbl_Var) != 0) {     a = xcbl_Var;     xcbl_Var = t;   }   return xcbl_Var; }  ll fast_exp(ll tc, ll n, ll m) {   if (n == 0)     return 1;   ll t = fast_exp(tc, n / 2, m);   if (n % 2 == 0)     return (t * t) % m;   else     return (((t * t) % m) * tc) % m; }  bool is_set(int i, ll mask) { return (mask >> i) & 1; }  int do_intjvf_fct(ll mask) {   int maqi_Var = 0;   {     int i = 0;     while (i < 64) {       if (is_set(i, mask))         ++maqi_Var;       ++i;     }   }   return maqi_Var; }  int do_intisb_fct(ll mask) {   int i = 0;   while (i < 64)     if (is_set(i++, mask))       return i - 1;   return -1; }  
int main() {   fout.open("/home/seal12/Downloads/ramdisk/blackbox_3264486_5654742835396608_10_Usenix_RF_1.0_True_MCTS_Classic_True/4yn/ibrahim5253/outer_temp/ibrahim5253/A-small-practice_transformation.out");    fin.open("/home/seal12/Downloads/ramdisk/blackbox_3264486_5654742835396608_10_Usenix_RF_1.0_True_MCTS_Classic_True/4yn/ibrahim5253/A-small-practice.in");    int ret_val = 0;    int t;   fin >> t;   int j;   for (j = 1; j <= t; ++j) {     ll n, k;     fin >> n >> k;     ll zxyl_Var = 0, i = -1;     for (; zxyl_Var < k;)       ++i, zxyl_Var += 1ll << i;      ll C = 1ll << i;     ll left = n - zxyl_Var + C;     ll pos = k - zxyl_Var + C;     ll tc = left / (zxyl_Var - C + 1);     ll high = left % (zxyl_Var - C + 1);     if (pos <= high)       tc += 1;     fout << "Case #" << j << ": " << tc / 2 << " " << (tc - 1) / 2 << "\n";   }   return ret_val; }
#include <algorithm> #include <bits/stdc++.h> #include <bitset> #include <cassert> #include <cctype> #include <climits> #include <cmath> #include <cstdio> #include <cstdlib> #include <cstring> #include <ctime> #include <deque> #include <fstream> #include <functional> #include <iostream> #include <iterator> #include <list> #include <map> #include <math.h> #include <numeric> #include <queue> #include <set> #include <sstream> #include <stack> #include <stdlib.h> #include <string> #include <unordered_map> #include <utility> #include <vector>   using namespace std; 
ofstream fout;  typedef pair<int, int> ii; typedef pair<int, int> PII; typedef long double ld; typedef long long LL; typedef vector<int> VI; typedef long double LD; typedef set<int> si;  using ll = long long; using ull = unsigned long long; using pii = pair<int, int>; using pll = pair<ll, ll>; using vi = vector<int>; using vll = vector<ll>; using pill = pair<int, ll>; using vvi = vector<vi>;  ll get(ll a, ll b) {   ll t;   while ((t = a % b) != 0) {     a = b;     b = t;   }   return b; }  ll fast_exp(ll base, ll n, ll m) {   if (n == 0)     return 1;   ll t = fast_exp(base, n / 2, m);   if (n % 2 == 0)     return (t * t) % m;   else {     return (((t * t) % m) * base) % m;   } }  bool do__Bohjx_fct(int i, ll mask) { return (mask >> i) & 1; }  inline void piylwliqub(ll &mask, int &ans) {   int i = 0;   while (i < 64) {     if (do__Bohjx_fct(i, mask))       ++ans;     ++i;   } }  int solve(ll mask) {   int ans = 0;   piylwliqub(mask, ans);   return ans; }  inline bool ckwtlucmon(int &i, int &ckwtl) {   ckwtl = i - 1;   return true;   return false; }  int do_intotk_fct(ll mask) {   int i = 0;   while (i < 64)     if (do__Bohjx_fct(i++, mask)) {       int ckwtl;       if (ckwtlucmon(i, ckwtl)) {         return ckwtl;       }     }   return -1; }  inline void jzxfqrestk(int &t) {   int j = 1;   while (j <= t) {     ll n, k;     cin >> n >> k;     ll s = 0, i = -1;     while (s < k)       ++i, s += 1ll << i;     ll C = 1ll << i;     ll left = n - s + C;     ll pos = k - s + C;     ll base = left / (s - C + 1);     ll high = left % (s - C + 1);     if (pos <= high)       base += 1;     fout << "Case #" << j << ": " << base / 2 << " " << (base - 1) / 2 << "\n";     ++j;   } }  
int main() {   fout.open("/home/seal12/Downloads/ramdisk/blackbox_3264486_5654742835396608_10_Usenix_RF_1.0_True_MCTS_Classic_True/bennikartefla/ibrahim5253/outer_temp/ibrahim5253/A-small-practice_transformation.out");    ios::sync_with_stdio(false);   int t;   cin >> t;   jzxfqrestk(t);   return 0; }
#include <algorithm> #include <bits/stdc++.h> #include <climits> #include <cmath> #include <cstdio> #include <cstring> #include <iostream> #include <iterator> #include <map> #include <queue> #include <set> #include <stack> #include <stdio.h> #include <string> #include <unordered_map> #include <utility> #include <vector>  using namespace std; 
typedef long long LL;  using ll = long long; using ull = unsigned long long; using pii = pair<int, int>; using pll = pair<ll, ll>; using vi = vector<int>; using vll = vector<ll>; using pill = pair<int, ll>; using vvi = vector<vi>;  inline void zfggxkgtbs(ll &a, ll &mfzl_Var, ll &bbzl_Var) {   a = mfzl_Var;   mfzl_Var = bbzl_Var; }  ll gcd(ll a, ll mfzl_Var) {   ll bbzl_Var;   while ((bbzl_Var = a % mfzl_Var) != 0)     zfggxkgtbs(a, mfzl_Var, bbzl_Var);   return mfzl_Var; }  ll do_llwoj_fct(ll base, ll n, ll m) {   if (n == 0)     return 1;   ll bbzl_Var = do_llwoj_fct(base, n / 2, m);   if (n % 2 == 0)     return (bbzl_Var * bbzl_Var) % m;   else     return (((bbzl_Var * bbzl_Var) % m) * base) % m; }  bool open(int i, ll tc) { return (tc >> i) & 1; }  int do_intbjc_fct(ll tc) {   int ans = 0;   for (int i = 0; i < 64; ++i)     if (open(i, tc))       ++ans;   return ans; }  int first_bit(ll tc) {   int i = 0;   while (i < 64)     if (open(i++, tc))       return i - 1;   return -1; }  inline void ncteildpyd(int &j) {   ll n, k;   scanf("%lld %lld ", &n, &k);   ll ct = 0, i = -1;   while (ct < k)     ++i, ct += 1ll << i;   ll C = 1ll << i;   ll left = n - ct + C;   ll pos = k - ct + C;   ll base = left / (ct - C + 1);   ll high = left % (ct - C + 1);   if (pos <= high)     base += 1;   printf("Case #%d: %lld %lld\n", j, base / 2, (base - 1) / 2); }  
int main() {   freopen("/home/seal12/Downloads/ramdisk/blackbox_3264486_5654742835396608_10_Usenix_RF_1.0_True_MCTS_Classic_True/ccsnoopy/ibrahim5253/A-small-practice.in",           "r", stdin);    freopen("/home/seal12/Downloads/ramdisk/blackbox_3264486_5654742835396608_10_Usenix_RF_1.0_True_MCTS_Classic_True/ccsnoopy/ibrahim5253/outer_temp/ibrahim5253/A-small-practice_transformation.out",           "w", stdout);    int bbzl_Var;   scanf("%d ", &bbzl_Var);   for (int j = 1; j <= bbzl_Var; ++j)     ncteildpyd(j);   return 0; }
#include <algorithm> #include <bits/stdc++.h> #include <climits> #include <cmath> #include <cstdio> #include <cstring> #include <iostream> #include <iterator> #include <map> #include <queue> #include <set> #include <stack> #include <stdio.h> #include <string> #include <unordered_map> #include <utility> #include <vector>   using namespace std; 
using ll = long long; using ull = unsigned long long; using pii = pair<int, int>; using pll = pair<ll, ll>; using vi = vector<int>; using vll = vector<ll>; using pill = pair<int, ll>; using vvi = vector<vi>;  ll do_llvkv_fct(ll a, ll b) {   ll cc;   for (; (cc = a % b) != 0;) {     a = b;     b = cc;   }   return b; }  ll do_llmsq_fct(ll tt, ll dfol_Var, ll m) {   if (dfol_Var == 0)     return 1;   ll cc = do_llmsq_fct(tt, dfol_Var / 2, m);   if (dfol_Var % 2 == 0)     return (cc * cc) % m;   else     return (((cc * cc) % m) * tt) % m; }  bool do__Bozir_fct(int i, ll mask) { return (mask >> i) & 1; }  int do_intihs_fct(ll mask) {   int ans = 0;   for (int i = 0; i < 64; ++i)     if (do__Bozir_fct(i, mask))       ++ans;   return ans; }  int do_intqyr_fct(ll mask) {   int i = 0;   while (i < 64) {     if (do__Bozir_fct(i++, mask))       return i - 1;   }   return -1; }  
int main() {   freopen("/home/seal12/Downloads/ramdisk/blackbox_3264486_5654742835396608_11_Usenix_RF_1.0_True_MCTS_Classic_True/fragusbot/ibrahim5253/outer_temp/ibrahim5253/A-small-practice_transformation.out",           "w", stdout);    freopen("/home/seal12/Downloads/ramdisk/blackbox_3264486_5654742835396608_11_Usenix_RF_1.0_True_MCTS_Classic_True/fragusbot/ibrahim5253/A-small-practice.in",           "r", stdin);    int ret_val = 0;    int cc;   scanf("%d ", &cc);   for (int j = 1; j <= cc; ++j) {     ll dfol_Var, k;     scanf("%lld %lld ", &dfol_Var, &k);     ll s = 0, i = -1;     while (s < k)       ++i, s += 1ll << i;     ll C = 1ll << i;     ll left = dfol_Var - s + C;     ll pos = k - s + C;     ll tt = left / (s - C + 1);     ll high = left % (s - C + 1);     if (pos <= high)       tt += 1;     printf("Case #%d: %lld %lld\n", j, tt / 2, (tt - 1) / 2);   }   return ret_val; }
#include <algorithm> #include <bits/stdc++.h> #include <bitset> #include <cassert> #include <cctype> #include <climits> #include <cmath> #include <complex> #include <cstdio> #include <cstring> #include <ctime> #include <fstream> #include <functional> #include <iostream> #include <iterator> #include <list> #include <map> #include <math.h> #include <numeric> #include <queue> #include <set> #include <stack> #include <stdio.h> #include <stdlib.h> #include <string> #include <unordered_map> #include <utility> #include <vector>   using namespace std; 
const int INF = 1000000000; const double EPS = 1e-9; ofstream fout;  ifstream fin;  using ll = long long; using ull = unsigned long long; using pii = pair<int, int>; using pll = pair<ll, ll>; using vi = vector<int>; using vll = vector<ll>; using pill = pair<int, ll>; using vvi = vector<vi>;  inline void yjdqwzwipy(ll &a, ll &b, ll &t) {   a = b;   b = t; }  ll fast_exp(ll q, ll n, ll m) {   if (n == 0)     return 1;   ll t = fast_exp(q, n / 2, m);   if (n % 2 == 0)     return (t * t) % m;   else     return (((t * t) % m) * q) % m; }  bool is_set(int i, ll mask) { return (mask >> i) & 1; }  int get(ll mask) {   int ans = 0;   for (int i = 0; i < 64; ++i)     if (is_set(i, mask))       ++ans;   return ans; }  inline bool glcxbdrhlw(ll &mask, int &i, int &glcxb) {   if (is_set(i++, mask))     glcxb = i - 1;   return true;   return false; }  inline bool uejdynhmsk(int &glcxb, int &uejdy) {   uejdy = glcxb;   return true;   return false; }  inline bool wwagfttrey(int &uejdy, int &wwagf) {   wwagf = uejdy;   return true;   return false; }  int first_bit(ll mask) {   int i = 0;   while (i < 64) {     int glcxb;     if (glcxbdrhlw(mask, i, glcxb)) {       int uejdy;       if (uejdynhmsk(glcxb, uejdy)) {         int wwagf;         if (wwagfttrey(uejdy, wwagf)) {           return wwagf;         }       }     }   }   return -1; }  inline void lgrdwywhps(int &j) {   ll n, r;   fin >> n >> r;   ll s = 0, i = -1;   while (s < r)     ++i, s += 1ll << i;   ll C = 1ll << i;   ll left = n - s + C;   ll pos = r - s + C;   ll q = left / (s - C + 1);   ll high = left % (s - C + 1);   if (pos <= high)     q += 1;   fout << "Case #" << j << ": " << q / 2 << " " << (q - 1) / 2 << "\n"; }  
int main() {   fout.open("/home/seal12/Downloads/ramdisk/blackbox_3264486_5654742835396608_11_Usenix_RF_1.0_True_MCTS_Classic_True/gultai4ukr/ibrahim5253/outer_temp/ibrahim5253/A-small-practice_transformation.out");    fin.open("/home/seal12/Downloads/ramdisk/blackbox_3264486_5654742835396608_11_Usenix_RF_1.0_True_MCTS_Classic_True/gultai4ukr/ibrahim5253/A-small-practice.in");    int t;   fin >> t;   for (int j = 1; j <= t; ++j)     lgrdwywhps(j);   return 0; }
#include <algorithm> #include <cassert> #include <climits> #include <cmath> #include <complex> #include <cstdio> #include <cstring> #include <ctime> #include <deque> #include <fstream> #include <functional> #include <iomanip> #include <iostream> #include <iterator> #include <map> #include <numeric> #include <queue> #include <set> #include <sstream> #include <stack> #include <stdio.h> #include <stdlib.h> #include <string> #include <unordered_map> #include <utility> #include <vector> using namespace std; 
const double EPS = 1e-9; const int INF = 1000000000; const double eps = 1e-9;  inline void dltmwlwqmm(priority_queue<int> &q) {   int get = q.top();   q.pop();   q.push(get / 2);   q.push((get - 1) / 2); }  inline void xtwgonfahs(priority_queue<int> &q) { dltmwlwqmm(q); }  
int main(void) {   ios::sync_with_stdio(false);    int t;   cin >> t;   for (int tt = 1; tt <= t; tt++) {      int n, k;     priority_queue<int> q;     cin >> n >> k;     q.push(n);     while (--k)       xtwgonfahs(q);      int v = q.top();     cout << "Case #" << tt << ": " << v / 2 << " " << (v - 1) / 2 << "\n";   }   return 0; }  
#include <cassert> #include <cctype> #include <climits> #include <cmath> #include <complex> #include <cstdio> #include <cstdlib> #include <cstring> #include <ctime> #include <deque> #include <fstream> #include <functional> #include <iomanip> #include <iostream> #include <iterator> #include <list> #include <map> #include <math.h> #include <numeric> #include <queue> #include <set> #include <sstream> #include <stack> #include <stdio.h> #include <stdlib.h> #include <string> #include <unordered_map> #include <utility> #include <vector> using namespace std; 
const int MAXN = 1005; typedef long long ll; typedef pair<int, int> ii; typedef pair<int, int> pii; typedef unsigned long long ull; typedef vector<int> vi;  priority_queue<int> Q, E; int n, k;  inline void iwhujnrbdi(int &x, int &y, int &z) {   int i = 0;   while (i < k) {     x = Q.top();     Q.pop();     y = x / 2;     z = (x - 1) / 2;     Q.push(y);     Q.push(z);     i++;   } }  
int main() {   ios::sync_with_stdio(false);    int t, x, y, z;   cin >> t;   for (int c = 0; c < t; c++) {     cin >> n >> k;     Q = E;     Q.push(n);     iwhujnrbdi(x, y, z);     printf("Case #%d: %d %d\n", c + 1, y, z);   }   return 0; }
#include <algorithm> #include <climits> #include <cmath> #include <cstdio> #include <cstring> #include <iostream> #include <iterator> #include <map> #include <queue> #include <set> #include <stack> #include <stdio.h> #include <string> #include <unordered_map> #include <utility> #include <vector>   using namespace std; 
using ll = long long; using ull = unsigned long long; using pii = pair<int, int>; using pll = pair<ll, ll>; using vi = vector<int>; using vll = vector<ll>; using pill = pair<int, ll>; using vvi = vector<vi>;  inline void fygmwbzbpm(ll &vcul_Var, ll &b, ll &t) {   vcul_Var = b;   b = t; }  ll do_lloff_fct(ll vcul_Var, ll b) {   ll t;   while ((t = vcul_Var % b) != 0)     fygmwbzbpm(vcul_Var, b, t);   return b; }  bool do__Bocux_fct(int nzdi_Var, ll jwel_Var) {   return (jwel_Var >> nzdi_Var) & 1; }  int do_inttsv_fct(ll jwel_Var) {   int ans = 0;   {     int nzdi_Var = 0;     while (nzdi_Var < 64) {       if (do__Bocux_fct(nzdi_Var, jwel_Var))         ++ans;       ++nzdi_Var;     }   }   return ans; }  int do_intoay_fct(ll jwel_Var) {   int nzdi_Var = 0;   while (nzdi_Var < 64)     if (do__Bocux_fct(nzdi_Var++, jwel_Var))       return nzdi_Var - 1;   return -1; } 
int main() {    int t;   scanf("%d ", &t);   for (int uhbi_Var = 1; uhbi_Var <= t; ++uhbi_Var) {     ll n, k;     scanf("%lld %lld ", &n, &k);     ll s = 0, nzdi_Var = -1;     while (s < k)       ++nzdi_Var, s += 1ll << nzdi_Var;     ll C = 1ll << nzdi_Var;     ll left = n - s + C;     ll pos = k - s + C;     ll wffl_Var = left / (s - C + 1);     ll high = left % (s - C + 1);     if (pos <= high)       wffl_Var += 1;     printf("Case #%d: %lld %lld\n", uhbi_Var, wffl_Var / 2, (wffl_Var - 1) / 2);   }   return 0; }
#include <algorithm> #include <bits/stdc++.h> #include <climits> #include <cmath> #include <cstdio> #include <cstring> #include <iostream> #include <iterator> #include <map> #include <queue> #include <set> #include <stack> #include <stdio.h> #include <string> #include <unordered_map> #include <utility> #include <vector>   using namespace std; 
using ll = long long; using ull = unsigned long long; using pii = pair<int, int>; using pll = pair<ll, ll>; using vi = vector<int>; using vll = vector<ll>; using pill = pair<int, ll>; using vvi = vector<vi>;  bool is_set(int i, ll r) { return (r >> i) & 1; }  int count_bits(ll r) {   int ans = 0;   int i;   for (i = 0; i < 64; ++i)     if (is_set(i, r)) {       ++ans;     }   return ans; }  
int main() {   freopen("/home/seal12/Downloads/ramdisk/blackbox_3264486_5654742835396608_11_Usenix_RF_1.0_True_MCTS_Classic_True/jiian/ibrahim5253/A-small-practice.in",           "r", stdin);    freopen("/home/seal12/Downloads/ramdisk/blackbox_3264486_5654742835396608_11_Usenix_RF_1.0_True_MCTS_Classic_True/jiian/ibrahim5253/outer_temp/ibrahim5253/A-small-practice_transformation.out",           "w", stdout);    int miml_Var;   cin >> miml_Var;   int j;   {     j = 1;     while (j <= miml_Var) {       ll n, qdml_Var;       cin >> n >> qdml_Var;       ll s = 0, i = -1;       while (s < qdml_Var)         ++i, s += 1ll << i;       ll C = 1ll << i;       ll left = n - s + C;       ll pos = qdml_Var - s + C;       ll base = left / (s - C + 1);       ll high = left % (s - C + 1);       if (pos <= high)         base += 1;       printf("Case #%d: %lld %lld\n", j, base / 2, (base - 1) / 2);       ++j;     }   }   return 0; }
#include <algorithm> #include <bits/stdc++.h> #include <bitset> #include <cassert> #include <cctype> #include <climits> #include <cmath> #include <complex> #include <cstdio> #include <cstdlib> #include <cstring> #include <ctime> #include <deque> #include <fstream> #include <functional> #include <iomanip> #include <iostream> #include <iterator> #include <list> #include <map> #include <math.h> #include <numeric> #include <queue> #include <set> #include <sstream> #include <stack> #include <stdio.h> #include <stdlib.h> #include <string> #include <unordered_map> #include <utility> #include <vector>   using namespace std; 
ifstream fin;  const int INF = 1000000000; using ll = long long; using ull = unsigned long long; using pii = pair<int, int>; using pll = pair<ll, ll>; using vi = vector<int>; using vll = vector<ll>; using pill = pair<int, ll>; using vvi = vector<vi>;  ll do_llbiz_fct(ll a, ll b) {   ll t;   for (; (t = a % b) != 0;) {     a = b;     b = t;   }   return b; }  ll fast_exp(ll base, ll n, ll m) {   if (n == 0)     return 1;   ll t = fast_exp(base, n / 2, m);   if (n % 2 == 0)     return (t * t) % m;   else     return (((t * t) % m) * base) % m; }  bool do__Boceo_fct(int i, ll mask) { return (mask >> i) & 1; }  int solve(ll mask) {   int ans = 0;   for (int i = 0; i < 64; ++i)     if (do__Boceo_fct(i, mask))       ++ans;   return ans; }  int get(ll mask) {   int ret_val = -1;   int i = 0;   while (i < 64)     if (do__Boceo_fct(i++, mask))       return i - 1;   return ret_val; }  inline void umqcztdene(int &j) {   ll n, k;   fin >> n >> k;   ll s = 0, i = -1;   while (s < k)     ++i, s += 1ll << i;   ll C = 1ll << i;   ll left = n - s + C;   ll pos = k - s + C;   ll base = left / (s - C + 1);   ll high = left % (s - C + 1);   if (pos <= high)     base += 1;   printf("Case #%d: %lld %lld\n", j, base / 2, (base - 1) / 2); } 
int main() {   fin.open("/home/seal12/Downloads/ramdisk/blackbox_3264486_5654742835396608_10_Usenix_RF_1.0_True_MCTS_Classic_True/kuzphi/ibrahim5253/A-small-practice.in");    int ret_val = 0;    int t;   fin >> t;   for (int j = 1; j <= t; ++j)     umqcztdene(j);   return ret_val; }
#include <algorithm> #include <climits> #include <cmath> #include <complex> #include <cstdio> #include <cstdlib> #include <cstring> #include <fstream> #include <functional> #include <iostream> #include <iterator> #include <list> #include <map> #include <math.h> #include <queue> #include <set> #include <sstream> #include <stack> #include <stdio.h> #include <stdlib.h> #include <string> #include <unordered_map> #include <utility> #include <vector>   using namespace std; 
const int mod = 1000000007; const int INF = 1000000000; const double eps = 1e-9; const int MOD = 1000000007; typedef set<int> si; typedef long long LL; typedef pair<int, int> ii; typedef vector<int> VI; typedef long double LD;  using ll = long long; using ull = unsigned long long; using pii = pair<int, int>; using pll = pair<ll, ll>; using vi = vector<int>; using vll = vector<ll>; using pill = pair<int, ll>; using vvi = vector<vi>;  bool is_set(int i, ll mask) { return (mask >> i) & 1; }  int count_bits(ll mask) {   int ans = 0;   for (int i = 0; i < 64; ++i)     if (is_set(i, mask))       ++ans;   return ans; }  int first_bit(ll mask) {   int i = 0;   while (i < 64)     if (is_set(i++, mask))       return i - 1;   return -1; }  
int main() {   int ret_val = 0;   freopen("/home/seal12/Downloads/ramdisk/blackbox_3264486_5654742835396608_11_Usenix_RF_1.0_True_MCTS_Classic_True/lazyBit/ibrahim5253/A-small-practice.in",           "r", stdin);   int t;   scanf("%d ", &t);   {     int j = 1;     for (; j <= t;) {       ll n, k;       scanf("%lld %lld ", &n, &k);       ll s = 0, i = -1;       while (s < k)         ++i, s += 1ll << i;       ll C = 1ll << i;       ll left = n - s + C;       ll pos = k - s + C;       ll y = left / (s - C + 1);       ll high = left % (s - C + 1);       if (pos <= high)         y += 1;       printf("Case #%d: %lld %lld\n", j, y / 2, (y - 1) / 2);       ++j;     }   }   return ret_val; }
#include <algorithm> #include <bits/stdc++.h> #include <bitset> #include <cassert> #include <cctype> #include <climits> #include <cmath> #include <complex> #include <cstdio> #include <cstring> #include <ctime> #include <deque> #include <fstream> #include <functional> #include <iomanip> #include <iostream> #include <iterator> #include <list> #include <map> #include <numeric> #include <queue> #include <set> #include <sstream> #include <stack> #include <stdio.h> #include <stdlib.h> #include <string> #include <unordered_map> #include <utility> #include <vector>   using namespace std; 
const int INF = 1000000000;  typedef long long LL; typedef pair<int, int> ii; typedef long double LD;  using ll = long long; using ull = unsigned long long; using pii = pair<int, int>; using pll = pair<ll, ll>; using vi = vector<int>; using vll = vector<ll>; using pill = pair<int, ll>; using vvi = vector<vi>;  ll do_llnke_fct(ll a, ll b) {   ll t;   for (; (t = a % b) != 0;) {     a = b;     b = t;   }   return b; }  ll do_llzyo_fct(ll v, ll n, ll m) {   if (n == 0) {     return 1;   }   ll t = do_llzyo_fct(v, n / 2, m);   if (n % 2 == 0)     return (t * t) % m;   else     return (((t * t) % m) * v) % m; }  bool get(int i, ll mask) { return (mask >> i) & 1; }  int do_intjkd_fct(ll mask) {   int i = 0;   while (i < 64)     if (get(i++, mask))       return i - 1;   return -1; }  
int main() {   ios::sync_with_stdio(false);   int t;   cin >> t;   for (int j = 1; j <= t; ++j) {     ll n, p;     cin >> n >> p;     ll s = 0, i = -1;     while (s < p)       ++i, s += 1ll << i;     ll C = 1ll << i;     ll left = n - s + C;     ll pos = p - s + C;     ll v = left / (s - C + 1);     ll high = left % (s - C + 1);     if (pos <= high)       v += 1;     cout << "Case #" << j << ": " << v / 2 << " " << (v - 1) / 2 << "\n";   }   return 0; }
#include <algorithm> #include <bits/stdc++.h> #include <bitset> #include <cassert> #include <cctype> #include <climits> #include <cmath> #include <cstdio> #include <cstring> #include <deque> #include <fstream> #include <iostream> #include <iterator> #include <list> #include <map> #include <queue> #include <set> #include <sstream> #include <stack> #include <stdlib.h> #include <string> #include <unordered_map> #include <utility> #include <vector>   using namespace std; 
const int MOD = 1000000007; const double eps = 1e-9;  typedef vector<int> VI; typedef long double LD; typedef set<int> si;  using ll = long long; using ull = unsigned long long; using pii = pair<int, int>; using pll = pair<ll, ll>; using vi = vector<int>; using vll = vector<ll>; using pill = pair<int, ll>; using vvi = vector<vi>;  bool is_set(int i, ll mask) { return (mask >> i) & 1; }  inline void hdjzpmaypz(int &j) {   ll n, k;   cin >> n >> k;   ll s = 0, i = -1;   while (s < k)     ++i, s += 1ll << i;   ll C = 1ll << i;   ll left = n - s + C;   ll pos = k - s + C;   ll base = left / (s - C + 1);   ll high = left % (s - C + 1);   if (pos <= high)     base += 1;   cout << "Case #" << j << ": " << base / 2 << " " << (base - 1) / 2 << "\n"; }  
int main() {   ios::sync_with_stdio(false);   int t;   cin >> t;   for (int j = 1; j <= t; ++j) {     hdjzpmaypz(j);   }   return 0; }
#include <algorithm> #include <bits/stdc++.h> #include <bitset> #include <cassert> #include <cctype> #include <climits> #include <cmath> #include <complex> #include <cstdio> #include <cstring> #include <ctime> #include <fstream> #include <functional> #include <iomanip> #include <iostream> #include <iterator> #include <list> #include <map> #include <math.h> #include <numeric> #include <queue> #include <set> #include <stack> #include <stdio.h> #include <stdlib.h> #include <string> #include <unordered_map> #include <utility> #include <vector>    using namespace std; 
typedef long double ld; typedef pair<int, int> PII; typedef long double LD; typedef set<int> si;  ifstream fin;  ofstream fout;  using ll = long long; using ull = unsigned long long; using pii = pair<int, int>; using pll = pair<ll, ll>; using vi = vector<int>; using vll = vector<ll>; using pill = pair<int, ll>; using vvi = vector<vi>;  inline void zbublblpme(ll &a, ll &b, ll &t) {   a = b;   b = t; }  ll gcd(ll a, ll b) {   ll t;   while ((t = a % b) != 0)     zbublblpme(a, b, t);   return b; }  ll solve(ll base, ll n, ll m) {   if (n == 0)     return 1;   ll t = solve(base, n / 2, m);   if (n % 2 == 0)     return (t * t) % m;   else     return (((t * t) % m) * base) % m; }  bool is_set(int i, ll mask) { return (mask >> i) & 1; }  inline void rayyqmqasx(ll &mask, int &ans, int &i) {   if (is_set(i, mask))     ++ans;   ++i; }  int count_bits(ll mask) {   int ans = 0;   {     int i;     for (i = 0; i < 64;)       rayyqmqasx(mask, ans, i);   }   return ans; }  int first_bit(ll mask) {   int i = 0;   while (i < 64)     if (is_set(i++, mask))       return i - 1;   return -1; }  
int main() {   fin.open("/home/seal12/Downloads/ramdisk/blackbox_3264486_5654742835396608_10_Usenix_RF_1.0_True_MCTS_Classic_True/sammyMaX/ibrahim5253/A-small-practice.in");    fout.open("/home/seal12/Downloads/ramdisk/blackbox_3264486_5654742835396608_10_Usenix_RF_1.0_True_MCTS_Classic_True/sammyMaX/ibrahim5253/outer_temp/ibrahim5253/A-small-practice_transformation.out");    int ret_val = 0;    int t;   fin >> t;   for (int j = 1; j <= t; ++j) {     ll n, tc;     fin >> n >> tc;     ll s = 0, i = -1;     while (s < tc)       ++i, s += 1ll << i;     ll C = 1ll << i;     ll left = n - s + C;     ll pos = tc - s + C;     ll base = left / (s - C + 1);     ll high = left % (s - C + 1);     if (pos <= high)       base += 1;     fout << "Case #" << j << ": " << base / 2 << " " << (base - 1) / 2 << "\n";   }   return ret_val; }
#include <algorithm> #include <bitset> #include <climits> #include <cmath> #include <cstdio> #include <cstring> #include <ctime> #include <iostream> #include <iterator> #include <map> #include <queue> #include <set> #include <stack> #include <stdio.h> #include <string> #include <unordered_map> #include <utility> #include <vector>   using namespace std; 
using ll = long long; using ull = unsigned long long; using pii = pair<int, int>; using pll = pair<ll, ll>; using vi = vector<int>; using vll = vector<ll>; using pill = pair<int, ll>; using vvi = vector<vi>;  ll gcd(ll a, ll b) {   ll t;   for (; (t = a % b) != 0;) {     a = b;     b = t;   }   return b; }  ll solve(ll base, ll right_bound, ll m) {   if (right_bound == 0)     return 1;   ll t = solve(base, right_bound / 2, m);   if (right_bound % 2 == 0)     return (t * t) % m;   else     return (((t * t) % m) * base) % m; }  bool readData(int i, ll argv) { return (argv >> i) & 1; }  int do_intyjy_fct(ll argv) {   int test = 0;   for (int i = 0; i < 64; ++i)     if (readData(i, argv)) {       ++test;     }   return test; }  int first_bit(ll argv) {   int ret_val = -1;   int i = 0;   while (i < 64)     if (readData(i++, argv))       return i - 1;   return ret_val; }  
int main() {   freopen("/home/seal12/Downloads/ramdisk/blackbox_3264486_5654742835396608_11_Usenix_RF_1.0_True_MCTS_Classic_True/sdya/ibrahim5253/A-small-practice.in",           "r", stdin);    freopen("/home/seal12/Downloads/ramdisk/blackbox_3264486_5654742835396608_11_Usenix_RF_1.0_True_MCTS_Classic_True/sdya/ibrahim5253/outer_temp/ibrahim5253/A-small-practice_transformation.out",           "w", stdout);    int t;   cin >> t;   for (int j = 1; j <= t; ++j) {     ll right_bound, k;     cin >> right_bound >> k;     ll s = 0, i = -1;     while (s < k)       ++i, s += 1ll << i;     ll C = 1ll << i;     ll left = right_bound - s + C;     ll pos = k - s + C;     ll base = left / (s - C + 1);     ll high = left % (s - C + 1);     if (pos <= high) {       base += 1;     }     printf("Case #%d: %lld %lld\n", j, base / 2, (base - 1) / 2);   }   return 0; }
#include <algorithm> #include <bitset> #include <cassert> #include <cctype> #include <climits> #include <cmath> #include <complex> #include <cstdio> #include <cstring> #include <ctime> #include <deque> #include <functional> #include <iomanip> #include <iostream> #include <iterator> #include <list> #include <map> #include <math.h> #include <numeric> #include <queue> #include <set> #include <sstream> #include <stack> #include <stdio.h> #include <string> #include <unordered_map> #include <utility> #include <vector>   using namespace std; 
const long double PI = 3.1415926535897932384626433832795; const double eps = 1e-9; typedef long double LD; typedef pair<int, int> ii; typedef pair<int, int> PII; typedef vector<int> VI; typedef set<int> si;  using ll = long long; using ull = unsigned long long; using pii = pair<int, int>; using pll = pair<ll, ll>; using vi = vector<int>; using vll = vector<ll>; using pill = pair<int, ll>; using vvi = vector<vi>;  inline void mfbsyndidq(ll &a, ll &b, ll &t) {   a = b;   b = t; }  ll gcd(ll a, ll b) {   ll t;   while ((t = a % b) != 0)     mfbsyndidq(a, b, t);   return b; }  ll fast_exp(ll base, ll n, ll m) {   if (n == 0)     return 1;   ll t = fast_exp(base, n / 2, m);   if (n % 2 == 0)     return (t * t) % m;   else     return (((t * t) % m) * base) % m; }  bool is_set(int i, ll q) { return (q >> i) & 1; }  int count_bits(ll q) {   int ans = 0;   for (int i = 0; i < 64; ++i)     if (is_set(i, q)) {       ++ans;     }   return ans; }  int first_bit(ll q) {   int i = 0;   while (i < 64) {     if (is_set(i++, q))       return i - 1;   }   return -1; }  inline void yyfisdspnk(int &j) {   ll n, tc;   cin >> n >> tc;   ll s = 0, i = -1;   while (s < tc) {     ++i, s += 1ll << i;   }   ll C = 1ll << i;   ll left = n - s + C;   ll pos = tc - s + C;   ll base = left / (s - C + 1);   ll high = left % (s - C + 1);   if (pos <= high)     base += 1;   printf("Case #%d: %lld %lld\n", j, base / 2, (base - 1) / 2); }  
int main() {   freopen("/home/seal12/Downloads/ramdisk/blackbox_3264486_5654742835396608_10_Usenix_RF_1.0_True_MCTS_Classic_True/Tashi711/ibrahim5253/A-small-practice.in",           "r", stdin);    freopen("/home/seal12/Downloads/ramdisk/blackbox_3264486_5654742835396608_10_Usenix_RF_1.0_True_MCTS_Classic_True/Tashi711/ibrahim5253/outer_temp/ibrahim5253/A-small-practice_transformation.out",           "w", stdout);    int t;   cin >> t;   for (int j = 1; j <= t; ++j)     yyfisdspnk(j);   return 0; }
#include <algorithm> #include <bitset> #include <cassert> #include <cctype> #include <climits> #include <cmath> #include <complex> #include <cstdio> #include <cstring> #include <functional> #include <iomanip> #include <iostream> #include <iterator> #include <list> #include <map> #include <numeric> #include <queue> #include <set> #include <sstream> #include <stack> #include <stdio.h> #include <string> #include <unordered_map> #include <utility> #include <vector>   using namespace std; 
const int MOD = 1000000007;  using ll = long long; using ull = unsigned long long; using pii = pair<int, int>; using pll = pair<ll, ll>; using vi = vector<int>; using vll = vector<ll>; using pill = pair<int, ll>; using vvi = vector<vi>;  inline void bstlxkogsy(ll &a, ll &b, ll &t) {   a = b;   b = t; }  ll solve(ll a, ll b) {   ll t;   for (; (t = a % b) != 0;)     bstlxkogsy(a, b, t);   return b; }  ll fast_exp(ll tc, ll n, ll p) {   if (n == 0)     return 1;   ll t = fast_exp(tc, n / 2, p);   if (n % 2 == 0)     return (t * t) % p;   else     return (((t * t) % p) * tc) % p; }  bool is_set(int i, ll v) { return (v >> i) & 1; }  int count_bits(ll v) {   int ans = 0;   for (int i = 0; i < 64; ++i)     if (is_set(i, v))       ++ans;   return ans; }  int first_bit(ll v) {   int ret_val = -1;   int i = 0;   while (i < 64)     if (is_set(i++, v))       return i - 1;   return ret_val; }  inline void gfjihtxcad(int &j) {   ll n, r;   cin >> n >> r;   ll s = 0, i = -1;   while (s < r)     ++i, s += 1ll << i;   ll C = 1ll << i;   ll left = n - s + C;   ll pos = r - s + C;   ll tc = left / (s - C + 1);   ll high = left % (s - C + 1);   if (pos <= high)     tc += 1;   printf("Case #%d: %lld %lld\n", j, tc / 2, (tc - 1) / 2); }  
int main() {    int t;   cin >> t;   int j;   for (j = 1; j <= t; ++j)     gfjihtxcad(j);   return 0; }
#include <algorithm> #include <bitset> #include <cassert> #include <climits> #include <cmath> #include <complex> #include <cstdio> #include <cstring> #include <deque> #include <iomanip> #include <iostream> #include <iterator> #include <map> #include <numeric> #include <queue> #include <set> #include <sstream> #include <stack> #include <stdio.h> #include <stdlib.h> #include <string> #include <unordered_map> #include <utility> #include <vector>    using namespace std; 
typedef long double ld; typedef pair<int, int> ii; typedef pair<int, int> PII; typedef vector<int> VI; typedef long double LD; typedef set<int> si;  using ll = long long; using ull = unsigned long long; using pii = pair<int, int>; using pll = pair<ll, ll>; using vi = vector<int>; using vll = vector<ll>; using pill = pair<int, ll>; using vvi = vector<vi>;  inline void eskjyctqbh(ll &a, ll &b, ll &t) {   a = b;   b = t; }  ll gcd(ll a, ll b) {   ll t;   while ((t = a % b) != 0)     eskjyctqbh(a, b, t);   return b; }  ll fast_exp(ll base, ll n, ll m) {   if (n == 0)     return 1;   ll t = fast_exp(base, n / 2, m);   if (n % 2 == 0)     return (t * t) % m;   else     return (((t * t) % m) * base) % m; }  bool is_set(int i, ll mask) { return (mask >> i) & 1; }  inline void hprkcolgvm(ll &mask, int &ans, int &i) {   if (is_set(i, mask))     ++ans;   ++i; }  inline void fndevqqczd(ll &mask, int &ans, int &i) {   i = 0;   while (i < 64)     hprkcolgvm(mask, ans, i); }  int count_bits(ll mask) {   int ans = 0;   int i;   fndevqqczd(mask, ans, i);   return ans; }  int get(ll mask) {   int i = 0;   while (i < 64)     if (is_set(i++, mask))       return i - 1;   return -1; }  inline void vjksqcdpvf(int &j) {   ll n, k;   scanf("%lld %lld ", &n, &k);   ll s = 0, i = -1;   while (s < k)     ++i, s += 1ll << i;   ll C = 1ll << i;   ll left = n - s + C;   ll pos = k - s + C;   ll base = left / (s - C + 1);   ll high = left % (s - C + 1);   if (pos <= high)     base += 1;   cout << "Case #" << j << ": " << base / 2 << " " << (base - 1) / 2 << "\n"; }  
int main() {   freopen("/home/seal12/Downloads/ramdisk/blackbox_3264486_5654742835396608_10_Usenix_RF_1.0_True_MCTS_Classic_True/try/ibrahim5253/A-small-practice.in",           "r", stdin);    freopen("/home/seal12/Downloads/ramdisk/blackbox_3264486_5654742835396608_10_Usenix_RF_1.0_True_MCTS_Classic_True/try/ibrahim5253/outer_temp/ibrahim5253/A-small-practice_transformation.out",           "w", stdout);    int t;   scanf("%d ", &t);   int j;   {     j = 1;     for (; j <= t;) {       vjksqcdpvf(j);       ++j;     }   }   return 0; }
#include <algorithm> #include <bitset> #include <cctype> #include <climits> #include <cmath> #include <cstdio> #include <cstring> #include <deque> #include <fstream> #include <functional> #include <iomanip> #include <iostream> #include <iterator> #include <map> #include <math.h> #include <queue> #include <set> #include <sstream> #include <stack> #include <stdlib.h> #include <string> #include <unordered_map> #include <utility> #include <vector>   using namespace std; 
const int mod = 1000000007; ofstream fout;  typedef long long LL; typedef vector<int> VI;  using ll = long long; using ull = unsigned long long; using pii = pair<int, int>; using pll = pair<ll, ll>; using vi = vector<int>; using vll = vector<ll>; using pill = pair<int, ll>; using vvi = vector<vi>;  ll gcd(ll a, ll b) {   ll t;   while ((t = a % b) != 0) {     a = b;     b = t;   }   return b; }  ll get(ll r, ll n, ll m) {   if (n == 0)     return 1;   ll t = get(r, n / 2, m);   if (n % 2 == 0)     return (t * t) % m;   else     return (((t * t) % m) * r) % m; }  bool is_set(int i, ll tc) { return (tc >> i) & 1; }  int solve(ll tc) {   int ans = 0;   for (int i = 0; i < 64; ++i) {     if (is_set(i, tc))       ++ans;   }   return ans; }  int first_bit(ll tc) {   int ret_val = -1;   int i = 0;   while (i < 64) {     if (is_set(i++, tc))       return i - 1;   }   return ret_val; }  
int main() {   fout.open("/home/seal12/Downloads/ramdisk/blackbox_3264486_5654742835396608_10_Usenix_RF_1.0_True_MCTS_Classic_True/WCG/ibrahim5253/outer_temp/ibrahim5253/A-small-practice_transformation.out");    int t;   cin >> t;   {     int j = 1;     while (j <= t) {       ll n, k;       cin >> n >> k;       ll s = 0, i = -1;       while (s < k)         ++i, s += 1ll << i;       ll C = 1ll << i;       ll left = n - s + C;       ll pos = k - s + C;       ll r = left / (s - C + 1);       ll high = left % (s - C + 1);       if (pos <= high) {         r += 1;       }       fout << "Case #" << j << ": " << r / 2 << " " << (r - 1) / 2 << "\n";       ++j;     }   }   return 0; }
#include <algorithm> #include <climits> #include <cmath> #include <cstdio> #include <cstring> #include <iostream> #include <iterator> #include <map> #include <queue> #include <set> #include <stack> #include <stdio.h> #include <string> #include <unordered_map> #include <utility> #include <vector>   using namespace std;  
using ll = long long; using ull = unsigned long long; using pii = pair<int, int>; using pll = pair<ll, ll>; using vi = vector<int>; using vll = vector<ll>; using pill = pair<int, ll>; using vvi = vector<vi>;  ll fast_exp(ll base, ll n, ll m) {   if (n == 0)     return 1;   ll t = fast_exp(base, n / 2, m);   if (n % 2 == 0)     return (t * t) % m;   else     return (((t * t) % m) * base) % m; }  inline void oszgsixvdv(int &f, int &j, int &k, std::string &s) {   ++f;   for (int l = j; l < j + k; ++l)     s[l] = (s[l] == '+' ? '-' : '+'); }  inline void jgdffqpzmb(int &f, int &j, int &k, std::string &s) {   if (s[j] == '-')     oszgsixvdv(f, j, k, s); }  
int main() {    int t;   scanf("%d ", &t);   {     int i = 1;     for (; i <= t;) {       string s;       int k;       cin >> s >> k;       int f = 0, n = s.length();       for (int j = 0; j < n - k + 1; ++j)         jgdffqpzmb(f, j, k, s);       int j;       for (j = 0; j < n; ++j)         if (s[j] == '-') {           f = -1;           break;         }       cout << "Case #" << i << ": ";       if (f == -1)         cout << "IMPOSSIBLE\n";       else         cout << f << "\n";       ++i;     }   }   return 0; }
#include <bits/stdc++.h> #include <iomanip> #include <iostream> using namespace std; 
typedef double dbl; typedef long long LL;  
int main() {   int ret_val = 0;    int t, cas = 0;   cin >> t;   while (t--) {     string s;     int k, ans = 0;     cin >> s >> k;     for (int i = 0; i + k <= s.size(); i++) {       if (s[i] == '-') {         for (int j = 0; j < k; j++)           s[i + j] = s[i + j] == '-' ? '+' : '-';         ans++;       }     }     cout << "Case #" << ++cas << ": ";     if (s == string(s.size(), '+'))       cout << ans << "\n";     else       puts("IMPOSSIBLE");   }   return ret_val; }
#include <algorithm> #include <bits/stdc++.h> #include <bitset> #include <cassert> #include <cctype> #include <climits> #include <cmath> #include <complex> #include <cstdio> #include <cstring> #include <ctime> #include <deque> #include <fstream> #include <iomanip> #include <iostream> #include <iterator> #include <list> #include <map> #include <math.h> #include <numeric> #include <queue> #include <set> #include <stack> #include <stdio.h> #include <stdlib.h> #include <string> #include <unordered_map> #include <utility> #include <vector>   using namespace std; 
ofstream fout;  typedef set<int> si; typedef long double ld; typedef long long LL; typedef pair<int, int> PII;  using ll = long long; using ull = unsigned long long; using pii = pair<int, int>; using pll = pair<ll, ll>; using vi = vector<int>; using vll = vector<ll>; using pill = pair<int, ll>; using vvi = vector<vi>;  ll gcd(ll a, ll b) {   ll t;   while ((t = a % b) != 0) {     a = b;     b = t;   }   return b; }  ll fast_exp(ll y, ll n, ll q) {   if (n == 0)     return 1;   ll t = fast_exp(y, n / 2, q);   if (n % 2 == 0)     return (t * t) % q;   else     return (((t * t) % q) * y) % q; }  bool solve(int i, ll mask) { return (mask >> i) & 1; }  int count_bits(ll mask) {   int ans = 0;   for (int i = 0; i < 64; ++i)     if (solve(i, mask))       ++ans;   return ans; }  
int main() {   fout.open("/home/seal12/Downloads/ramdisk/blackbox_3264486_5736519012712448_10_Usenix_RF_1.0_True_MCTS_Classic_True/bennikartefla/ibrahim5253/outer_temp/ibrahim5253/A-small-practice_transformation.out");    ios::sync_with_stdio(false);   int t;   cin >> t;   for (int i = 1; i <= t; ++i) {     char s[1000];     int p;     cin >> s >> p;     int f = 0, n = strlen(s);     for (int j = 0; j < n - p + 1; ++j) {       if (s[j] == '-') {         ++f;         {           int l = j;           for (; l < j + p;) {             s[l] = (s[l] == '+' ? '-' : '+');             ++l;           }         }       }     }     for (int j = 0; j < n; ++j)       if (s[j] == '-') {         f = -1;         break;       }     fout << "Case #" << i << ": ";     if (f == -1)       fout << "IMPOSSIBLE\n";     else       fout << f << "\n";   }   return 0; }
#include <algorithm> #include <bits/stdc++.h> #include <climits> #include <cmath> #include <cstdio> #include <cstring> #include <iostream> #include <iterator> #include <map> #include <queue> #include <set> #include <stack> #include <stdio.h> #include <string> #include <unordered_map> #include <utility> #include <vector>   using namespace std; 
typedef long long LL; typedef pair<int, int> ii;  using ll = long long; using ull = unsigned long long; using pii = pair<int, int>; using pll = pair<ll, ll>; using vi = vector<int>; using vll = vector<ll>; using pill = pair<int, ll>; using vvi = vector<vi>;  ll gcd(ll a, ll b) {   ll tc;   for (; (tc = a % b) != 0;) {     a = b;     b = tc;   }   return b; }  ll fast_exp(ll base, ll n, ll m) {   if (n == 0)     return 1;   ll tc = fast_exp(base, n / 2, m);   if (n % 2 == 0)     return (tc * tc) % m;   else     return (((tc * tc) % m) * base) % m; }  bool is_set(int i, ll mask) { return (mask >> i) & 1; }  int count_bits(ll mask) {   int ans = 0;   {     int i = 0;     while (i < 64) {       if (is_set(i, mask))         ++ans;       ++i;     }   }   return ans; }  inline void mhyrbmtqck(int &f, int &j, int &k, std::string &s) {   ++f;   for (int l = j; l < j + k; ++l)     s[l] = (s[l] == '+' ? '-' : '+'); }  inline void dzkxqwofwo(int &f, int &j, int &k, std::string &s) {   if (s[j] == '-')     mhyrbmtqck(f, j, k, s); }  inline void yubcsigzfc() { cout << "IMPOSSIBLE\n"; }  
int main() {   freopen("/home/seal12/Downloads/ramdisk/blackbox_3264486_5736519012712448_10_Usenix_RF_1.0_True_MCTS_Classic_True/ccsnoopy/ibrahim5253/outer_temp/ibrahim5253/A-small-practice_transformation.out",           "w", stdout);    freopen("/home/seal12/Downloads/ramdisk/blackbox_3264486_5736519012712448_10_Usenix_RF_1.0_True_MCTS_Classic_True/ccsnoopy/ibrahim5253/A-small-practice.in",           "r", stdin);    int tc;   scanf("%d ", &tc);   for (int i = 1; i <= tc; ++i) {     string s;     int k;     cin >> s >> k;     int f = 0, n = s.length();     for (int j = 0; j < n - k + 1; ++j)       dzkxqwofwo(f, j, k, s);     for (int j = 0; j < n; ++j)       if (s[j] == '-') {         f = -1;         break;       }     cout << "Case #" << i << ": ";     if (f == -1)       yubcsigzfc();     else       cout << f << "\n";   }   return 0; }
#include <algorithm> #include <bits/stdc++.h> #include <climits> #include <cmath> #include <cstdio> #include <cstring> #include <iostream> #include <iterator> #include <map> #include <queue> #include <set> #include <stack> #include <stdio.h> #include <string> #include <unordered_map> #include <utility> #include <vector>   using namespace std; 
using ll = long long; using ull = unsigned long long; using pii = pair<int, int>; using pll = pair<ll, ll>; using vi = vector<int>; using vll = vector<ll>; using pill = pair<int, ll>; using vvi = vector<vi>;  ll do_llgic_fct(ll a, ll b) {   ll tt;   while ((tt = a % b) != 0) {     a = b;     b = tt;   }   return b; }  ll do_llubj_fct(ll cc, ll n, ll m) {   if (n == 0)     return 1;   ll tt = do_llubj_fct(cc, n / 2, m);   if (n % 2 == 0)     return (tt * tt) % m;   else     return (((tt * tt) % m) * cc) % m; }  bool is_set(int i, ll mask) { return (mask >> i) & 1; }  int do_intzwp_fct(ll mask) {   int ans = 0;   for (int i = 0; i < 64; ++i)     if (is_set(i, mask)) {       ++ans;     }   return ans; }  int do_intzgd_fct(ll mask) {   int i = 0;   while (i < 64)     if (is_set(i++, mask))       return i - 1;   return -1; }  
int main() {   freopen("/home/seal12/Downloads/ramdisk/blackbox_3264486_5736519012712448_11_Usenix_RF_1.0_True_MCTS_Classic_True/fragusbot/ibrahim5253/A-small-practice.in",           "r", stdin);    freopen("/home/seal12/Downloads/ramdisk/blackbox_3264486_5736519012712448_11_Usenix_RF_1.0_True_MCTS_Classic_True/fragusbot/ibrahim5253/outer_temp/ibrahim5253/A-small-practice_transformation.out",           "w", stdout);    int ret_val = 0;    int tt;   scanf("%d ", &tt);   for (int i = 1; i <= tt; ++i) {     char s[1000];     int k;     scanf("%s %d ", s, &k);     int f = 0, n = strlen(s);     for (int j = 0; j < n - k + 1; ++j) {       if (s[j] == '-') {         ++f;         for (int l = j; l < j + k; ++l)           s[l] = (s[l] == '+' ? '-' : '+');       }     }     for (int j = 0; j < n; ++j) {       if (s[j] == '-') {         f = -1;         break;       }     }     printf("Case #%d: ", i);     if (f == -1)       printf("IMPOSSIBLE\n");     else       printf("%d\n", f);   }   return ret_val; }
#include <algorithm> #include <bits/stdc++.h> #include <bitset> #include <cassert> #include <cctype> #include <climits> #include <cmath> #include <complex> #include <cstdio> #include <cstring> #include <ctime> #include <fstream> #include <iostream> #include <iterator> #include <map> #include <numeric> #include <queue> #include <set> #include <stack> #include <stdio.h> #include <stdlib.h> #include <string> #include <unordered_map> #include <utility> #include <vector>   using namespace std; 
const int INF = 1000000000; ofstream fout;  ifstream fin;  const double eps = 1e-9; const double EPS = 1e-9; const int MAXN = 1005;  using ll = long long; using ull = unsigned long long; using pii = pair<int, int>; using pll = pair<ll, ll>; using vi = vector<int>; using vll = vector<ll>; using pill = pair<int, ll>; using vvi = vector<vi>;  ll gcd(ll a, ll b) {   ll t;   while ((t = a % b) != 0) {     a = b;     b = t;   }   return b; }  ll fast_exp(ll tc, ll n, ll r) {   if (n == 0)     return 1;   ll t = fast_exp(tc, n / 2, r);   if (n % 2 == 0)     return (t * t) % r;   else     return (((t * t) % r) * tc) % r; }  bool is_set(int i, ll N) { return (N >> i) & 1; }  int first_bit(ll N) {   int i = 0;   while (i < 64)     if (is_set(i++, N))       return i - 1;   return -1; }  
int main() {   fout.open("/home/seal12/Downloads/ramdisk/blackbox_3264486_5736519012712448_11_Usenix_RF_1.0_True_MCTS_Classic_True/gultai4ukr/ibrahim5253/outer_temp/ibrahim5253/A-small-practice_transformation.out");    fin.open("/home/seal12/Downloads/ramdisk/blackbox_3264486_5736519012712448_11_Usenix_RF_1.0_True_MCTS_Classic_True/gultai4ukr/ibrahim5253/A-small-practice.in");    int t;   fin >> t;   for (int i = 1; i <= t; ++i) {     string s;     int k;     fin >> s >> k;     int f = 0, n = s.length();     for (int j = 0; j < n - k + 1; ++j) {       if (s[j] == '-') {         ++f;         for (int l = j; l < j + k; ++l)           s[l] = (s[l] == '+' ? '-' : '+');       }     }     for (int j = 0; j < n; ++j)       if (s[j] == '-') {         f = -1;         break;       }     fout << "Case #" << i << ": ";     if (f == -1)       fout << "IMPOSSIBLE\n";     else {       fout << f << "\n";     }   }   return 0; }
#include <algorithm> #include <cassert> #include <cctype> #include <climits> #include <cmath> #include <complex> #include <cstdio> #include <cstring> #include <ctime> #include <deque> #include <fstream> #include <functional> #include <iostream> #include <iterator> #include <map> #include <math.h> #include <numeric> #include <queue> #include <set> #include <stack> #include <stdio.h> #include <stdlib.h> #include <string> #include <unordered_map> #include <utility> #include <vector> using namespace std; 
typedef long long ll; typedef pair<int, int> pii; typedef unsigned long long ull; typedef vector<int> VI; typedef set<int> si; typedef vector<vector<int>> vvi;  char s[2000]; 
int main(void) {   ios::sync_with_stdio(false);    int t;   cin >> t;   for (int tt = 1; tt <= t; tt++) {     int n = 0, k;     cin >> s >> k;     for (int i = strlen(s) - 1; i + 1 >= k; --i) {       if (s[i] == '-') {         ++n;         for (int j = 0; j < k; ++j) {           s[i - j] = (s[i - j] == '-' ? '+' : '-');         }       }      }     for (int j = 0; j < k; ++j) {       if (s[j] == '-') {         n = -1;       }     }      if (n < 0) {       printf("Case #%d: IMPOSSIBLE\n", tt);       continue;     }     printf("Case #%d: %d\n", tt, n);   }   return 0; }
#include <algorithm> #include <bits/stdc++.h> #include <cassert> #include <climits> #include <complex> #include <cstdio> #include <cstdlib> #include <ctime> #include <fstream> #include <iomanip> #include <iostream> #include <iterator> #include <map> #include <numeric> #include <queue> #include <stack> #include <stdio.h> #include <stdlib.h> #include <string> #include <utility> #include <vector> using namespace std;  
typedef pair<int, int> PII; typedef pair<int, int> pii; typedef unsigned long long ull; typedef vector<int> vi; typedef long long ll;  inline void egntvqxkwp(int &k, std::string &s, int &i, int &ans) {   for (int j = 0; j < k; j++)     s[i + j] = s[i + j] == '-' ? '+' : '-';   ans++; }  
int main() {    int solve, t = 0;   cin >> solve;   while (solve--) {     string s;     int k, ans = 0;     cin >> s >> k;     for (int i = 0; i + k <= s.size(); i++) {       if (s[i] == '-')         egntvqxkwp(k, s, i, ans);     }     cout << "Case #" << ++t << ": ";     if (s == string(s.size(), '+'))       cout << ans << "\n";     else {       puts("IMPOSSIBLE");     }   }   return 0; }
#include <algorithm> #include <bits/stdc++.h> #include <bitset> #include <cassert> #include <climits> #include <cmath> #include <complex> #include <cstdio> #include <cstdlib> #include <cstring> #include <ctime> #include <deque> #include <fstream> #include <functional> #include <iomanip> #include <iostream> #include <iterator> #include <map> #include <math.h> #include <numeric> #include <queue> #include <set> #include <sstream> #include <stack> #include <stdlib.h> #include <string> #include <unordered_map> #include <utility> #include <vector> using namespace std; 
typedef pair<int, int> pii; typedef pair<int, int> PII; typedef unsigned long long ull; typedef long double LD; typedef long long ll; typedef vector<int> vi; typedef vector<int> VI; typedef set<int> si; typedef vector<vector<int>> vvi;  ifstream fin("/home/seal12/Downloads/ramdisk/blackbox_3264486_5736519012712448_4_Usenix_RF_1.0_True_MCTS_Classic_True/ibrahim5253/sammyMaX/A-small-practice.in"); ofstream fout("/home/seal12/Downloads/ramdisk/blackbox_3264486_5736519012712448_4_Usenix_RF_1.0_True_MCTS_Classic_True/ibrahim5253/sammyMaX/outer_temp/sammyMaX/A-small-practice_transformation.out");  inline bool brzeukuzin(char &c, std::string &s, int &fsize, int flips[1005],                        int &i, int &res) {   if (i >= fsize)     res -= flips[i - fsize];   int now = (c == '+');   if (i <= s.size() - fsize)     if ((now + res) % 2 == 0) {       flips[i] = 1;     }   res += flips[i];   i++;   if ((now + res) % 2 == 0) {     fout << "IMPOSSIBLE\n";     return true;   }   return false; }  inline bool emwzkawacn() {   return 1;   return false; }  inline bool yuourrgjkh() {   return true;   return false; }  inline bool kpybuwnwmq() {   return true;   return false; }  void solve() {   string s;   int fsize;   fin >> s >> fsize;    int flips[1005] = {}, res = 0, i = 0;   for (char c : s) {     if (brzeukuzin(c, s, fsize, flips, i, res)) {       if (emwzkawacn()) {         if (yuourrgjkh()) {           if (kpybuwnwmq())             return;         }       }     }   }   res = 0;   for (int a : flips)     res += a;   fout << res << '\n'; }  
int main() {   ios_base::sync_with_stdio(0);   cin.tie(0);   int t;   fin >> t;   {     int i = 0;     while (i < t) {       fout << "Case #" << i + 1 << ": ", solve();       i++;     }   }   return 0; }
 #include <algorithm> #include <cmath> #include <complex> #include <cstdio> #include <cstring> #include <fstream> #include <functional> #include <iostream> #include <iterator> #include <list> #include <map> #include <numeric> #include <queue> #include <set> #include <stack> #include <stdio.h> #include <string> #include <utility> #include <vector>  using namespace std; 
 typedef long double ld; typedef long long ll; typedef pair<int, int> pii; typedef pair<int, int> PII; typedef vector<int> vi;  inline void lqmpjjayml(std::string &s, int &j) {   s[j] = (s[j] == '-' ? '+' : '-'); }  void work() {   string s;   int tc;   cin >> s >> tc;   int len = (int)s.size();   int ans = 0;   for (int i = 0; i <= len - tc; ++i) {     if (s[i] == '-') {       ans++;       for (int j = i; j < i + tc; ++j)         lqmpjjayml(s, j);     }   }   for (int i = len - tc + 1; i < len; ++i) {     if (s[i] == '-') {       printf("IMPOSSIBLE\n");       return;     }   }   printf("%d\n", ans); }  
 int main() {   ios::sync_with_stdio(true);    int q;   cin >> q;   for (int i = 1; i <= q; ++i) {     printf("Case #%d: ", i);     work();   }   return 0; }
#include <algorithm> #include <cmath> #include <complex> #include <cstdio> #include <cstring> #include <fstream> #include <functional> #include <iostream> #include <iterator> #include <list> #include <map> #include <numeric> #include <queue> #include <set> #include <stack> #include <string> #include <utility> #include <vector> using namespace std; 
typedef long long ll; typedef pair<int, int> ii; typedef pair<int, int> pii; typedef vector<int> vi; typedef long double LD;  const int MOD = 1000000007;  char s[1 << 10]; int n, p;  inline void mrxrftinpp(int &j) { s[j] = '+'; }  inline void webspixsbp(int &get, int &j) {   j = get;   while (j < get + p) {     if (s[j] == '-')       mrxrftinpp(j);     else {       s[j] = '-';     }     j++;   } }  
int main() {   ios::sync_with_stdio(false);    freopen("/home/seal12/Downloads/ramdisk/blackbox_3264486_5736519012712448_3_Usenix_RF_1.0_True_MCTS_Classic_True/ibrahim5253/try/A-small-practice.in",           "r", stdin);    int t, j, ans;   cin >> t;   {     int c = 0;     while (c < t) {       cin >> s >> p;       n = strlen(s);       ans = 0;       for (int get = 0; get < n; get++) {         if (s[get] == '-') {           if (get + p > n) {             ans = -1;             break;           }           ans++;           webspixsbp(get, j);         }       }       printf("Case #%d: ", c + 1);       if (ans != -1) {         printf("%d\n", ans);       } else {         printf("IMPOSSIBLE\n");       }       c++;     }   }   return 0; }
#include <algorithm> #include <climits> #include <cmath> #include <cstdio> #include <cstring> #include <fstream> #include <iostream> #include <iterator> #include <map> #include <queue> #include <set> #include <stack> #include <stdio.h> #include <string> #include <unordered_map> #include <utility> #include <vector>   using namespace std; 
ifstream fin;  using ll = long long; using ull = unsigned long long; using pii = pair<int, int>; using pll = pair<ll, ll>; using vi = vector<int>; using vll = vector<ll>; using pill = pair<int, ll>; using vvi = vector<vi>;  inline void wdanrbaiek(ll &a, ll &tt, ll &t) {   a = tt;   tt = t; }  ll do_lllnj_fct(ll a, ll tt) {   ll t;   while ((t = a % tt) != 0)     wdanrbaiek(a, tt, t);   return tt; }  ll do_llruq_fct(ll ftsl_Var, ll n, ll m) {   if (n == 0)     return 1;   ll t = do_llruq_fct(ftsl_Var, n / 2, m);   if (n % 2 == 0)     return (t * t) % m;   else     return (((t * t) % m) * ftsl_Var) % m; }  bool do__Boxay_fct(int i, ll gjnl_Var) { return (gjnl_Var >> i) & 1; }  int do_intbyz_fct(ll gjnl_Var) {   int ans = 0;   for (int i = 0; i < 64; ++i)     if (do__Boxay_fct(i, gjnl_Var))       ++ans;   return ans; }  int do_intvck_fct(ll gjnl_Var) {   int ret_val = -1;   int i = 0;   while (i < 64)     if (do__Boxay_fct(i++, gjnl_Var))       return i - 1;   return ret_val; }  inline void aowuvaerta(int &f, int &k, std::string &s, int &j) {   if (s[j] == '-') {     ++f;     for (int l = j; l < j + k; ++l)       s[l] = (s[l] == '+' ? '-' : '+');   }   ++j; }  
int main() {   fin.open("/home/seal12/Downloads/ramdisk/blackbox_3264486_5736519012712448_11_Usenix_RF_1.0_True_MCTS_Classic_True/iPeter/ibrahim5253/A-small-practice.in");    int t;   fin >> t;   int i;   for (i = 1; i <= t; ++i) {     string s;     int k;     fin >> s >> k;     int f = 0, n = s.length();     {       int j = 0;       while (j < n - k + 1)         aowuvaerta(f, k, s, j);     }     for (int j = 0; j < n; ++j)       if (s[j] == '-') {         f = -1;         break;       }     printf("Case #%d: ", i);     if (f == -1)       printf("IMPOSSIBLE\n");     else {       printf("%d\n", f);     }   }   return 0; }
#include <algorithm> #include <bits/stdc++.h> #include <climits> #include <cmath> #include <cstdio> #include <cstring> #include <iostream> #include <iterator> #include <map> #include <queue> #include <set> #include <stack> #include <stdio.h> #include <string> #include <unordered_map> #include <utility> #include <vector>   using namespace std; 
using ll = long long; using ull = unsigned long long; using pii = pair<int, int>; using pll = pair<ll, ll>; using vi = vector<int>; using vll = vector<ll>; using pill = pair<int, ll>; using vvi = vector<vi>;  bool is_set(int i, ll mask) { return (mask >> i) & 1; }  int count_bits(ll mask) {   int ans = 0;   for (int i = 0; i < 64; ++i)     if (is_set(i, mask))       ++ans;   return ans; }  
int main() {   freopen("/home/seal12/Downloads/ramdisk/blackbox_3264486_5736519012712448_11_Usenix_RF_1.0_True_MCTS_Classic_True/jiian/ibrahim5253/outer_temp/ibrahim5253/A-small-practice_transformation.out",           "w", stdout);    freopen("/home/seal12/Downloads/ramdisk/blackbox_3264486_5736519012712448_11_Usenix_RF_1.0_True_MCTS_Classic_True/jiian/ibrahim5253/A-small-practice.in",           "r", stdin);    int cas;   cin >> cas;   for (int i = 1; i <= cas; ++i) {     string r;     int k;     cin >> r >> k;     int f = 0, n = r.length();     int j;     for (j = 0; j < n - k + 1; ++j) {       if (r[j] == '-') {         ++f;         {           int ubni_Var = j;           while (ubni_Var < j + k) {             r[ubni_Var] = (r[ubni_Var] == '+' ? '-' : '+');             ++ubni_Var;           }         }       }     }     for (int j = 0; j < n; ++j) {       if (r[j] == '-') {         f = -1;         break;       }     }     printf("Case #%d: ", i);     if (f == -1) {       printf("IMPOSSIBLE\n");     } else       printf("%d\n", f);   }   return 0; }
#include <algorithm> #include <bits/stdc++.h> #include <bitset> #include <cassert> #include <cctype> #include <climits> #include <cmath> #include <complex> #include <cstdio> #include <cstdlib> #include <cstring> #include <ctime> #include <deque> #include <fstream> #include <functional> #include <iostream> #include <iterator> #include <map> #include <math.h> #include <queue> #include <set> #include <sstream> #include <stack> #include <stdio.h> #include <stdlib.h> #include <string> #include <unordered_map> #include <utility> #include <vector>    using namespace std; 
typedef long double ld; typedef long long LL; typedef vector<int> VI; typedef set<int> si;  using ll = long long; using ull = unsigned long long; using pii = pair<int, int>; using pll = pair<ll, ll>; using vi = vector<int>; using vll = vector<ll>; using pill = pair<int, ll>; using vvi = vector<vi>;  inline void wgajphdebx(ll &a, ll &b, ll &t) {   a = b;   b = t; }  ll gcd(ll a, ll b) {   ll t;   for (; (t = a % b) != 0;)     wgajphdebx(a, b, t);   return b; }  ll fast_exp(ll v, ll n, ll m) {   if (n == 0)     return 1;   ll t = fast_exp(v, n / 2, m);   if (n % 2 == 0)     return (t * t) % m;   else     return (((t * t) % m) * v) % m; }  bool is_set(int i, ll mask) { return (mask >> i) & 1; }  int count_bits(ll mask) {   int ans = 0;   for (int i = 0; i < 64; ++i)     if (is_set(i, mask))       ++ans;   return ans; }  int first_bit(ll mask) {   int i = 0;   while (i < 64)     if (is_set(i++, mask))       return i - 1;   return -1; }  inline void wajuaztkaj(int &f, int &j, int &N, std::string &s) {   ++f;   for (int l = j; l < j + N; ++l)     s[l] = (s[l] == '+' ? '-' : '+'); }  
int main() {   ios::sync_with_stdio(1);    int ret_val = 0;   freopen("/home/seal12/Downloads/ramdisk/blackbox_3264486_5736519012712448_10_Usenix_RF_1.0_True_MCTS_Classic_True/KhaleD/ibrahim5253/outer_temp/ibrahim5253/A-small-practice_transformation.out",           "w", stdout);   freopen("/home/seal12/Downloads/ramdisk/blackbox_3264486_5736519012712448_10_Usenix_RF_1.0_True_MCTS_Classic_True/KhaleD/ibrahim5253/A-small-practice.in",           "r", stdin);   int t;   scanf("%d ", &t);   for (int i = 1; i <= t; ++i) {     string s;     int N;     cin >> s >> N;     int f = 0, n = s.length();     for (int j = 0; j < n - N + 1; ++j) {       if (s[j] == '-')         wajuaztkaj(f, j, N, s);     }     for (int j = 0; j < n; ++j)       if (s[j] == '-') {         f = -1;         break;       }     printf("Case #%d: ", i);     if (f == -1)       printf("IMPOSSIBLE\n");     else       printf("%d\n", f);   }   return ret_val; }
#include <algorithm> #include <bits/stdc++.h> #include <bitset> #include <cassert> #include <cctype> #include <climits> #include <cmath> #include <complex> #include <cstdio> #include <cstdlib> #include <cstring> #include <ctime> #include <deque> #include <iostream> #include <iterator> #include <list> #include <map> #include <queue> #include <set> #include <stack> #include <stdio.h> #include <string> #include <unordered_map> #include <utility> #include <vector>   using namespace std; 
const int MOD = 1000000007; using ll = long long; using ull = unsigned long long; using pii = pair<int, int>; using pll = pair<ll, ll>; using vi = vector<int>; using vll = vector<ll>; using pill = pair<int, ll>; using vvi = vector<vi>;  ll solve(ll a, ll b) {   ll t;   while ((t = a % b) != 0) {     a = b;     b = t;   }   return b; }  bool is_set(int i, ll x) { return (x >> i) & 1; }  int get(ll x) {   int ans = 0;   for (int i = 0; i < 64; ++i)     if (is_set(i, x))       ++ans;   return ans; }  int first_bit(ll x) {   int i = 0;   while (i < 64)     if (is_set(i++, x))       return i - 1;   return -1; }  inline void tlbcoyapdl(int &f, int &j, int &p, std::string &s) {   ++f;   {     int v = j;     for (; v < j + p;) {       s[v] = (s[v] == '+' ? '-' : '+');       ++v;     }   } }  inline void zcfiwldkxa(int &f, int &j, int &p, std::string &s) {   if (s[j] == '-')     tlbcoyapdl(f, j, p, s); }  
int main() {    int t;   scanf("%d ", &t);   for (int i = 1; i <= t; ++i) {     string s;     int p;     cin >> s >> p;     int f = 0, n = s.length();     int j;     for (j = 0; j < n - p + 1; ++j)       zcfiwldkxa(f, j, p, s);     for (int j = 0; j < n; ++j)       if (s[j] == '-') {         f = -1;         break;       }     printf("Case #%d: ", i);     if (f == -1)       printf("IMPOSSIBLE\n");     else       printf("%d\n", f);   }   return 0; }
#include <algorithm> #include <cassert> #include <cctype> #include <climits> #include <cmath> #include <complex> #include <cstdio> #include <cstdlib> #include <cstring> #include <ctime> #include <fstream> #include <iomanip> #include <iostream> #include <iterator> #include <map> #include <queue> #include <set> #include <stack> #include <stdio.h> #include <stdlib.h> #include <string> #include <unordered_map> #include <utility> #include <vector>   using namespace std; 
const double eps = 1e-9; const int MOD = 1000000007; typedef long long LL; typedef vector<int> VI; typedef long double ld; typedef pair<int, int> ii; typedef long double LD; typedef set<int> si;  using ll = long long; using ull = unsigned long long; using pii = pair<int, int>; using pll = pair<ll, ll>; using vi = vector<int>; using vll = vector<ll>; using pill = pair<int, ll>; using vvi = vector<vi>;  ll get(ll a, ll b) {   ll t;   while ((t = a % b) != 0) {     a = b;     b = t;   }   return b; }  ll fast_exp(ll base, ll n, ll m) {   if (n == 0)     return 1;   ll t = fast_exp(base, n / 2, m);   if (n % 2 == 0)     return (t * t) % m;   else     return (((t * t) % m) * base) % m; }  bool is_set(int i, ll tc) { return (tc >> i) & 1; }  int count_bits(ll tc) {   int ans = 0;   for (int i = 0; i < 64; ++i)     if (is_set(i, tc))       ++ans;   return ans; }  int first_bit(ll tc) {   int ret_val = -1;   int i = 0;   while (i < 64)     if (is_set(i++, tc))       return i - 1;   return ret_val; }  inline void zcmedvjfae(int &f, int &j, int &k, std::string &s) {   ++f;   for (int d = j; d < j + k; ++d)     s[d] = (s[d] == '+' ? '-' : '+'); }  inline void rtszjqhpre(int &f, int &j, int &k, std::string &s) {   if (s[j] == '-')     zcmedvjfae(f, j, k, s); }  
int main() {   int ret_val = 0;   freopen("/home/seal12/Downloads/ramdisk/blackbox_3264486_5736519012712448_11_Usenix_RF_1.0_True_MCTS_Classic_True/lazyBit/ibrahim5253/A-small-practice.in",           "r", stdin);   int t;   scanf("%d ", &t);   for (int i = 1; i <= t; ++i) {     string s;     int k;     cin >> s >> k;     int f = 0, n = s.length();     for (int j = 0; j < n - k + 1; ++j)       rtszjqhpre(f, j, k, s);     for (int j = 0; j < n; ++j)       if (s[j] == '-') {         f = -1;         break;       }     printf("Case #%d: ", i);     if (f == -1)       printf("IMPOSSIBLE\n");     else       printf("%d\n", f);   }   return ret_val; }
#include <algorithm> #include <bits/stdc++.h> #include <bitset> #include <cctype> #include <climits> #include <cmath> #include <complex> #include <cstdio> #include <cstring> #include <ctime> #include <deque> #include <functional> #include <iomanip> #include <iostream> #include <iterator> #include <map> #include <math.h> #include <numeric> #include <queue> #include <set> #include <sstream> #include <stack> #include <stdio.h> #include <stdlib.h> #include <string> #include <unordered_map> #include <utility> #include <vector>   using namespace std; 
typedef long double LD; typedef long long LL; typedef pair<int, int> PII; typedef vector<int> VI;  using ll = long long; using ull = unsigned long long; using pii = pair<int, int>; using pll = pair<ll, ll>; using vi = vector<int>; using vll = vector<ll>; using pill = pair<int, ll>; using vvi = vector<vi>;  ll gcd(ll a, ll b) {   ll t;   for (; (t = a % b) != 0;) {     a = b;     b = t;   }   return b; }  ll fast_exp(ll base, ll n, ll tc) {   if (n == 0)     return 1;   ll t = fast_exp(base, n / 2, tc);   if (n % 2 == 0) {     return (t * t) % tc;   } else     return (((t * t) % tc) * base) % tc; }  bool is_set(int i, ll mask) { return (mask >> i) & 1; }  inline void hpdctzyiie(int &f, int &j, int &k, char s[1000]) {   ++f;   int l;   for (l = j; l < j + k; ++l) {     s[l] = (s[l] == '+' ? '-' : '+');   } }  
int main() {   ios::sync_with_stdio(false);   int t;   cin >> t;   {     int i = 1;     while (i <= t) {       char s[1000];       int k;       cin >> s >> k;       int f = 0, n = strlen(s);       for (int j = 0; j < n - k + 1; ++j) {         if (s[j] == '-')           hpdctzyiie(f, j, k, s);       }       int j;       for (j = 0; j < n; ++j)         if (s[j] == '-') {           f = -1;           break;         }       cout << "Case #" << i << ": ";       if (f == -1) {         cout << "IMPOSSIBLE\n";       } else         cout << f << "\n";       ++i;     }   }   return 0; }
#include <algorithm> #include <bits/stdc++.h> #include <bitset> #include <cassert> #include <cctype> #include <climits> #include <cmath> #include <complex> #include <cstdio> #include <cstring> #include <ctime> #include <deque> #include <functional> #include <iomanip> #include <iostream> #include <iterator> #include <list> #include <map> #include <math.h> #include <numeric> #include <queue> #include <set> #include <sstream> #include <stack> #include <stdio.h> #include <stdlib.h> #include <string> #include <unordered_map> #include <utility> #include <vector>   using namespace std; 
const double EPS = 1e-9; typedef long long LL; typedef long double LD;  const long double PI = 3.1415926535897932384626433832795;  using ll = long long; using ull = unsigned long long; using pii = pair<int, int>; using pll = pair<ll, ll>; using vi = vector<int>; using vll = vector<ll>; using pill = pair<int, ll>; using vvi = vector<vi>;  ll gcd(ll a, ll b) {   ll t;   for (; (t = a % b) != 0;) {     a = b;     b = t;   }   return b; }  ll fast_exp(ll v, ll n, ll p) {   if (n == 0)     return 1;   ll t = fast_exp(v, n / 2, p);   if (n % 2 == 0)     return (t * t) % p;   else     return (((t * t) % p) * v) % p; }  bool is_set(int i, ll c) { return (c >> i) & 1; }  
int main() {   ios::sync_with_stdio(0);   int t;   cin >> t;   for (int i = 1; i <= t; ++i) {     string s;     int k;     cin >> s >> k;     int f = 0, n = s.length();     for (int j = 0; j < n - k + 1; ++j) {       if (s[j] == '-') {         ++f;         for (int y = j; y < j + k; ++y)           s[y] = (s[y] == '+' ? '-' : '+');       }     }     for (int j = 0; j < n; ++j)       if (s[j] == '-') {         f = -1;         break;       }     cout << "Case #" << i << ": ";     if (f == -1)       cout << "IMPOSSIBLE\n";     else       cout << f << "\n";   }   return 0; }
#include <algorithm> #include <bits/stdc++.h> #include <bitset> #include <cassert> #include <cctype> #include <climits> #include <cmath> #include <complex> #include <cstdio> #include <cstdlib> #include <cstring> #include <ctime> #include <fstream> #include <iomanip> #include <iostream> #include <iterator> #include <list> #include <map> #include <numeric> #include <queue> #include <set> #include <sstream> #include <stack> #include <stdio.h> #include <string> #include <unordered_map> #include <utility> #include <vector>   using namespace std; 
const int MOD = 1000000007; typedef pair<int, int> ii; typedef long long LL; typedef vector<int> VI; typedef long double ld;  using ll = long long; using ull = unsigned long long; using pii = pair<int, int>; using pll = pair<ll, ll>; using vi = vector<int>; using vll = vector<ll>; using pill = pair<int, ll>; using vvi = vector<vi>;  ll gcd(ll a, ll b) {   ll t;   for (; (t = a % b) != 0;) {     a = b;     b = t;   }   return b; }  ll fast_exp(ll base, ll n, ll m) {   if (n == 0)     return 1;   ll t = fast_exp(base, n / 2, m);   if (n % 2 == 0)     return (t * t) % m;   else     return (((t * t) % m) * base) % m; }  bool is_set(int i, ll mask) { return (mask >> i) & 1; }  int get(ll mask) {   int ans = 0;   int i;   for (i = 0; i < 64; ++i)     if (is_set(i, mask))       ++ans;   return ans; }  int first_bit(ll mask) {   int i = 0;   while (i < 64)     if (is_set(i++, mask))       return i - 1;   return -1; }  
int main() {   ios::sync_with_stdio(false);    freopen("/home/seal12/Downloads/ramdisk/blackbox_3264486_5736519012712448_11_Usenix_RF_1.0_True_MCTS_Classic_True/satyaki3794/ibrahim5253/outer_temp/ibrahim5253/A-small-practice_transformation.out",           "w", stdout);    freopen("/home/seal12/Downloads/ramdisk/blackbox_3264486_5736519012712448_11_Usenix_RF_1.0_True_MCTS_Classic_True/satyaki3794/ibrahim5253/A-small-practice.in",           "r", stdin);    int t;   cin >> t;   for (int i = 1; i <= t; ++i) {     char s[1000];     int k;     cin >> s >> k;     int f = 0, n = strlen(s);     for (int j = 0; j < n - k + 1; ++j) {       if (s[j] == '-') {         ++f;         for (int l = j; l < j + k; ++l) {           s[l] = (s[l] == '+' ? '-' : '+');         }       }     }     for (int j = 0; j < n; ++j)       if (s[j] == '-') {         f = -1;         break;       }     cout << "Case #" << i << ": ";     if (f == -1)       cout << "IMPOSSIBLE\n";     else       cout << f << "\n";   }   return 0; }
#include <algorithm> #include <bitset> #include <climits> #include <cmath> #include <cstdio> #include <cstring> #include <ctime> #include <iostream> #include <iterator> #include <map> #include <queue> #include <set> #include <stack> #include <stdio.h> #include <string> #include <unordered_map> #include <utility> #include <vector>   using namespace std; 
using ll = long long; using ull = unsigned long long; using pii = pair<int, int>; using pll = pair<ll, ll>; using vi = vector<int>; using vll = vector<ll>; using pill = pair<int, ll>; using vvi = vector<vi>;  ll solve(ll base, ll n, ll m) {   if (n == 0)     return 1;   ll t = solve(base, n / 2, m);   if (n % 2 == 0)     return (t * t) % m;   else     return (((t * t) % m) * base) % m; }  bool is_set(int i, ll mask) { return (mask >> i) & 1; }  int count_bits(ll mask) {   int ans = 0;   int i;   for (i = 0; i < 64; ++i)     if (is_set(i, mask))       ++ans;   return ans; }  int readData(ll mask) {   int ret_val = -1;   int i = 0;   while (i < 64)     if (is_set(i++, mask))       return i - 1;   return ret_val; }  inline void naakstrfoo(int &f, int &j, int &k, std::string &s) {   ++f;   {     int d = j;     while (d < j + k) {       s[d] = (s[d] == '+' ? '-' : '+');       ++d;     }   } }  
int main() {   freopen("/home/seal12/Downloads/ramdisk/blackbox_3264486_5736519012712448_11_Usenix_RF_1.0_True_MCTS_Classic_True/sdya/ibrahim5253/A-small-practice.in",           "r", stdin);    freopen("/home/seal12/Downloads/ramdisk/blackbox_3264486_5736519012712448_11_Usenix_RF_1.0_True_MCTS_Classic_True/sdya/ibrahim5253/outer_temp/ibrahim5253/A-small-practice_transformation.out",           "w", stdout);    int t;   cin >> t;   {     int i = 1;     for (; i <= t;) {       string s;       int k;       cin >> s >> k;       int f = 0, n = s.length();       for (int j = 0; j < n - k + 1; ++j) {         if (s[j] == '-') {           naakstrfoo(f, j, k, s);         }       }       for (int j = 0; j < n; ++j)         if (s[j] == '-') {           f = -1;           break;         }       printf("Case #%d: ", i);       if (f == -1)         printf("IMPOSSIBLE\n");       else         printf("%d\n", f);       ++i;     }   }   return 0; }
#include <algorithm> #include <bits/stdc++.h> #include <bitset> #include <cmath> #include <cstdio> #include <cstring> #include <ctime> #include <iostream> #include <map> #include <queue> #include <set> #include <stdio.h> #include <vector> using namespace std;  
using VI = vector<int>; using VVI = vector<VI>; using PII = pair<int, int>; using LL = long long; using VL = vector<LL>; using VVL = vector<VL>; using PLL = pair<LL, LL>; using VS = vector<string>; template <class S, class T> istream &solve(istream &is, pair<S, T> &p) {   return is >> p.first >> p.second; } template <class S, class T> ostream &operator<<(ostream &os, const pair<S, T> &p) {   return os << p.first << " " << p.second; } template <class T> void maxi(T &x, T y) {   if (x < y)     x = y; }  
int main() {   freopen("/home/seal12/Downloads/ramdisk/blackbox_3264486_5736519012712448_9_Usenix_RF_1.0_True_MCTS_Classic_True/sdya/okaduki/A-small-practice.in",           "r", stdin);    freopen("/home/seal12/Downloads/ramdisk/blackbox_3264486_5736519012712448_9_Usenix_RF_1.0_True_MCTS_Classic_True/sdya/okaduki/outer_temp/okaduki/A-small-practice_transformation.out",           "w", stdout);    cin.tie(0);    int left_bound;   scanf("%d ", &left_bound);   int t;   {     t = (1);     while (t < (left_bound + 1)) {       char S[1000];       scanf("%s ", S);       int K;       scanf("%d ", &K);       int N = int(strlen(S));       VI xs(N);       {         int i = (0);         while (i < (N)) {           xs[i] = S[i] == '+';           ++i;         }       }        int argc = 0;       for (int i = 0; i + K <= N; ++i) {         if (!xs[i]) {           ++argc;           for (int k = (0); k < (K); ++k)             xs[i + k] = !xs[i + k];         }       }       if (accumulate(begin((xs)), end((xs)), 0) != N)         printf("Case #%d: IMPOSSIBLE\n", t);       else         printf("Case #%d: %d\n", t, argc);       ++t;     }   }    return 0; }
#include <algorithm> #include <bitset> #include <cassert> #include <cctype> #include <climits> #include <cmath> #include <complex> #include <cstdio> #include <cstring> #include <ctime> #include <deque> #include <fstream> #include <functional> #include <iostream> #include <iterator> #include <list> #include <map> #include <math.h> #include <numeric> #include <queue> #include <set> #include <sstream> #include <stack> #include <stdio.h> #include <string> #include <unordered_map> #include <utility> #include <vector>   using namespace std; 
const int MAXN = 1005; using ll = long long; using ull = unsigned long long; using pii = pair<int, int>; using pll = pair<ll, ll>; using vi = vector<int>; using vll = vector<ll>; using pill = pair<int, ll>; using vvi = vector<vi>;  inline void rqetbroolm(ll &a, ll &b, ll &t) {   a = b;   b = t; }  ll gcd(ll a, ll b) {   ll t;   while ((t = a % b) != 0)     rqetbroolm(a, b, t);   return b; }  ll fast_exp(ll r, ll n, ll c) {   if (n == 0)     return 1;   ll t = fast_exp(r, n / 2, c);   if (n % 2 == 0)     return (t * t) % c;   else     return (((t * t) % c) * r) % c; }  bool is_set(int i, ll mask) { return (mask >> i) & 1; }  int count_bits(ll mask) {   int ans = 0;   {     int i;     for (i = 0; i < 64;) {       if (is_set(i, mask))         ++ans;       ++i;     }   }   return ans; }  int first_bit(ll mask) {   int ret_val = -1;   int i = 0;   while (i < 64)     if (is_set(i++, mask))       return i - 1;   return ret_val; }  inline void pulyhpvcdp(int &f, int &j, int &k, std::string &s) {   ++f;   for (int v = j; v < j + k; ++v)     s[v] = (s[v] == '+' ? '-' : '+'); }  inline void qisrlcmpta(int &f, int &j, int &k, std::string &s) {   if (s[j] == '-')     pulyhpvcdp(f, j, k, s); }  
int main() {   freopen("/home/seal12/Downloads/ramdisk/blackbox_3264486_5736519012712448_10_Usenix_RF_1.0_True_MCTS_Classic_True/Tashi711/ibrahim5253/outer_temp/ibrahim5253/A-small-practice_transformation.out",           "w", stdout);    freopen("/home/seal12/Downloads/ramdisk/blackbox_3264486_5736519012712448_10_Usenix_RF_1.0_True_MCTS_Classic_True/Tashi711/ibrahim5253/A-small-practice.in",           "r", stdin);    int t;   cin >> t;   for (int i = 1; i <= t; ++i) {     string s;     int k;     cin >> s >> k;     int f = 0, n = s.length();     for (int j = 0; j < n - k + 1; ++j)       qisrlcmpta(f, j, k, s);     int j;     for (j = 0; j < n; ++j)       if (s[j] == '-') {         f = -1;         break;       }     printf("Case #%d: ", i);     if (f == -1)       printf("IMPOSSIBLE\n");     else       printf("%d\n", f);   }   return 0; }
#include <algorithm> #include <climits> #include <cmath> #include <cstdio> #include <cstring> #include <iostream> #include <iterator> #include <map> #include <queue> #include <set> #include <stack> #include <stdio.h> #include <string> #include <unordered_map> #include <utility> #include <vector>   using namespace std;  
using ll = long long; using ull = unsigned long long; using pii = pair<int, int>; using pll = pair<ll, ll>; using vi = vector<int>; using vll = vector<ll>; using pill = pair<int, ll>; using vvi = vector<vi>;  ll gcd(ll a, ll b) {   ll t;   while ((t = a % b) != 0) {     a = b;     b = t;   }   return b; }  ll get(ll base, ll n, ll m) {   if (n == 0)     return 1;   ll t = get(base, n / 2, m);   if (n % 2 == 0)     return (t * t) % m;   else     return (((t * t) % m) * base) % m; }  bool do__Boufw_fct(int i, ll c) { return (c >> i) & 1; }  inline void ncdjorxcnc(ll &c, int &ans) {   int i = 0;   while (i < 64) {     if (do__Boufw_fct(i, c))       ++ans;     ++i;   } }  int solve(ll c) {   int ans = 0;   ncdjorxcnc(c, ans);   return ans; }  int first_bit(ll c) {   int i = 0;   while (i < 64)     if (do__Boufw_fct(i++, c))       return i - 1;   return -1; }  inline void rgitzmamyj(std::string &s, int &l) {   s[l] = (s[l] == '+' ? '-' : '+');   ++l; }  inline void fhkwgnencb(int &f, int &j, int &r, std::string &s) {   if (s[j] == '-') {     ++f;     {       int l = j;       while (l < j + r)         rgitzmamyj(s, l);     }   } }  
int main() {    int t;   cin >> t;   {     int i = 1;     while (i <= t) {       string s;       int r;       cin >> s >> r;       int f = 0, n = s.length();       for (int j = 0; j < n - r + 1; ++j)         fhkwgnencb(f, j, r, s);       {         int j = 0;         while (j < n) {           if (s[j] == '-') {             f = -1;             break;           }           ++j;         }       }       cout << "Case #" << i << ": ";       if (f == -1)         cout << "IMPOSSIBLE\n";       else         cout << f << "\n";       ++i;     }   }   return 0; }
#include <algorithm> #include <climits> #include <cmath> #include <cstdio> #include <cstring> #include <iostream> #include <iterator> #include <map> #include <queue> #include <set> #include <stack> #include <stdio.h> #include <string> #include <unordered_map> #include <utility> #include <vector>    using namespace std; 
const int INF = 1000000000; const int MAXN = 1005; using ll = long long; using ull = unsigned long long; using pii = pair<int, int>; using pll = pair<ll, ll>; using vi = vector<int>; using vll = vector<ll>; using pill = pair<int, ll>; using vvi = vector<vi>;  ll fast_exp(ll c, ll n, ll m) {   if (n == 0)     return 1;   ll t = fast_exp(c, n / 2, m);   if (n % 2 == 0)     return (t * t) % m;   else     return (((t * t) % m) * c) % m; }  bool is_set(int i, ll q) { return (q >> i) & 1; }  int count_bits(ll q) {   int ans = 0;   for (int i = 0; i < 64; ++i)     if (is_set(i, q))       ++ans;   return ans; }  int first_bit(ll q) {   int ret_val = -1;   int i = 0;   while (i < 64)     if (is_set(i++, q))       return i - 1;   return ret_val; }  inline void eynlawzkys(int &f, int &j, int &k, char s[1000]) {   ++f;   for (int l = j; l < j + k; ++l)     s[l] = (s[l] == '+' ? '-' : '+'); }  
int main() {   ios::sync_with_stdio(0);    freopen("/home/seal12/Downloads/ramdisk/blackbox_3264486_5736519012712448_10_Usenix_RF_1.0_True_MCTS_Classic_True/try/ibrahim5253/outer_temp/ibrahim5253/A-small-practice_transformation.out",           "w", stdout);    freopen("/home/seal12/Downloads/ramdisk/blackbox_3264486_5736519012712448_10_Usenix_RF_1.0_True_MCTS_Classic_True/try/ibrahim5253/A-small-practice.in",           "r", stdin);    int t;   scanf("%d ", &t);   for (int i = 1; i <= t; ++i) {     char s[1000];     int k;     scanf("%s %d ", s, &k);     int f = 0, n = strlen(s);     for (int j = 0; j < n - k + 1; ++j) {       if (s[j] == '-')         eynlawzkys(f, j, k, s);     }     int j;     for (j = 0; j < n; ++j)       if (s[j] == '-') {         f = -1;         break;       }     printf("Case #%d: ", i);     if (f == -1)       printf("IMPOSSIBLE\n");     else       printf("%d\n", f);   }   return 0; }
#include <algorithm> #include <climits> #include <cmath> #include <cstdio> #include <cstring> #include <iostream> #include <iterator> #include <map> #include <queue> #include <set> #include <stack> #include <stdio.h> #include <string> #include <unordered_map> #include <utility> #include <vector>   using namespace std;  
using ll = long long; using ull = unsigned long long; using pii = pair<int, int>; using pll = pair<ll, ll>; using vi = vector<int>; using vll = vector<ll>; using pill = pair<int, ll>; using vvi = vector<vi>;  ll fast_exp(ll base, ll n, ll m) {   if (n == 0)     return 1;   ll t = fast_exp(base, n / 2, m);   if (n % 2 == 0)     return (t * t) % m;   else     return (((t * t) % m) * base) % m; }  inline void oszgsixvdv(int &f, int &j, int &k, std::string &s) {   ++f;   for (int l = j; l < j + k; ++l)     s[l] = (s[l] == '+' ? '-' : '+'); }  inline void jgdffqpzmb(int &f, int &j, int &k, std::string &s) {   if (s[j] == '-')     oszgsixvdv(f, j, k, s); }  
int main() {    int t;   scanf("%d ", &t);   {     int i = 1;     for (; i <= t;) {       string s;       int k;       cin >> s >> k;       int f = 0, n = s.length();       for (int j = 0; j < n - k + 1; ++j)         jgdffqpzmb(f, j, k, s);       int j;       for (j = 0; j < n; ++j)         if (s[j] == '-') {           f = -1;           break;         }       cout << "Case #" << i << ": ";       if (f == -1)         cout << "IMPOSSIBLE\n";       else         cout << f << "\n";       ++i;     }   }   return 0; }
#include <algorithm> #include <bits/stdc++.h> #include <climits> #include <cmath> #include <cstdio> #include <cstring> #include <fstream> #include <iostream> #include <iterator> #include <map> #include <queue> #include <set> #include <stack> #include <stdio.h> #include <string> #include <unordered_map> #include <utility> #include <vector>    using namespace std; 
ifstream fin;  using ll = long long; using ull = unsigned long long; using pii = pair<int, int>; using pll = pair<ll, ll>; using vi = vector<int>; using vll = vector<ll>; using pill = pair<int, ll>; using vvi = vector<vi>;  ll gcd(ll a, ll b) {   ll t;   for (; (t = a % b) != 0;) {     a = b;     b = t;   }   return b; }  ll fast_exp(ll base, ll n, ll m) {   if (n == 0)     return 1;   ll t = fast_exp(base, n / 2, m);   if (n % 2 == 0)     return (t * t) % m;   else     return (((t * t) % m) * base) % m; }  bool is_set(int i, ll mask) { return (mask >> i) & 1; }  int count_bits(ll mask) {   int ans = 0;   for (int i = 0; i < 64; ++i)     if (is_set(i, mask))       ++ans;   return ans; }  int first_bit(ll mask) {   int ret_val = -1;   int i = 0;   while (i < 64)     if (is_set(i++, mask))       return i - 1;   return ret_val; }  
int main() {   fin.open("/home/tom/project/ramdisk/blackbox_5304486_5697460110360576_10_Usenix_RF_1.0_True_MCTS_Classic_True/4yn/ibrahim5253/A-small-practice.in");    int ret_val = 0;    int t;   fin >> t;   for (int i = 1; i <= t; ++i) {     int n, p;     fin >> n >> p;     ll w[n];     for (int i = 0; i < n; ++i)       fin >> w[i];     pair<ll, ll> a[n][p];     for (int i = 0; i < n; ++i) {       for (int j = 0; j < p; ++j) {         ll W;         fin >> W;         ll low = ceil(W / (w[i] * 1.1)), high = W / (w[i] * 0.9);         a[i][j] = make_pair(low, high);       }     }     if (n == 1) {       int ans = 0;       for (int i = 0; i < p; ++i)         if (a[0][i].first <= a[0][i].second)           ans++;       printf("Case #%d: %d\n", i, ans);       continue;     }     int s[p];     for (int i = 0; i < p; ++i)       s[i] = i;     int ans = 0;     do {       int val = 0;       for (int i = 0; i < p; ++i) {         if (a[0][i].first > a[0][i].second ||             a[1][s[i]].first > a[1][s[i]].second)           continue;         if (a[1][s[i]].first >= a[0][i].first &&             a[1][s[i]].first <= a[0][i].second)           val++;         else if (a[0][i].first >= a[1][s[i]].first &&                  a[0][i].first <= a[1][s[i]].second)           val++;       }       ans = max(ans, val);     } while (next_permutation(s, s + p));     printf("Case #%d: %d\n", i, ans);     }   return ret_val; }
#include <algorithm> #include <bits/stdc++.h> #include <bitset> #include <cassert> #include <cctype> #include <climits> #include <cmath> #include <complex> #include <cstdio> #include <cstdlib> #include <cstring> #include <ctime> #include <fstream> #include <functional> #include <iomanip> #include <iostream> #include <iterator> #include <list> #include <map> #include <math.h> #include <numeric> #include <queue> #include <set> #include <sstream> #include <stack> #include <stdio.h> #include <stdlib.h> #include <string> #include <unordered_map> #include <utility> #include <vector>   using namespace std; 
typedef long long LL; typedef set<int> si; typedef long double ld; typedef pair<int, int> ii; typedef long double LD;  ofstream fout;  using ll = long long; using ull = unsigned long long; using pii = pair<int, int>; using pll = pair<ll, ll>; using vi = vector<int>; using vll = vector<ll>; using pill = pair<int, ll>; using vvi = vector<vi>;  ll gcd(ll a, ll b) {   ll t;   while ((t = a % b) != 0) {     a = b;     b = t;   }   return b; }  ll fast_exp(ll base, ll n, ll m) {   if (n == 0)     return 1;   ll t = fast_exp(base, n / 2, m);   if (n % 2 == 0)     return (t * t) % m;   else     return (((t * t) % m) * base) % m; }  bool is_set(int i, ll mask) { return (mask >> i) & 1; }  int solve(ll mask) {   int i = 0;   while (i < 64)     if (is_set(i++, mask))       return i - 1;   return -1; }  
int main() {   fout.open("/home/tom/project/ramdisk/blackbox_5304486_5697460110360576_10_Usenix_RF_1.0_True_MCTS_Classic_True/bennikartefla/ibrahim5253/outer_temp/ibrahim5253/A-small-practice_transformation.out");    ios::sync_with_stdio(0);   int t;   cin >> t;   int i;   for (i = 1; i <= t; ++i) {     int n, p;     cin >> n >> p;     vector<ll> w(n);     for (int i = 0; i < n; ++i)       cin >> w[i];     pair<ll, ll> a[n][p];     for (int i = 0; i < n; ++i) {       for (int j = 0; j < p; ++j) {         ll W;         cin >> W;         ll low = ceil(W / (w[i] * 1.1)), high = W / (w[i] * 0.9);         a[i][j] = make_pair(low, high);       }     }     if (n == 1) {       int ans = 0;       for (int i = 0; i < p; ++i)         if (a[0][i].first <= a[0][i].second)           ans++;       fout << "Case #" << i << ": " << ans << "\n";       continue;     }     int s[p];     for (int i = 0; i < p; ++i)       s[i] = i;     int ans = 0;     do {       int val = 0;       for (int i = 0; i < p; ++i) {         if (a[1][s[i]].first > a[1][s[i]].second)           continue;         else if (a[0][i].first > a[0][i].second)           continue;          if (a[1][s[i]].first >= a[0][i].first &&             a[1][s[i]].first <= a[0][i].second)           val++;         else if (a[0][i].first >= a[1][s[i]].first)           if (a[0][i].first <= a[1][s[i]].second)             val++;       }       ans = max(ans, val);     } while (next_permutation(s, s + p));     fout << "Case #" << i << ": " << ans << "\n";    }   return 0; }
#include <algorithm> #include <bits/stdc++.h> #include <climits> #include <cmath> #include <cstdio> #include <cstring> #include <iostream> #include <iterator> #include <map> #include <queue> #include <set> #include <stack> #include <stdio.h> #include <string> #include <unordered_map> #include <utility> #include <vector>   using namespace std; 
typedef long long LL; typedef pair<int, int> ii;  using ll = long long; using ull = unsigned long long; using pii = pair<int, int>; using pll = pair<ll, ll>; using vi = vector<int>; using vll = vector<ll>; using pill = pair<int, ll>; using vvi = vector<vi>;  inline void zeflbfztvb(ll &a, ll &b, ll &ct) {   a = b;   b = ct; }  ll gcd(ll a, ll b) {   ll ct;   while ((ct = a % b) != 0)     zeflbfztvb(a, b, ct);   return b; }  bool open(int i, ll mask) { return (mask >> i) & 1; }  int do_intjyl_fct(ll mask) {   int i = 0;   while (i < 64) {     if (open(i++, mask))       return i - 1;   }   return -1; }  
int main() {   freopen("/home/seal12/Downloads/ramdisk/blackbox_8294486_5654117850546176_10_Usenix_RF_1.0_True_MCTS_Classic_True/ccsnoopy/ibrahim5253/outer_temp/ibrahim5253/A-small-practice_transformation.out",           "w", stdout);    freopen("/home/seal12/Downloads/ramdisk/blackbox_8294486_5654117850546176_10_Usenix_RF_1.0_True_MCTS_Classic_True/ccsnoopy/ibrahim5253/A-small-practice.in",           "r", stdin);    int ct;   scanf("%d ", &ct);    for (int i = 1; i <= ct; ++i) {     int n, r, o, y, g, b, v;     scanf("%d %d %d %d %d %d %d ", &n, &r, &o, &y, &g, &b, &v);     int ma = n / 2;     cout << "Case #" << i << ": ";     if (b > ma) {       cout << "IMPOSSIBLE\n";       continue;     } else if (r > ma || y > ma) {       cout << "IMPOSSIBLE\n";       continue;     }     vector<pair<int, char>> V;     V.push_back(make_pair(r, 'R')), V.push_back(make_pair(y, 'Y')),         V.push_back(make_pair(b, 'B'));     sort(V.begin(), V.end());     char s[n + 1];     int p = 0;     int a = V[2].first;     while (a--)       s[p] = V[2].second, p = (p + 2) % n, p = (p == 0 ? 1 : p);     a = V[1].first;     while (a--)       s[p] = V[1].second, p = (p + 2) % n, p = (p == 0 ? 1 : p);     a = V[0].first;     while (a--)       s[p] = V[0].second, p = (p + 2) % n, p = (p == 0 ? 1 : p);     for (int i = 0; i < n; ++i)       cout << s[i];     cout << "\n";   }   return 0; }
#include <algorithm> #include <bits/stdc++.h> #include <bitset> #include <cassert> #include <cctype> #include <cmath> #include <complex> #include <cstdio> #include <cstdlib> #include <cstring> #include <ctime> #include <deque> #include <iomanip> #include <iostream> #include <list> #include <map> #include <math.h> #include <numeric> #include <sstream> #include <stack> #include <stdio.h> #include <stdlib.h> #include <string> #include <unordered_map> #include <utility> #include <vector> using namespace std;
typedef long long ll; typedef pair<int, int> ii; typedef pair<int, int> PII; typedef set<int> si; typedef vector<vector<int>> vvi;  using LL = long long; using pii = pair<int, int>;  int T, tc;  
int main() {    scanf("%d ", &T);   for (; T--;) {     vector<vector<pii>> q;     vector<int> R;     int n, p;     scanf("%d %d ", &n, &p);     for (int i = 0, x; i < n; i++)       scanf("%d ", &x), R.push_back(x);     int mx = p;     int i;     for (i = 0; i < n; i++) {       q.push_back(vector<pii>());       for (int s = 0, x; s < p; s++) {         scanf("%d ", &x);         int a = ceil(1 / 1.1 * x / R[i]), b = floor(1 / 0.9 * x / R[i]);          if (a <= b)           q.back().emplace_back(a, b);       }       sort(q[i].begin(), q[i].end());     }     int get = 0;     while (true) {       int mnv = 0, mxv = 1e9, mnid, mxid, flag = 0;       for (int i = 0; i < n; i++)         if (q[i].size()) {           auto x = q[i].back();           if (x.first > mnv)             mnv = x.first, mnid = i;           if (x.second < mxv)             mxv = x.second, mxid = i;         } else           flag = 1;       if (flag)         break;        if (mnv <= mxv) {         get++;         for (int i = 0; i < n; i++)           q[i].pop_back();       } else {         q[mnid].pop_back();       }     }     cout << "Case #" << ++tc << ": " << get << "\n";   }   return 0; }
#include <algorithm> #include <bits/stdc++.h> #include <bitset> #include <cassert> #include <climits> #include <cmath> #include <complex> #include <cstdio> #include <cstring> #include <ctime> #include <deque> #include <functional> #include <iomanip> #include <iostream> #include <list> #include <math.h> #include <numeric> #include <queue> #include <sstream> #include <stack> #include <stdio.h> #include <stdlib.h> #include <string> #include <unordered_map> #include <utility> #include <vector> using namespace std;
const int MOD = 1000000007; typedef long long ll;  typedef pair<ll, ll> pll; typedef vector<int> vi; typedef vector<vi> vvi; typedef vector<ll> vll; typedef set<int> si; typedef map<int, int> mii;  const int N = 52; int t, a[N][N], needed[N], id[N][N], uniq; pair<int, int> interval[N][N], intervalByID[N * N + 10];  int n;  int cap[1002 ]        [1002 ];  int path[1002 ]; int pathLength; bool visited[1002 ];  bool intersect(pair<int, int> a, pair<int, int> b) {   return (a.first >= b.first and a.first <= b.second) or          (a.second >= b.first and a.second <= b.second); }   int getPath(int StartNode, int TargetNode, int curLen, int maxcap,             pair<int, int> currentInterval) {   path[curLen] = StartNode;   if (StartNode == TargetNode) {     pathLength = curLen + 1;     return maxcap;   }    int ret = 0;   visited[StartNode] = true;    for (int i = 0; i <= n + 1; i++) {     if (visited[i] || cap[StartNode][i] <= 0)       continue;      pair<int, int> pos = intervalByID[i];     if (i and i <= n) {       if (!intersect(interval[pos.first][pos.second], currentInterval))         continue;     }      ret = getPath(i, TargetNode, curLen + 1, min(maxcap, cap[StartNode][i]),                   make_pair(max(currentInterval.first,                                 interval[pos.first][pos.second].first),                             min(currentInterval.second,                                 interval[pos.first][pos.second].second)));      if (ret > 0)       break;    }   return ret; }  int maxFlow(int src, int sink, int numberOfNodes) {   int total_flow = 0;   n = numberOfNodes;    while (1) {     memset(visited, 0, sizeof visited);     int newflow =         getPath(src, sink, 0, 1000000000, make_pair(-1000000000, 1000000000));      if (!newflow)       break;       for (int i = (1); i <= (int)(pathLength - 1); ++i) {       int m = path[i - 1], n = path[i];        cap[m][n] -= newflow;       cap[n][m] += newflow;      }     total_flow += newflow;   }    return total_flow; }  bool check(int i, int j) {   int mx = a[i][j] / needed[i] * needed[i];   if (a[i][j] + 1e-6 >= 0.9 * mx and a[i][j] - 1e-6 <= 1.1 * mx) {     return true;   }   mx = a[i][j] / needed[i] * needed[i] - needed[i];   if (a[i][j] + 1e-6 >= 0.9 * mx and a[i][j] - 1e-6 <= 1.1 * mx)     return true;   mx = a[i][j] / needed[i] * needed[i] + needed[i];   if (a[i][j] + 1e-6 >= 0.9 * mx and a[i][j] - 1e-6 <= 1.1 * mx)     return true;   return false; }  
int main() {   ios::sync_with_stdio(false);    freopen("/home/tom/project/ramdisk/blackbox_5304486_5697460110360576_2_Usenix_RF_1.0_True_MCTS_Classic_True/ibrahim5253/KhaleD/A-small-practice.in",           "r", stdin);    cin >> t;   for (int test = (1); test <= (int)(t); ++test) {     int n, m;     cin >> n >> m;     for (int i = (1); i <= (int)(n); ++i)       cin >> needed[i];     {       int i = (1);       while (i <= (int)(n)) {         for (int j = (1); j <= (int)(m); ++j) {           cin >> a[i][j];           interval[i][j] = make_pair(ceil(a[i][j] / 1.1 / needed[i]),                                      a[i][j] / 0.9 / needed[i]);           id[i][j] = ++uniq;           intervalByID[id[i][j]] = make_pair(i, j);         }         ++i;       }     }     intervalByID[0] = make_pair(-1000000000, 1000000000);      for (int i = (1); i <= (int)(n - 1); ++i) {       int j = (1);       for (; j <= (int)(m);) {         if (check(i, j))           for (int s = (1); s <= (int)(m); ++s)             if (check(i + 1, s)) {               if (intersect(interval[i][j], interval[i + 1][s]))                 cap[id[i][j]][id[i + 1][s]] = 1;             }         ++j;       }     }     for (int j = (1); j <= (int)(m); ++j) {       if (check(1, j))         cap[0][id[1][j]] = 1;       if (check(n, j))         cap[id[n][j]][n * m + 1] = 1;     }     cout << "Case #" << test << ": " << maxFlow(0, n * m + 1, n * m) << "\n";      uniq = 0;     memset(cap, 0, sizeof cap);   }   return 0; } 
#include <algorithm> #include <cctype> #include <climits> #include <cmath> #include <complex> #include <cstdio> #include <cstring> #include <ctime> #include <deque> #include <fstream> #include <functional> #include <iomanip> #include <iostream> #include <iterator> #include <list> #include <map> #include <math.h> #include <numeric> #include <queue> #include <set> #include <sstream> #include <stack> #include <stdio.h> #include <unordered_map> #include <utility> #include <vector>  using namespace std; 
typedef set<int> si; typedef long long ll; typedef pair<int, int> pii; typedef unsigned long long ull; typedef vector<int> VI; typedef long double ld; typedef vector<vector<int>> vvi;  const int INF = 1000000000;  pair<int, int> adj[50 + 1][50 + 1]; int cnt[50 + 1], cur[50 + 1]; int r[50 + 1], q[50 + 1]; int n, p;  inline void nqgskrhgpv(int &N, int &i) {   adj[i][cnt[i]++] = make_pair(((q[N] * 9 + 9) / 10 + r[i] - 1) / r[i],                                ((q[N] * 10) / 9) / r[i]); }  inline void oglcvuiwct(int &N, int &i) { nqgskrhgpv(N, i); }  
int main() {   ios::sync_with_stdio(false);    int t, i, N, flg, get, maxl, maxi, minr, mini;   scanf("%d", &t);   for (int c = 0; c < t; c++) {     memset(cnt, 0, sizeof(cnt));     scanf("%d %d", &n, &p);     for (i = 0; i < n; i++) {       scanf("%d", &r[i]);     }     for (i = 0; i < n; i++) {       for (N = 0; N < p; N++) {         scanf("%d", &q[N]);       }       sort(q, q + p);       for (N = 0; N < p; N++) {         if (((q[N] * 9 + 9) / 10 + r[i] - 1) / r[i] <= ((q[N] * 10) / 9) / r[i])           oglcvuiwct(N, i);       }     }     memset(cur, 0, sizeof(cur));     flg = 1;     get = 0;     for (; flg == 1;) {       for (i = 0; i < n; i++) {         if (cur[i] >= cnt[i]) {           flg = 0;           break;         }       }       if (flg == 0) {         break;       }       maxl = -1;       maxi = -1;       minr = 1000000000;       mini = -1;       for (i = 0; i < n; i++) {         if (maxl < adj[i][cur[i]].first) {           maxl = adj[i][cur[i]].first;           maxi = i;         }         if (minr > adj[i][cur[i]].second) {           minr = adj[i][cur[i]].second;           mini = i;         }       }       if (maxl <= minr) {         get++;         for (i = 0; i < n; i++) {           cur[i]++;         }       } else {         cur[mini]++;       }     }     printf("Case #%d: %d\n", c + 1, get);   }   return 0; }
#include <algorithm> #include <climits> #include <cmath> #include <cstdio> #include <cstring> #include <iostream> #include <iterator> #include <map> #include <queue> #include <set> #include <stack> #include <stdio.h> #include <string> #include <unordered_map> #include <utility> #include <vector>   using namespace std; 
using ll = long long; using ull = unsigned long long; using pii = pair<int, int>; using pll = pair<ll, ll>; using vi = vector<int>; using vll = vector<ll>; using pill = pair<int, ll>; using vvi = vector<vi>;  ll fast_exp(ll base, ll tt, ll gqxl_Var) {   if (tt == 0)     return 1;   ll t = fast_exp(base, tt / 2, gqxl_Var);   if (tt % 2 == 0)     return (t * t) % gqxl_Var;   else     return (((t * t) % gqxl_Var) * base) % gqxl_Var; }  bool is_set(int mtvi_Var, ll phcl_Var) { return (phcl_Var >> mtvi_Var) & 1; }  int count_bits(ll phcl_Var) {   int ans = 0;   for (int mtvi_Var = 0; mtvi_Var < 64; ++mtvi_Var)     if (is_set(mtvi_Var, phcl_Var))       ++ans;   return ans; }  int do_intwjp_fct(ll phcl_Var) {   int ret_val = -1;   int mtvi_Var = 0;   while (mtvi_Var < 64)     if (is_set(mtvi_Var++, phcl_Var))       return mtvi_Var - 1;   return ret_val; }  inline void lpukluhqfp(int &tt, ll w[tt]) {   int mtvi_Var = 0;   while (mtvi_Var < tt) {     scanf("%lld ", &w[mtvi_Var]);     ++mtvi_Var;   } }  
int main() {    int t;   scanf("%d ", &t);   for (int mtvi_Var = 1; mtvi_Var <= t; ++mtvi_Var) {     int tt, p;     scanf("%d %d ", &tt, &p);     ll w[tt];     lpukluhqfp(tt, w);     pair<ll, ll> wkmp_Var[tt][p];     for (int mtvi_Var = 0; mtvi_Var < tt; ++mtvi_Var) {       int j;       for (j = 0; j < p; ++j) {         ll W;         scanf("%lld ", &W);         ll low = ceil(W / (w[mtvi_Var] * 1.1)), high = W / (w[mtvi_Var] * 0.9);         wkmp_Var[mtvi_Var][j] = make_pair(low, high);       }     }     if (tt == 1) {       int ans = 0;       for (int mtvi_Var = 0; mtvi_Var < p; ++mtvi_Var)         if (wkmp_Var[0][mtvi_Var].first <= wkmp_Var[0][mtvi_Var].second)           ans++;       printf("Case #%d: %d\n", mtvi_Var, ans);       continue;     }     int s[p];     for (int mtvi_Var = 0; mtvi_Var < p; ++mtvi_Var)       s[mtvi_Var] = mtvi_Var;     int ans = 0;     do {       int val = 0;       {         int mtvi_Var = 0;         while (mtvi_Var < p) {           if (wkmp_Var[1][s[mtvi_Var]].first >               wkmp_Var[1][s[mtvi_Var]].second) {             ++mtvi_Var;             continue;           } else if (wkmp_Var[0][mtvi_Var].first >                      wkmp_Var[0][mtvi_Var].second) {             ++mtvi_Var;             continue;           }            if (wkmp_Var[1][s[mtvi_Var]].first >= wkmp_Var[0][mtvi_Var].first &&               wkmp_Var[1][s[mtvi_Var]].first <= wkmp_Var[0][mtvi_Var].second)             val++;           else if (wkmp_Var[0][mtvi_Var].first >=                        wkmp_Var[1][s[mtvi_Var]].first &&                    wkmp_Var[0][mtvi_Var].first <=                        wkmp_Var[1][s[mtvi_Var]].second)             val++;           ++mtvi_Var;         }       }       ans = max(ans, val);     } while (next_permutation(s, s + p));     printf("Case #%d: %d\n", mtvi_Var, ans);    }   return 0; }
#include <algorithm> #include <bits/stdc++.h> #include <climits> #include <cmath> #include <cstdio> #include <cstring> #include <iostream> #include <iterator> #include <map> #include <queue> #include <set> #include <stack> #include <stdio.h> #include <string> #include <unordered_map> #include <utility> #include <vector>   using namespace std; 
using ll = long long; using ull = unsigned long long; using pii = pair<int, int>; using pll = pair<ll, ll>; using vi = vector<int>; using vll = vector<ll>; using pill = pair<int, ll>; using vvi = vector<vi>;  bool is_set(int i, ll mask) { return (mask >> i) & 1; }  
int main() {   freopen("/home/tom/project/ramdisk/blackbox_5304486_5697460110360576_11_Usenix_RF_1.0_True_MCTS_Classic_True/jiian/ibrahim5253/A-small-practice.in",           "r", stdin);    freopen("/home/tom/project/ramdisk/blackbox_5304486_5697460110360576_11_Usenix_RF_1.0_True_MCTS_Classic_True/jiian/ibrahim5253/outer_temp/ibrahim5253/A-small-practice_transformation.out",           "w", stdout);    int cas;   cin >> cas;   {     int i = 1;     while (i <= cas) {       int n, p;       cin >> n >> p;       ll w[n];       for (int i = 0; i < n; ++i)         cin >> w[i];       pair<ll, ll> r[n][p];       {         int i = 0;         for (; i < n;) {           for (int j = 0; j < p; ++j) {             ll W;             cin >> W;             ll low = ceil(W / (w[i] * 1.1)), high = W / (w[i] * 0.9);             r[i][j] = make_pair(low, high);           }           ++i;         }       }       if (n == 1) {         int ans = 0;         for (int i = 0; i < p; ++i)           if (r[0][i].first <= r[0][i].second)             ans++;         printf("Case #%d: %d\n", i, ans);         ++i;         continue;       }       int jzri_Var[p];       for (int i = 0; i < p; ++i)         jzri_Var[i] = i;       int ans = 0;       do {         int val = 0;         for (int i = 0; i < p; ++i) {           if (r[1][jzri_Var[i]].first > r[1][jzri_Var[i]].second)             continue;           else if (r[0][i].first > r[0][i].second)             continue;            if (r[1][jzri_Var[i]].first >= r[0][i].first &&               r[1][jzri_Var[i]].first <= r[0][i].second)             val++;           else if (r[0][i].first >= r[1][jzri_Var[i]].first &&                    r[0][i].first <= r[1][jzri_Var[i]].second)             val++;         }         ans = max(ans, val);       } while (next_permutation(jzri_Var, jzri_Var + p));       printf("Case #%d: %d\n", i, ans);        ++i;     }   }   return 0; }
#include <algorithm> #include <cassert> #include <climits> #include <cmath> #include <complex> #include <cstdio> #include <cstdlib> #include <cstring> #include <ctime> #include <deque> #include <fstream> #include <functional> #include <iomanip> #include <iostream> #include <iterator> #include <list> #include <map> #include <math.h> #include <queue> #include <set> #include <sstream> #include <stack> #include <stdio.h> #include <stdlib.h> #include <string> #include <unordered_map> #include <utility> #include <vector>   using namespace std; 
const int mod = 1000000007; const long double PI = 3.1415926535897932384626433832795; using ll = long long; using ull = unsigned long long; using pii = pair<int, int>; using pll = pair<ll, ll>; using vi = vector<int>; using vll = vector<ll>; using pill = pair<int, ll>; using vvi = vector<vi>;  ll get(ll a, ll b) {   ll t;   for (; (t = a % b) != 0;) {     a = b;     b = t;   }   return b; }  ll fast_exp(ll base, ll n, ll m) {   if (n == 0)     return 1;   ll t = fast_exp(base, n / 2, m);   if (n % 2 == 0)     return (t * t) % m;   else {     return (((t * t) % m) * base) % m;   } }  bool is_set(int i, ll d) { return (d >> i) & 1; }  int solve(ll d) {   int ans = 0;   int i;   for (i = 0; i < 64; ++i)     if (is_set(i, d))       ++ans;   return ans; }  int first_bit(ll d) {   int i = 0;   while (i < 64)     if (is_set(i++, d))       return i - 1;   return -1; }  
int main() {    int t;   cin >> t;   for (int i = 1; i <= t; ++i) {     int n, p;     cin >> n >> p;     vector<ll> w(n);     for (int i = 0; i < n; ++i) {       cin >> w[i];     }     pair<ll, ll> a[n][p];     for (int i = 0; i < n; ++i) {       int j;       for (j = 0; j < p; ++j) {         ll W;         cin >> W;         ll low = ceil(W / (w[i] * 1.1)), high = W / (w[i] * 0.9);         a[i][j] = make_pair(low, high);       }     }     if (n == 1) {       int ans = 0;       for (int i = 0; i < p; ++i)         if (a[0][i].first <= a[0][i].second)           ans++;       printf("Case #%d: %d\n", i, ans);       continue;     }     int s[p];     for (int i = 0; i < p; ++i)       s[i] = i;     int ans = 0;     do {       int val = 0;       for (int i = 0; i < p; ++i) {         if (a[0][i].first > a[0][i].second ||             a[1][s[i]].first > a[1][s[i]].second)           continue;         if (a[0][i].first >= a[1][s[i]].first &&                 a[0][i].first <= a[1][s[i]].second ||             a[1][s[i]].first >= a[0][i].first &&                 a[1][s[i]].first <= a[0][i].second) {           val++;         }       }       ans = max(ans, val);     } while (next_permutation(s, s + p));     printf("Case #%d: %d\n", i, ans);    }   return 0; }
#include <algorithm> #include <bitset> #include <cctype> #include <climits> #include <cmath> #include <cstdio> #include <cstdlib> #include <cstring> #include <ctime> #include <iomanip> #include <iostream> #include <iterator> #include <map> #include <math.h> #include <numeric> #include <queue> #include <set> #include <sstream> #include <stack> #include <stdio.h> #include <string> #include <unordered_map> #include <utility> #include <vector>   using namespace std; 
const long double PI = 3.1415926535897932384626433832795; typedef vector<int> VI; typedef long long LL; typedef long double ld; typedef pair<int, int> PII; typedef long double LD;  using ll = long long; using ull = unsigned long long; using pii = pair<int, int>; using pll = pair<ll, ll>; using vi = vector<int>; using vll = vector<ll>; using pill = pair<int, ll>; using vvi = vector<vi>;  ll gcd(ll a, ll b) {   ll t;   while ((t = a % b) != 0) {     a = b;     b = t;   }   return b; }  ll fast_exp(ll d, ll n, ll m) {   if (n == 0)     return 1;   ll t = fast_exp(d, n / 2, m);   if (n % 2 == 0)     return (t * t) % m;   else     return (((t * t) % m) * d) % m; }  bool get(int i, ll mask) { return (mask >> i) & 1; }  int count_bits(ll mask) {   int ans = 0;   for (int i = 0; i < 64; ++i)     if (get(i, mask))       ++ans;   return ans; }  int first_bit(ll mask) {   int i = 0;   while (i < 64) {     if (get(i++, mask))       return i - 1;   }   return -1; }  
int main() {   int ret_val = 0;   freopen("/home/tom/project/ramdisk/blackbox_5304486_5697460110360576_11_Usenix_RF_1.0_True_MCTS_Classic_True/lazyBit/ibrahim5253/A-small-practice.in",           "r", stdin);   int t;   scanf("%d ", &t);   for (int i = 1; i <= t; ++i) {     int n, p;     scanf("%d %d ", &n, &p);     vector<ll> w(n);     for (int i = 0; i < n; ++i)       scanf("%lld ", &w[i]);     pair<ll, ll> a[n][p];     for (int i = 0; i < n; ++i) {       for (int j = 0; j < p; ++j) {         ll W;         scanf("%lld ", &W);         ll low = ceil(W / (w[i] * 1.1)), high = W / (w[i] * 0.9);         a[i][j] = make_pair(low, high);       }     }     if (n == 1) {       int ans = 0;       for (int i = 0; i < p; ++i) {         if (a[0][i].first <= a[0][i].second)           ans++;       }       printf("Case #%d: %d\n", i, ans);       continue;     }     int s[p];     for (int i = 0; i < p; ++i)       s[i] = i;     int ans = 0;     do {       int val = 0;       for (int i = 0; i < p; ++i) {         if (a[0][i].first > a[0][i].second ||             a[1][s[i]].first > a[1][s[i]].second)           continue;         if (a[1][s[i]].first >= a[0][i].first &&             a[1][s[i]].first <= a[0][i].second)           val++;         else if (a[0][i].first >= a[1][s[i]].first &&                  a[0][i].first <= a[1][s[i]].second)           val++;       }       ans = max(ans, val);     } while (next_permutation(s, s + p));     printf("Case #%d: %d\n", i, ans);     }   return ret_val; }
#include <algorithm> #include <bits/stdc++.h> #include <bitset> #include <cassert> #include <cctype> #include <climits> #include <cmath> #include <complex> #include <cstdio> #include <cstring> #include <deque> #include <fstream> #include <functional> #include <iomanip> #include <iostream> #include <iterator> #include <list> #include <map> #include <math.h> #include <numeric> #include <queue> #include <set> #include <sstream> #include <stack> #include <stdio.h> #include <stdlib.h> #include <string> #include <unordered_map> #include <utility> #include <vector>   using namespace std; 
typedef long double ld; typedef pair<int, int> ii; typedef pair<int, int> PII;  using ll = long long; using ull = unsigned long long; using pii = pair<int, int>; using pll = pair<ll, ll>; using vi = vector<int>; using vll = vector<ll>; using pill = pair<int, ll>; using vvi = vector<vi>;  ll gcd(ll a, ll b) {   ll t;   while ((t = a % b) != 0) {     a = b;     b = t;   }   return b; }  ll fast_exp(ll x, ll n, ll N) {   if (n == 0)     return 1;   ll t = fast_exp(x, n / 2, N);   if (n % 2 == 0)     return (t * t) % N;   else     return (((t * t) % N) * x) % N; }  bool is_set(int i, ll mask) { return (mask >> i) & 1; }  int first_bit(ll mask) {   int i = 0;   while (i < 64)     if (is_set(i++, mask))       return i - 1;    return -1; }  
int main() {   ios::sync_with_stdio(0);   int t;   cin >> t;   for (int i = 1; i <= t; ++i) {     int n, p;     cin >> n >> p;     ll w[n];     for (int i = 0; i < n; ++i)       cin >> w[i];     pair<ll, ll> a[n][p];     {       int i = 0;       while (i < n) {         for (int j = 0; j < p; ++j) {           ll W;           cin >> W;           ll low = ceil(W / (w[i] * 1.1)), high = W / (w[i] * 0.9);           a[i][j] = make_pair(low, high);         }         ++i;       }     }     if (n == 1) {       int ans = 0;       {         int i = 0;         while (i < p) {           if (a[0][i].first <= a[0][i].second)             ans++;           ++i;         }       }       cout << "Case #" << i << ": " << ans << "\n";       continue;     }     int s[p];     for (int i = 0; i < p; ++i)       s[i] = i;     int ans = 0;     do {       int val = 0;       for (int i = 0; i < p; ++i) {         if (a[0][i].first > a[0][i].second ||             a[1][s[i]].first > a[1][s[i]].second)           continue;         if (a[0][i].first >= a[1][s[i]].first &&                 a[0][i].first <= a[1][s[i]].second ||             a[1][s[i]].first >= a[0][i].first &&                 a[1][s[i]].first <= a[0][i].second)           val++;       }       ans = max(ans, val);     } while (next_permutation(s, s + p));     cout << "Case #" << i << ": " << ans << "\n";    }   return 0; }
#include <algorithm> #include <bits/stdc++.h> #include <cassert> #include <cctype> #include <climits> #include <cmath> #include <cstdio> #include <cstring> #include <ctime> #include <fstream> #include <functional> #include <iostream> #include <iterator> #include <map> #include <numeric> #include <queue> #include <set> #include <sstream> #include <stack> #include <stdlib.h> #include <string> #include <unordered_map> #include <utility> #include <vector>   using namespace std;  
ofstream fout;  using ll = long long; using ull = unsigned long long; using pii = pair<int, int>; using pll = pair<ll, ll>; using vi = vector<int>; using vll = vector<ll>; using pill = pair<int, ll>; using vvi = vector<vi>;  
int main() {   fout.open("/home/tom/project/ramdisk/blackbox_5304486_5697460110360576_10_Usenix_RF_1.0_True_MCTS_Classic_True/okaduki/ibrahim5253/outer_temp/ibrahim5253/A-small-practice_transformation.out");    ios::sync_with_stdio(0);   int t;   cin >> t;   for (int i = 1; i <= t; ++i) {     int n, p;     cin >> n >> p;     ll w[n];     for (int i = 0; i < n; ++i)       cin >> w[i];     pair<ll, ll> a[n][p];     for (int i = 0; i < n; ++i) {       {         int j = 0;         for (; j < p;) {           ll W;           cin >> W;           ll low = ceil(W / (w[i] * 1.1)), high = W / (w[i] * 0.9);           a[i][j] = make_pair(low, high);           ++j;         }       }     }     if (n == 1) {       int ans = 0;       for (int i = 0; i < p; ++i)         if (a[0][i].first <= a[0][i].second)           ans++;       fout << "Case #" << i << ": " << ans << "\n";       continue;     }     int s[p];     for (int i = 0; i < p; ++i)       s[i] = i;     int ans = 0;     do {       int val = 0;       {         int i = 0;         while (i < p) {           if (a[0][i].first > a[0][i].second ||               a[1][s[i]].first > a[1][s[i]].second) {             ++i;             continue;           }           if (a[0][i].first >= a[1][s[i]].first &&                   a[0][i].first <= a[1][s[i]].second ||               a[1][s[i]].first >= a[0][i].first &&                   a[1][s[i]].first <= a[0][i].second)             val++;           ++i;         }       }       ans = max(ans, val);     } while (next_permutation(s, s + p));     fout << "Case #" << i << ": " << ans << "\n";    }   return 0; }
#include <algorithm> #include <bits/stdc++.h> #include <bitset> #include <cassert> #include <cctype> #include <climits> #include <cmath> #include <cstdio> #include <cstring> #include <deque> #include <fstream> #include <iostream> #include <iterator> #include <list> #include <map> #include <queue> #include <set> #include <sstream> #include <stack> #include <stdlib.h> #include <string> #include <unordered_map> #include <utility> #include <vector>    using namespace std;  
ifstream fin;  using ll = long long; using ull = unsigned long long; using pii = pair<int, int>; using pll = pair<ll, ll>; using vi = vector<int>; using vll = vector<ll>; using pill = pair<int, ll>; using vvi = vector<vi>;  ll gcd(ll a, ll b) {   ll t;   while ((t = a % b) != 0) {     a = b;     b = t;   }   return b; }  bool solve(int i, ll mask) { return (mask >> i) & 1; }  int count_bits(ll mask) {   int ans = 0;   for (int i = 0; i < 64; ++i)     if (solve(i, mask)) {       ++ans;     }   return ans; }  int first_bit(ll mask) {   int i = 0;   while (i < 64)     if (solve(i++, mask))       return i - 1;   return -1; }  
int main() {   int ret_val = 0;    fin.open("/home/tom/project/ramdisk/blackbox_5304486_5697460110360576_10_Usenix_RF_1.0_True_MCTS_Classic_True/sammyMaX/ibrahim5253/A-small-practice.in");   int t;   fin >> t;   for (int i = 1; i <= t; ++i) {     int n, p;     fin >> n >> p;     ll w[n];     for (int i = 0; i < n; ++i)       fin >> w[i];     pair<ll, ll> a[n][p];     for (int i = 0; i < n; ++i) {       for (int j = 0; j < p; ++j) {         ll W;         fin >> W;         ll low = ceil(W / (w[i] * 1.1)), high = W / (w[i] * 0.9);         a[i][j] = make_pair(low, high);       }     }     if (n == 1) {       int ans = 0;       for (int i = 0; i < p; ++i)         if (a[0][i].first <= a[0][i].second)           ans++;       cout << "Case #" << i << ": " << ans << "\n";       continue;     }     int s[p];     for (int i = 0; i < p; ++i)       s[i] = i;     int ans = 0;     do {       int val = 0;       for (int i = 0; i < p; ++i) {         if (a[0][i].first > a[0][i].second ||             a[1][s[i]].first > a[1][s[i]].second)           continue;         if (a[0][i].first >= a[1][s[i]].first &&                 a[0][i].first <= a[1][s[i]].second ||             a[1][s[i]].first >= a[0][i].first &&                 a[1][s[i]].first <= a[0][i].second)           val++;       }       ans = max(ans, val);     } while (next_permutation(s, s + p));     cout << "Case #" << i << ": " << ans << "\n";     }   return ret_val; }
#include <algorithm> #include <bitset> #include <climits> #include <cmath> #include <cstdio> #include <cstring> #include <iostream> #include <iterator> #include <map> #include <queue> #include <set> #include <stack> #include <stdio.h> #include <string> #include <unordered_map> #include <utility> #include <vector>   using namespace std; 
using ll = long long; using ull = unsigned long long; using pii = pair<int, int>; using pll = pair<ll, ll>; using vi = vector<int>; using vll = vector<ll>; using pill = pair<int, ll>; using vvi = vector<vi>;  ll readData(ll d, ll argv) {   ll t;   while ((t = d % argv) != 0) {     d = argv;     argv = t;   }   return argv; }  ll solve(ll base, ll left_bound, ll argc) {   if (left_bound == 0)     return 1;   ll t = solve(base, left_bound / 2, argc);   if (left_bound % 2 == 0)     return (t * t) % argc;   else     return (((t * t) % argc) * base) % argc; }  bool is_set(int i, ll mask) { return (mask >> i) & 1; }  int do_intmhy_fct(ll mask) {   int right_bound = 0;   for (int i = 0; i < 64; ++i)     if (is_set(i, mask))       ++right_bound;   return right_bound; }  int first_bit(ll mask) {   int i = 0;   while (i < 64)     if (is_set(i++, mask))       return i - 1;   return -1; }  
int main() {   freopen("/home/tom/project/ramdisk/blackbox_5304486_5697460110360576_11_Usenix_RF_1.0_True_MCTS_Classic_True/sdya/ibrahim5253/A-small-practice.in",           "r", stdin);    freopen("/home/tom/project/ramdisk/blackbox_5304486_5697460110360576_11_Usenix_RF_1.0_True_MCTS_Classic_True/sdya/ibrahim5253/outer_temp/ibrahim5253/A-small-practice_transformation.out",           "w", stdout);    int t;   cin >> t;   for (int i = 1; i <= t; ++i) {     int left_bound, p;     cin >> left_bound >> p;     vector<ll> w(left_bound);     for (int i = 0; i < left_bound; ++i)       cin >> w[i];     pair<ll, ll> d[left_bound][p];     for (int i = 0; i < left_bound; ++i) {       for (int test = 0; test < p; ++test) {         ll W;         cin >> W;         ll low = ceil(W / (w[i] * 1.1)), high = W / (w[i] * 0.9);         d[i][test] = make_pair(low, high);       }     }     if (left_bound == 1) {       int right_bound = 0;       for (int i = 0; i < p; ++i)         if (d[0][i].first <= d[0][i].second)           right_bound++;       printf("Case #%d: %d\n", i, right_bound);       continue;     }     int s[p];     for (int i = 0; i < p; ++i)       s[i] = i;     int right_bound = 0;     do {       int val = 0;       for (int i = 0; i < p; ++i) {         if (d[1][s[i]].first > d[1][s[i]].second)           continue;         else if (d[0][i].first > d[0][i].second)           continue;          if (d[1][s[i]].first >= d[0][i].first &&             d[1][s[i]].first <= d[0][i].second)           val++;         else if (d[0][i].first >= d[1][s[i]].first &&                  d[0][i].first <= d[1][s[i]].second)           val++;       }       right_bound = max(right_bound, val);     } while (next_permutation(s, s + p));     printf("Case #%d: %d\n", i, right_bound);    }   return 0; }
#include <algorithm> #include <climits> #include <cmath> #include <cstdio> #include <cstring> #include <iostream> #include <iterator> #include <map> #include <queue> #include <set> #include <stack> #include <stdio.h> #include <string> #include <unordered_map> #include <utility> #include <vector>   using namespace std;  
typedef pair<int, int> ii; typedef vector<int> VI;  using ll = long long; using ull = unsigned long long; using pii = pair<int, int>; using pll = pair<ll, ll>; using vi = vector<int>; using vll = vector<ll>; using pill = pair<int, ll>; using vvi = vector<vi>;  inline void bpxwmtomsx(ll &a, ll &b, ll &t) {   a = b;   b = t; }  ll gcd(ll a, ll b) {   ll t;   while ((t = a % b) != 0)     bpxwmtomsx(a, b, t);   return b; }  bool is_set(int i, ll mask) { return (mask >> i) & 1; }  int count_bits(ll mask) {   int ans = 0;   for (int i = 0; i < 64; ++i)     if (is_set(i, mask))       ++ans;   return ans; }  int first_bit(ll mask) {   int ret_val = -1;   int i = 0;   while (i < 64)     if (is_set(i++, mask))       return i - 1;   return ret_val; }  
int main() {   freopen("/home/tom/project/ramdisk/blackbox_5304486_5697460110360576_10_Usenix_RF_1.0_True_MCTS_Classic_True/Tashi711/ibrahim5253/outer_temp/ibrahim5253/A-small-practice_transformation.out",           "w", stdout);    int t;   cin >> t;   for (int i = 1; i <= t; ++i) {     int n, p;     cin >> n >> p;     vector<ll> w(n);     for (int i = 0; i < n; ++i)       cin >> w[i];     pair<ll, ll> a[n][p];     for (int i = 0; i < n; ++i) {       for (int j = 0; j < p; ++j) {         ll W;         cin >> W;         ll low = ceil(W / (w[i] * 1.1)), high = W / (w[i] * 0.9);         a[i][j] = make_pair(low, high);       }     }     if (n == 1) {       int ans = 0;       for (int i = 0; i < p; ++i) {         if (a[0][i].first <= a[0][i].second)           ans++;       }       printf("Case #%d: %d\n", i, ans);       continue;     }     int s[p];     for (int i = 0; i < p; ++i)       s[i] = i;     int ans = 0;     do {       int val = 0;       {         int i = 0;         for (; i < p;) {           if (a[1][s[i]].first > a[1][s[i]].second) {             ++i;             continue;           } else if (a[0][i].first > a[0][i].second) {             ++i;             continue;           }            if (a[1][s[i]].first >= a[0][i].first &&               a[1][s[i]].first <= a[0][i].second)             val++;           else if (a[0][i].first >= a[1][s[i]].first &&                    a[0][i].first <= a[1][s[i]].second)             val++;           ++i;         }       }       ans = max(ans, val);     } while (next_permutation(s, s + p));     printf("Case #%d: %d\n", i, ans);     }   return 0; }
#include <algorithm> #include <bitset> #include <cassert> #include <cctype> #include <climits> #include <cmath> #include <complex> #include <cstdio> #include <cstring> #include <ctime> #include <fstream> #include <functional> #include <iomanip> #include <iostream> #include <iterator> #include <list> #include <map> #include <numeric> #include <queue> #include <set> #include <sstream> #include <stack> #include <stdio.h> #include <stdlib.h> #include <string> #include <unordered_map> #include <utility> #include <vector>   using namespace std; 
const int MOD = 1000000007;  using ll = long long; using ull = unsigned long long; using pii = pair<int, int>; using pll = pair<ll, ll>; using vi = vector<int>; using vll = vector<ll>; using pill = pair<int, ll>; using vvi = vector<vi>;  ll solve(ll a, ll b) {   ll t;   while ((t = a % b) != 0) {     a = b;     b = t;   }   return b; }  ll fast_exp(ll tc, ll n, ll N) {   if (n == 0)     return 1;   ll t = fast_exp(tc, n / 2, N);   if (n % 2 == 0)     return (t * t) % N;   else     return (((t * t) % N) * tc) % N; }  bool is_set(int i, ll d) { return (d >> i) & 1; }  int count_bits(ll d) {   int ans = 0;   {     int i = 0;     while (i < 64) {       if (is_set(i, d))         ++ans;       ++i;     }   }   return ans; }  int first_bit(ll d) {   int i = 0;   while (i < 64)     if (is_set(i++, d))       return i - 1;   return -1; }  inline void grkafoojpu(int &n, ll w[n]) {   int i = 0;   while (i < n) {     cin >> w[i];     ++i;   } }  
int main() {    int t;   cin >> t;   for (int i = 1; i <= t; ++i) {     int n, p;     cin >> n >> p;     ll w[n];     grkafoojpu(n, w);     pair<ll, ll> a[n][p];     for (int i = 0; i < n; ++i) {       for (int j = 0; j < p; ++j) {         ll W;         cin >> W;         ll low = ceil(W / (w[i] * 1.1)), high = W / (w[i] * 0.9);         a[i][j] = make_pair(low, high);       }     }     if (n == 1) {       int ans = 0;       for (int i = 0; i < p; ++i)         if (a[0][i].first <= a[0][i].second)           ans++;       printf("Case #%d: %d\n", i, ans);       continue;     }     int s[p];     for (int i = 0; i < p; ++i)       s[i] = i;     int ans = 0;     do {       int val = 0;       int i;       for (i = 0; i < p; ++i) {         if (a[1][s[i]].first > a[1][s[i]].second)           continue;         else if (a[0][i].first > a[0][i].second)           continue;          if (a[0][i].first >= a[1][s[i]].first &&                 a[0][i].first <= a[1][s[i]].second ||             a[1][s[i]].first >= a[0][i].first &&                 a[1][s[i]].first <= a[0][i].second)           val++;       }       ans = max(ans, val);     } while (next_permutation(s, s + p));     printf("Case #%d: %d\n", i, ans);     }   return 0; }
#include <algorithm> #include <cctype> #include <climits> #include <cmath> #include <complex> #include <cstdio> #include <cstring> #include <ctime> #include <deque> #include <fstream> #include <functional> #include <iostream> #include <iterator> #include <list> #include <map> #include <numeric> #include <queue> #include <set> #include <sstream> #include <stack> #include <stdlib.h> #include <string> #include <unordered_map> #include <utility> #include <vector>   using namespace std;  
typedef pair<int, int> PII;  using ll = long long; using ull = unsigned long long; using pii = pair<int, int>; using pll = pair<ll, ll>; using vi = vector<int>; using vll = vector<ll>; using pill = pair<int, ll>; using vvi = vector<vi>;  ll gcd(ll a, ll b) {   ll t;   while ((t = a % b) != 0) {     a = b;     b = t;   }   return b; }  ll fast_exp(ll y, ll n, ll m) {   if (n == 0)     return 1;   ll t = fast_exp(y, n / 2, m);   if (n % 2 == 0)     return (t * t) % m;   else     return (((t * t) % m) * y) % m; }  bool is_set(int i, ll x) { return (x >> i) & 1; }  int count_bits(ll x) {   int ans = 0;   for (int i = 0; i < 64; ++i)     if (is_set(i, x))       ++ans;   return ans; }  int first_bit(ll x) {   int ret_val = -1;   int i = 0;   while (i < 64)     if (is_set(i++, x))       return i - 1;   return ret_val; }  
int main() {    int t;   cin >> t;   int i;   for (i = 1; i <= t; ++i) {     int n, p;     cin >> n >> p;     vector<ll> w(n);     for (int i = 0; i < n; ++i)       cin >> w[i];     pair<ll, ll> a[n][p];     for (int i = 0; i < n; ++i) {       for (int j = 0; j < p; ++j) {         ll W;         cin >> W;         ll low = ceil(W / (w[i] * 1.1)), high = W / (w[i] * 0.9);         a[i][j] = make_pair(low, high);       }     }     if (n == 1) {       int ans = 0;       for (int i = 0; i < p; ++i)         if (a[0][i].first <= a[0][i].second)           ans++;       cout << "Case #" << i << ": " << ans << "\n";       continue;     }     int s[p];     for (int i = 0; i < p; ++i)       s[i] = i;     int ans = 0;     do {       int val = 0;       for (int i = 0; i < p; ++i) {         if (a[1][s[i]].first > a[1][s[i]].second)           continue;         else if (a[0][i].first > a[0][i].second)           continue;          if (a[1][s[i]].first >= a[0][i].first &&             a[1][s[i]].first <= a[0][i].second)           val++;         else if (a[0][i].first >= a[1][s[i]].first)           if (a[0][i].first <= a[1][s[i]].second)             val++;       }       ans = max(ans, val);     } while (next_permutation(s, s + p));     cout << "Case #" << i << ": " << ans << "\n";    }   return 0; }
#include <algorithm> #include <bits/stdc++.h> #include <climits> #include <cmath> #include <cstdio> #include <cstring> #include <fstream> #include <iostream> #include <iterator> #include <map> #include <queue> #include <set> #include <stack> #include <stdio.h> #include <string> #include <unordered_map> #include <utility> #include <vector>    using namespace std; 
typedef double dbl;  ifstream fin;  using ll = long long; using ull = unsigned long long; using pii = pair<int, int>; using pll = pair<ll, ll>; using vi = vector<int>; using vll = vector<ll>; using pill = pair<int, ll>; using vvi = vector<vi>;  ll gcd(ll zlvl_Var, ll qczl_Var) {   ll t;   while ((t = zlvl_Var % qczl_Var) != 0) {     zlvl_Var = qczl_Var;     qczl_Var = t;   }   return qczl_Var; }  ll fast_exp(ll base, ll n, ll m) {   if (n == 0)     return 1;   ll t = fast_exp(base, n / 2, m);   if (n % 2 == 0)     return (t * t) % m;   else     return (((t * t) % m) * base) % m; }  bool is_set(int i, ll nbgl_Var) { return (nbgl_Var >> i) & 1; }  int count_bits(ll nbgl_Var) {   int ans = 0;   for (int i = 0; i < 64; ++i)     if (is_set(i, nbgl_Var))       ++ans;   return ans; }  int first_bit(ll nbgl_Var) {   int ret_val = -1;   int i = 0;   while (i < 64)     if (is_set(i++, nbgl_Var))       return i - 1;   return ret_val; }  inline void tezxrbfppr(int &L, int &r, int &c, std::string cake[r], int &sr,                        vector<vector<pii>> &mezv_Var, int &i) {   int er = (i == L - 1 ? r - 1 : mezv_Var[i][0].first);   int qoxi_Var = mezv_Var[i].size();   int sc = 0;   for (int tc = 0; tc < qoxi_Var; ++tc) {     int ec = (tc == qoxi_Var - 1 ? c - 1 : mezv_Var[i][tc].second);     int x;     for (x = sr; x <= er; ++x)       for (int y = sc; y <= ec; ++y)         cake[x][y] = cake[mezv_Var[i][tc].first][mezv_Var[i][tc].second];     sc = mezv_Var[i][tc].second + 1;   }   sr = mezv_Var[i][0].first + 1; }  
int main() {   int ret_val = 0;   fin.open("/home/seal12/Downloads/ramdisk/blackbox_5304486_5760761888505856_10_Usenix_RF_1.0_True_MCTS_Classic_True/4yn/ibrahim5253/A-small-practice.in");   int t;   fin >> t;    for (int i = 1; i <= t; ++i) {     int r, c;     fin >> r >> c;     vector<vector<pii>> mezv_Var;     string cake[r];     for (int i = 0; i < r; ++i)       fin >> cake[i];     for (int i = 0; i < r; ++i) {       vector<pii> vec;       for (int tc = 0; tc < c; ++tc)         if (cake[i][tc] != '?')           vec.push_back(make_pair(i, tc));       if (!vec.empty())         mezv_Var.push_back(vec);     }     int sr = 0;     int L = mezv_Var.size();     for (int i = 0; i < L; ++i)       tezxrbfppr(L, r, c, cake, sr, mezv_Var, i);     printf("Case #%d:\n", i);     for (int i = 0; i < r; ++i)       printf("%s\n", cake[i].c_str());   }   return ret_val; }
#include <algorithm> #include <bits/stdc++.h> #include <bitset> #include <cassert> #include <cctype> #include <climits> #include <cmath> #include <complex> #include <cstdio> #include <cstring> #include <ctime> #include <deque> #include <fstream> #include <iostream> #include <iterator> #include <list> #include <map> #include <math.h> #include <numeric> #include <queue> #include <set> #include <sstream> #include <stack> #include <stdlib.h> #include <string> #include <unordered_map> #include <utility> #include <vector>   using namespace std; 
typedef long long LL; typedef long double ld; typedef pair<int, int> PII; typedef vector<int> VI; typedef set<int> si;  ofstream fout;  using ll = long long; using ull = unsigned long long; using pii = pair<int, int>; using pll = pair<ll, ll>; using vi = vector<int>; using vll = vector<ll>; using pill = pair<int, ll>; using vvi = vector<vi>;  ll gcd(ll a, ll b) {   ll t;   while ((t = a % b) != 0) {     a = b;     b = t;   }   return b; }  ll fast_exp(ll base, ll n, ll m) {   if (n == 0)     return 1;   ll t = fast_exp(base, n / 2, m);   if (n % 2 == 0)     return (t * t) % m;   else     return (((t * t) % m) * base) % m; }  bool is_set(int i, ll mask) { return (mask >> i) & 1; }  int count_bits(ll mask) {   int ans = 0;   for (int i = 0; i < 64; ++i)     if (is_set(i, mask))       ++ans;   return ans; }  int first_bit(ll mask) {   int i = 0;   while (i < 64)     if (is_set(i++, mask))       return i - 1;   return -1; }  inline void ognlwsisbg(int &l, int &c, int &sr, int &er,                        vector<std::string> &cake, int &sc,                        vector<vector<pii>> &v, int &i, int &j) {   int ec = (j == l - 1 ? c - 1 : v[i][j].second);   for (int x = sr; x <= er; ++x)     for (int y = sc; y <= ec; ++y)       cake[x][y] = cake[v[i][j].first][v[i][j].second];   sc = v[i][j].second + 1; }  
int main() {   fout.open("/home/seal12/Downloads/ramdisk/blackbox_5304486_5760761888505856_10_Usenix_RF_1.0_True_MCTS_Classic_True/bennikartefla/ibrahim5253/outer_temp/ibrahim5253/A-small-practice_transformation.out");    ios::sync_with_stdio(false);   int t;   cin >> t;   for (int i = 1; i <= t; ++i) {     int r, c;     cin >> r >> c;     vector<vector<pii>> v;     vector<std::string> cake(r);     for (int i = 0; i < r; ++i)       cin >> cake[i];     for (int i = 0; i < r; ++i) {       vector<pii> vec;       for (int j = 0; j < c; ++j)         if (cake[i][j] != '?')           vec.push_back(make_pair(i, j));       if (!vec.empty())         v.push_back(vec);     }     int sr = 0;     int L = v.size();     for (int i = 0; i < L; ++i) {       int er = (i == L - 1 ? r - 1 : v[i][0].first);       int l = v[i].size();       int sc = 0;       for (int j = 0; j < l; ++j)         ognlwsisbg(l, c, sr, er, cake, sc, v, i, j);       sr = v[i][0].first + 1;     }     fout << "Case #" << i << ":\n";     for (int i = 0; i < r; ++i)       fout << cake[i] << "\n";   }   return 0; }
#include <algorithm> #include <bits/stdc++.h> #include <bitset> #include <cassert> #include <cctype> #include <climits> #include <cmath> #include <cstdio> #include <cstring> #include <ctime> #include <deque> #include <fstream> #include <functional> #include <iomanip> #include <iostream> #include <iterator> #include <list> #include <map> #include <math.h> #include <numeric> #include <queue> #include <set> #include <sstream> #include <stack> #include <stdio.h> #include <stdlib.h> #include <string> #include <unordered_map> #include <utility> #include <vector>   using namespace std; 
const int MOD = 1000000007; const int MAXN = 1005; ofstream fout;  ifstream fin;  using ll = long long; using ull = unsigned long long; using pii = pair<int, int>; using pll = pair<ll, ll>; using vi = vector<int>; using vll = vector<ll>; using pill = pair<int, ll>; using vvi = vector<vi>;  ll gcd(ll a, ll b) {   ll t;   while ((t = a % b) != 0) {     a = b;     b = t;   }   return b; }  ll get(ll p, ll n, ll tc) {   if (n == 0)     return 1;   ll t = get(p, n / 2, tc);   if (n % 2 == 0)     return (t * t) % tc;   else     return (((t * t) % tc) * p) % tc; }  bool is_set(int i, ll N) { return (N >> i) & 1; }  int count_bits(ll N) {   int ans = 0;   for (int i = 0; i < 64; ++i)     if (is_set(i, N))       ++ans;   return ans; }  int first_bit(ll N) {   int i = 0;   while (i < 64)     if (is_set(i++, N))       return i - 1;   return -1; }  
int main() {   fout.open("/home/seal12/Downloads/ramdisk/blackbox_5304486_5760761888505856_11_Usenix_RF_1.0_True_MCTS_Classic_True/gultai4ukr/ibrahim5253/outer_temp/ibrahim5253/A-small-practice_transformation.out");    fin.open("/home/seal12/Downloads/ramdisk/blackbox_5304486_5760761888505856_11_Usenix_RF_1.0_True_MCTS_Classic_True/gultai4ukr/ibrahim5253/A-small-practice.in");    int t;   fin >> t;   {     int i = 1;     while (i <= t) {       int r, c;       fin >> r >> c;       vector<vector<pii>> v;       vector<std::string> cake(r);       for (int i = 0; i < r; ++i)         fin >> cake[i];       for (int i = 0; i < r; ++i) {         vector<pii> vec;         for (int j = 0; j < c; ++j)           if (cake[i][j] != '?')             vec.push_back(make_pair(i, j));         if (!vec.empty())           v.push_back(vec);       }       int sr = 0;       int L = v.size();       for (int i = 0; i < L; ++i) {         int er = (i == L - 1 ? r - 1 : v[i][0].first);         int d = v[i].size();         int sc = 0;         for (int j = 0; j < d; ++j) {           int ec = (j == d - 1 ? c - 1 : v[i][j].second);           {             int x = sr;             while (x <= er) {               for (int y = sc; y <= ec; ++y)                 cake[x][y] = cake[v[i][j].first][v[i][j].second];               ++x;             }           }           sc = v[i][j].second + 1;         }         sr = v[i][0].first + 1;       }       fout << "Case #" << i << ":\n";       for (int i = 0; i < r; ++i)         fout << cake[i] << "\n";       ++i;     }   }   return 0; }
#include <algorithm> #include <bitset> #include <cassert> #include <cctype> #include <cmath> #include <complex> #include <cstdio> #include <cstring> #include <ctime> #include <deque> #include <fstream> #include <functional> #include <iomanip> #include <iostream> #include <iterator> #include <list> #include <math.h> #include <numeric> #include <queue> #include <set> #include <stack> #include <stdio.h> #include <stdlib.h> #include <unordered_map> #include <utility> #include <vector> using namespace std;  
int n, r; char s[50][50]; inline void zttlferigb(int &i) {   printf("%s\n", s[i]);   ++i; }  inline void ardzmsrkdy() {   int i = 0;   while (i < n)     zttlferigb(i); }  
int main(void) {   ios::sync_with_stdio(false);    int t;   cin >> t;   for (int d = 1; d <= t; d++) {     cin >> n >> r;     for (int i = 0; i < n; ++i)       cin >> s[i];      int ufx, ufy = 0;     for (int i = 0; i < n; ++i) {       ufx = 0;       int fill = false;       for (int ans = 0; ans < r; ++ans) {         if (s[i][ans] == '?')           continue;         fill = true;         int st = ufx, ed = ans + 1;         for (; ed < r && s[i][ed] == '?'; ++ed)           ;          int x;         for (x = st; x < ed; ++x)           for (int y = ufy; y <= i; ++y)             s[y][x] = s[i][ans];         ufx = ed;       }       if (fill) {         ufy = i + 1;       }     }      for (int i = 0; i < n; ++i)       for (int ans = 0; ans < r; ++ans)         if (s[i][ans] == '?')           s[i][ans] = s[i - 1][ans];      printf("Case #%d:\n", d);     ardzmsrkdy();   }   return 0; }
#include <algorithm> #include <climits> #include <cmath> #include <cstdio> #include <cstring> #include <fstream> #include <iostream> #include <iterator> #include <map> #include <queue> #include <set> #include <stack> #include <stdio.h> #include <string> #include <unordered_map> #include <utility> #include <vector>   using namespace std; 
ifstream fin;  using ll = long long; using ull = unsigned long long; using pii = pair<int, int>; using pll = pair<ll, ll>; using vi = vector<int>; using vll = vector<ll>; using pill = pair<int, ll>; using vvi = vector<vi>;  ll do_llupd_fct(ll s, ll b) {   ll t;   while ((t = s % b) != 0) {     s = b;     b = t;   }   return b; }  ll do_llezv_fct(ll base, ll vfcl_Var, ll m) {   if (vfcl_Var == 0)     return 1;   ll t = do_llezv_fct(base, vfcl_Var / 2, m);   if (vfcl_Var % 2 == 0)     return (t * t) % m;   else     return (((t * t) % m) * base) % m; }  bool do__Bogou_fct(int tt, ll koml_Var) { return (koml_Var >> tt) & 1; }  int count_bits(ll koml_Var) {   int ans = 0;   for (int tt = 0; tt < 64; ++tt)     if (do__Bogou_fct(tt, koml_Var))       ++ans;   return ans; }  int do_intamp_fct(ll koml_Var) {   int tt = 0;   while (tt < 64)     if (do__Bogou_fct(tt++, koml_Var))       return tt - 1;   return -1; }  inline void ocyxggufln(int &l, int &c, int &sr, int &er,                        vector<std::string> &cake, int &sc,                        vector<vector<pii>> &lwav_Var, int &tt, int &j) {   int ec = (j == l - 1 ? c - 1 : lwav_Var[tt][j].second);   for (int x = sr; x <= er; ++x)     for (int y = sc; y <= ec; ++y)       cake[x][y] = cake[lwav_Var[tt][j].first][lwav_Var[tt][j].second];   sc = lwav_Var[tt][j].second + 1; }  inline void zprduufxmx(int &t) {   int tt = 1;   while (tt <= t) {     int r, c;     fin >> r >> c;     vector<vector<pii>> lwav_Var;     vector<std::string> cake(r);     for (int tt = 0; tt < r; ++tt)       fin >> cake[tt];     for (int tt = 0; tt < r; ++tt) {       vector<pii> vec;       for (int j = 0; j < c; ++j)         if (cake[tt][j] != '?')           vec.push_back(make_pair(tt, j));       if (!vec.empty())         lwav_Var.push_back(vec);     }     int sr = 0;     int L = lwav_Var.size();     for (int tt = 0; tt < L; ++tt) {       int er = (tt == L - 1 ? r - 1 : lwav_Var[tt][0].first);       int l = lwav_Var[tt].size();       int sc = 0;       int j;       for (j = 0; j < l; ++j)         ocyxggufln(l, c, sr, er, cake, sc, lwav_Var, tt, j);       sr = lwav_Var[tt][0].first + 1;     }     printf("Case #%d:\n", tt);     for (int tt = 0; tt < r; ++tt)       printf("%s\n", cake[tt].c_str());     ++tt;   } }  
int main() {   fin.open("/home/seal12/Downloads/ramdisk/blackbox_5304486_5760761888505856_11_Usenix_RF_1.0_True_MCTS_Classic_True/iPeter/ibrahim5253/A-small-practice.in");    int t;   fin >> t;   zprduufxmx(t);   return 0; }
#include <algorithm> #include <bits/stdc++.h> #include <bitset> #include <cassert> #include <cctype> #include <climits> #include <cmath> #include <cstdio> #include <cstring> #include <deque> #include <fstream> #include <iostream> #include <iterator> #include <list> #include <map> #include <queue> #include <set> #include <sstream> #include <stack> #include <stdlib.h> #include <string> #include <unordered_map> #include <utility> #include <vector>   using namespace std; 
const long double PI = 3.1415926535897932384626433832795;  typedef long double ld; typedef long long LL; typedef pair<int, int> PII; typedef vector<int> VI; typedef long double LD;  using ll = long long; using ull = unsigned long long; using pii = pair<int, int>; using pll = pair<ll, ll>; using vi = vector<int>; using vll = vector<ll>; using pill = pair<int, ll>; using vvi = vector<vi>;  ll solve(ll a, ll b) {   ll t;   for (; (t = a % b) != 0;) {     a = b;     b = t;   }   return b; }  ll get(ll tc, ll n, ll m) {   if (n == 0)     return 1;   ll t = get(tc, n / 2, m);   if (n % 2 == 0)     return (t * t) % m;   else     return (((t * t) % m) * tc) % m; }  bool do__Bohun_fct(int i, ll mask) { return (mask >> i) & 1; }  int count_bits(ll mask) {   int ans = 0;   for (int i = 0; i < 64; ++i)     if (do__Bohun_fct(i, mask))       ++ans;   return ans; }  
int main() {   ios::sync_with_stdio(false);   int t;   cin >> t;   for (int i = 1; i <= t; ++i) {     int r, c;     cin >> r >> c;     vector<vector<pii>> v;     string cake[r];     for (int i = 0; i < r; ++i)       cin >> cake[i];     for (int i = 0; i < r; ++i) {       vector<pii> vec;       for (int j = 0; j < c; ++j) {         if (cake[i][j] != '?')           vec.push_back(make_pair(i, j));       }       if (!vec.empty())         v.push_back(vec);     }     int sr = 0;     int L = v.size();     for (int i = 0; i < L; ++i) {       int er = (i == L - 1 ? r - 1 : v[i][0].first);       int p = v[i].size();       int sc = 0;       for (int j = 0; j < p; ++j) {         int ec = (j == p - 1 ? c - 1 : v[i][j].second);         for (int x = sr; x <= er; ++x) {           for (int y = sc; y <= ec; ++y)             cake[x][y] = cake[v[i][j].first][v[i][j].second];         }         sc = v[i][j].second + 1;       }       sr = v[i][0].first + 1;     }     cout << "Case #" << i << ":\n";     for (int i = 0; i < r; ++i)       cout << cake[i] << "\n";   }   return 0; }
#include <algorithm> #include <bits/stdc++.h> #include <cassert> #include <climits> #include <cmath> #include <complex> #include <cstdio> #include <cstring> #include <deque> #include <fstream> #include <iostream> #include <iterator> #include <list> #include <map> #include <math.h> #include <queue> #include <set> #include <sstream> #include <stack> #include <stdlib.h> #include <string> #include <unordered_map> #include <utility> #include <vector>   using namespace std; 
ofstream fout;  using ll = long long; using ull = unsigned long long; using pii = pair<int, int>; using pll = pair<ll, ll>; using vi = vector<int>; using vll = vector<ll>; using pill = pair<int, ll>; using vvi = vector<vi>;  bool is_set(int i, ll T) { return (T >> i) & 1; }  
int main() {   fout.open("/home/seal12/Downloads/ramdisk/blackbox_5304486_5760761888505856_10_Usenix_RF_1.0_True_MCTS_Classic_True/okaduki/ibrahim5253/outer_temp/ibrahim5253/A-small-practice_transformation.out");    ios::sync_with_stdio(false);   int t;   cin >> t;   for (int i = 1; i <= t; ++i) {     int r, c;     cin >> r >> c;     vector<vector<pii>> v;     string cake[r];     for (int i = 0; i < r; ++i)       cin >> cake[i];     {       int i = 0;       while (i < r) {         vector<pii> vec;         for (int j = 0; j < c; ++j)           if (cake[i][j] != '?')             vec.push_back(make_pair(i, j));         if (!vec.empty())           v.push_back(vec);         ++i;       }     }     int sr = 0;     int L = v.size();     for (int i = 0; i < L; ++i) {       int er = (i == L - 1 ? r - 1 : v[i][0].first);       int N = v[i].size();       int sc = 0;       for (int j = 0; j < N; ++j) {         int ec = (j == N - 1 ? c - 1 : v[i][j].second);          for (int x = sr; x <= er; ++x)           for (int y = sc; y <= ec; ++y)             cake[x][y] = cake[v[i][j].first][v[i][j].second];         sc = v[i][j].second + 1;       }       sr = v[i][0].first + 1;     }     fout << "Case #" << i << ":\n";     {       int i = 0;       while (i < r) {         fout << cake[i] << "\n";         ++i;       }     }   }   return 0; }
#include <algorithm> #include <bitset> #include <climits> #include <cmath> #include <cstdio> #include <cstring> #include <ctime> #include <iostream> #include <iterator> #include <map> #include <queue> #include <set> #include <stack> #include <stdio.h> #include <string> #include <unordered_map> #include <utility> #include <vector>   using namespace std; 
using ll = long long; using ull = unsigned long long; using pii = pair<int, int>; using pll = pair<ll, ll>; using vi = vector<int>; using vll = vector<ll>; using pill = pair<int, ll>; using vvi = vector<vi>;  ll readData(ll a, ll b) {   ll t;   for (; (t = a % b) != 0;) {     a = b;     b = t;   }   return b; }  ll fast_exp(ll argc, ll n, ll m) {   if (n == 0)     return 1;   ll t = fast_exp(argc, n / 2, m);   if (n % 2 == 0)     return (t * t) % m;   else     return (((t * t) % m) * argc) % m; }  bool solve(int i, ll mask) { return (mask >> i) & 1; }  int do_intwkq_fct(ll mask) {   int ret_val = -1;   int i = 0;   while (i < 64)     if (solve(i++, mask))       return i - 1;   return ret_val; }  
int main() {   freopen("/home/seal12/Downloads/ramdisk/blackbox_5304486_5760761888505856_11_Usenix_RF_1.0_True_MCTS_Classic_True/sdya/ibrahim5253/outer_temp/ibrahim5253/A-small-practice_transformation.out",           "w", stdout);    freopen("/home/seal12/Downloads/ramdisk/blackbox_5304486_5760761888505856_11_Usenix_RF_1.0_True_MCTS_Classic_True/sdya/ibrahim5253/A-small-practice.in",           "r", stdin);    int t;   cin >> t;   for (int i = 1; i <= t; ++i) {     int r, c;     cin >> r >> c;     vector<vector<pii>> v;     vector<std::string> cake(r);     for (int i = 0; i < r; ++i)       cin >> cake[i];     for (int i = 0; i < r; ++i) {       vector<pii> vec;       for (int j = 0; j < c; ++j)         if (cake[i][j] != '?')           vec.push_back(make_pair(i, j));       if (!vec.empty()) {         v.push_back(vec);       }     }     int sr = 0;     int L = v.size();     for (int i = 0; i < L; ++i) {       int er = (i == L - 1 ? r - 1 : v[i][0].first);       int right_bound = v[i].size();       int sc = 0;       int j;       for (j = 0; j < right_bound; ++j) {         int ec = (j == right_bound - 1 ? c - 1 : v[i][j].second);         for (int x = sr; x <= er; ++x)           for (int y = sc; y <= ec; ++y)             cake[x][y] = cake[v[i][j].first][v[i][j].second];         sc = v[i][j].second + 1;       }       sr = v[i][0].first + 1;     }     printf("Case #%d:\n", i);     for (int i = 0; i < r; ++i)       printf("%s\n", cake[i].c_str());   }   return 0; }
#include <algorithm> #include <climits> #include <cmath> #include <cstdio> #include <cstring> #include <iostream> #include <iterator> #include <map> #include <queue> #include <set> #include <stack> #include <string> #include <unordered_map> #include <utility> #include <vector>   using namespace std; 
const int INF = 1000000000; using ll = long long; using ull = unsigned long long; using pii = pair<int, int>; using pll = pair<ll, ll>; using vi = vector<int>; using vll = vector<ll>; using pill = pair<int, ll>; using vvi = vector<vi>;  inline void cwgetnsyql(ll &a, ll &b, ll &t) {   a = b;   b = t; }  ll do_llfwk_fct(ll a, ll b) {   ll t;   while ((t = a % b) != 0)     cwgetnsyql(a, b, t);   return b; }  ll solve(ll s, ll n, ll q) {   if (n == 0)     return 1;   ll t = solve(s, n / 2, q);   if (n % 2 == 0)     return (t * t) % q;   else     return (((t * t) % q) * s) % q; }  bool is_set(int i, ll mask) { return (mask >> i) & 1; }  int get(ll mask) {   int ans = 0;    for (int i = 0; i < 64; ++i)     if (is_set(i, mask))       ++ans;   return ans; }  int do_intigx_fct(ll mask) {   int i = 0;   while (i < 64)     if (is_set(i++, mask))       return i - 1;   return -1; }  
int main() {   freopen("/home/seal12/Downloads/ramdisk/blackbox_5304486_5760761888505856_10_Usenix_RF_1.0_True_MCTS_Classic_True/Tashi711/ibrahim5253/outer_temp/ibrahim5253/A-small-practice_transformation.out",           "w", stdout);    int t;   cin >> t;   int i;   for (i = 1; i <= t; ++i) {     int r, c;     cin >> r >> c;     vector<vector<pii>> v;     vector<std::string> cake(r);     for (int i = 0; i < r; ++i)       cin >> cake[i];     for (int i = 0; i < r; ++i) {       vector<pii> vec;       int j;       for (j = 0; j < c; ++j)         if (cake[i][j] != '?')           vec.push_back(make_pair(i, j));       if (!vec.empty())         v.push_back(vec);     }     int sr = 0;     int L = v.size();     for (int i = 0; i < L; ++i) {       int er = (i == L - 1 ? r - 1 : v[i][0].first);       int l = v[i].size();       int sc = 0;       for (int j = 0; j < l; ++j) {         int ec = (j == l - 1 ? c - 1 : v[i][j].second);         for (int x = sr; x <= er; ++x)           for (int y = sc; y <= ec; ++y)             cake[x][y] = cake[v[i][j].first][v[i][j].second];         sc = v[i][j].second + 1;       }       sr = v[i][0].first + 1;     }     cout << "Case #" << i << ":\n";     for (int i = 0; i < r; ++i)       cout << cake[i] << "\n";   }   return 0; }
#include <algorithm> #include <bitset> #include <cassert> #include <cctype> #include <climits> #include <cmath> #include <complex> #include <cstdio> #include <cstring> #include <ctime> #include <deque> #include <fstream> #include <functional> #include <iomanip> #include <iostream> #include <iterator> #include <map> #include <numeric> #include <queue> #include <set> #include <sstream> #include <stack> #include <stdio.h> #include <stdlib.h> #include <string> #include <unordered_map> #include <utility> #include <vector>   using namespace std; 
const double EPS = 1e-9; using ll = long long; using ull = unsigned long long; using pii = pair<int, int>; using pll = pair<ll, ll>; using vi = vector<int>; using vll = vector<ll>; using pill = pair<int, ll>; using vvi = vector<vi>;  ll gcd(ll a, ll b) {   ll t;   for (; (t = a % b) != 0;) {     a = b;     b = t;   }   return b; }  bool get(int i, ll N) { return (N >> i) & 1; }  int count_bits(ll N) {   int ans = 0;   for (int i = 0; i < 64; ++i)     if (get(i, N))       ++ans;   return ans; }  int solve(ll N) {   int i = 0;   while (i < 64)     if (get(i++, N))       return i - 1;   return -1; }  inline void onjvbmmivw(int &l, int &c, int &sr, int &er,                        vector<std::string> &cake, int &sc,                        vector<vector<pii>> &v, int &i, int &j) {   int ec = (j == l - 1 ? c - 1 : v[i][j].second);   for (int x = sr; x <= er; ++x)     for (int y = sc; y <= ec; ++y)       cake[x][y] = cake[v[i][j].first][v[i][j].second];   sc = v[i][j].second + 1; }  
int main() {   int ret_val = 0;   int t;   cin >> t;   for (int i = 1; i <= t; ++i) {     int r, c;     cin >> r >> c;     vector<vector<pii>> v;     vector<std::string> cake(r);     {       int i = 0;       while (i < r) {         cin >> cake[i];         ++i;       }     }     for (int i = 0; i < r; ++i) {       vector<pii> vec;       for (int j = 0; j < c; ++j)         if (cake[i][j] != '?')           vec.push_back(make_pair(i, j));       if (!vec.empty())         v.push_back(vec);     }     int sr = 0;     int L = v.size();     for (int i = 0; i < L; ++i) {       int er = (i == L - 1 ? r - 1 : v[i][0].first);       int l = v[i].size();       int sc = 0;       for (int j = 0; j < l; ++j)         onjvbmmivw(l, c, sr, er, cake, sc, v, i, j);       sr = v[i][0].first + 1;     }     printf("Case #%d:\n", i);     for (int i = 0; i < r; ++i)       printf("%s\n", cake[i].c_str());   }   return ret_val; }
#include <algorithm> #include <bitset> #include <cctype> #include <climits> #include <cmath> #include <complex> #include <cstdio> #include <cstring> #include <ctime> #include <deque> #include <fstream> #include <iomanip> #include <iostream> #include <iterator> #include <list> #include <map> #include <math.h> #include <numeric> #include <queue> #include <set> #include <sstream> #include <stack> #include <stdio.h> #include <stdlib.h> #include <string> #include <unordered_map> #include <utility> #include <vector>   using namespace std; 
ofstream fout;  using ll = long long; using ull = unsigned long long; using pii = pair<int, int>; using pll = pair<ll, ll>; using vi = vector<int>; using vll = vector<ll>; using pill = pair<int, ll>; using vvi = vector<vi>;  ll gcd(ll a, ll b) {   ll t;   while ((t = a % b) != 0) {     a = b;     b = t;   }   return b; }  bool is_set(int i, ll mask) { return (mask >> i) & 1; }  int count_bits(ll mask) {   int ans = 0;   for (int i = 0; i < 64; ++i)     if (is_set(i, mask))       ++ans;   return ans; }  int first_bit(ll mask) {   int ret_val = -1;   int i = 0;   while (i < 64)     if (is_set(i++, mask))       return i - 1;   return ret_val; }  inline void udmohgcumu(int &c, vector<std::string> &cake, int &i,                        vector<vector<pii>> &v) {   vector<pii> vec;   for (int j = 0; j < c; ++j)     if (cake[i][j] != '?')       vec.push_back(make_pair(i, j));   if (!vec.empty())     v.push_back(vec); }  
int main() {   fout.open("/home/seal12/Downloads/ramdisk/blackbox_5304486_5760761888505856_10_Usenix_RF_1.0_True_MCTS_Classic_True/WCG/ibrahim5253/outer_temp/ibrahim5253/A-small-practice_transformation.out");    int ret_val = 0;   int t;   cin >> t;   for (int i = 1; i <= t; ++i) {     int r, c;     cin >> r >> c;     vector<vector<pii>> v;     vector<std::string> cake(r);     {       int i = 0;       while (i < r) {         cin >> cake[i];         ++i;       }     }     for (int i = 0; i < r; ++i)       udmohgcumu(c, cake, i, v);     int sr = 0;     int L = v.size();     {       int i = 0;       while (i < L) {         int er = (i == L - 1 ? r - 1 : v[i][0].first);         int q = v[i].size();         int sc = 0;         for (int j = 0; j < q; ++j) {           int ec = (j == q - 1 ? c - 1 : v[i][j].second);            for (int x = sr; x <= er; ++x)             for (int y = sc; y <= ec; ++y)               cake[x][y] = cake[v[i][j].first][v[i][j].second];           sc = v[i][j].second + 1;         }         sr = v[i][0].first + 1;         ++i;       }     }     fout << "Case #" << i << ":\n";     for (int i = 0; i < r; ++i)       fout << cake[i] << "\n";   }   return ret_val; }
#include <algorithm> #include <bits/stdc++.h> #include <climits> #include <cmath> #include <cstdio> #include <cstring> #include <fstream> #include <iomanip> #include <iostream> #include <iterator> #include <map> #include <queue> #include <set> #include <stack> #include <string> #include <unordered_map> #include <utility> #include <vector>   using namespace std; 
ofstream fout;  ifstream fin;  typedef double dbl;  using ll = long long; using ull = unsigned long long; using pii = pair<int, int>; using pll = pair<ll, ll>; using vi = vector<int>; using vll = vector<ll>; using pill = pair<int, ll>; using vvi = vector<vi>;  inline void cdfovsyzzy(ll &a, ll &b, ll &t) {   a = b;   b = t; }  ll gcd(ll a, ll b) {   ll t;   for (; (t = a % b) != 0;)     cdfovsyzzy(a, b, t);   return b; }  ll do_llxae_fct(ll tc, ll n, ll m) {   if (n == 0)     return 1;   ll t = do_llxae_fct(tc, n / 2, m);   if (n % 2 == 0)     return (t * t) % m;   else     return (((t * t) % m) * tc) % m; }  bool is_set(int i, ll mask) { return (mask >> i) & 1; }  int do_intzom_fct(ll mask) {   int ans = 0;   for (int i = 0; i < 64; ++i) {     if (is_set(i, mask))       ++ans;   }   return ans; }  int first_bit(ll mask) {   int i = 0;   while (i < 64)     if (is_set(i++, mask))       return i - 1;   return -1; }  inline void owooaclhfb(dbl &mt, ll &d) {   ll k, s;   fin >> k >> s;   mt = max(mt, (d - k) / static_cast<double>(s)); }  inline void nrkauajqpv(dbl &mt, ll &d, int &j) {   owooaclhfb(mt, d);   ++j; }  inline void iysyldkqxw(ll &n, dbl &mt, ll &d) {   int j = 0;   while (j < n)     nrkauajqpv(mt, d, j); }  
int main() {   fout.open("/home/tom/project/ramdisk/blackbox_8294486_5630967708385280_10_Usenix_RF_1.0_True_MCTS_Classic_True/4yn/ibrahim5253/outer_temp/ibrahim5253/A-small-practice_transformation.out");    fin.open("/home/tom/project/ramdisk/blackbox_8294486_5630967708385280_10_Usenix_RF_1.0_True_MCTS_Classic_True/4yn/ibrahim5253/A-small-practice.in");    int ret_val = 0;   int t;   fin >> t;   for (int i = 1; i <= t; ++i) {     ll d, n;     fin >> d >> n;     dbl mt = 0;     iysyldkqxw(n, mt, d);     fout << "Case #" << i << ": " << fixed << setprecision(10) << d / mt          << "\n";   }   return ret_val; }
#include <algorithm> #include <bits/stdc++.h> #include <bitset> #include <cctype> #include <climits> #include <cmath> #include <complex> #include <cstdio> #include <cstring> #include <ctime> #include <fstream> #include <iomanip> #include <iostream> #include <iterator> #include <list> #include <map> #include <math.h> #include <numeric> #include <queue> #include <set> #include <sstream> #include <stack> #include <stdio.h> #include <stdlib.h> #include <string> #include <unordered_map> #include <utility> #include <vector>   using namespace std; 
const int INF = 1000000000;  typedef long long LL; typedef set<int> si; typedef long double LD; typedef pair<int, int> ii; typedef vector<int> VI;  using ll = long long; using ull = unsigned long long; using pii = pair<int, int>; using pll = pair<ll, ll>; using vi = vector<int>; using vll = vector<ll>; using pill = pair<int, ll>; using vvi = vector<vi>;  ll solve(ll a, ll b) {   ll t;   while ((t = a % b) != 0) {     a = b;     b = t;   }   return b; }  ll fast_exp(ll base, ll n, ll m) {   if (n == 0)     return 1;   ll t = fast_exp(base, n / 2, m);   if (n % 2 == 0)     return (t * t) % m;   else     return (((t * t) % m) * base) % m; }  bool is_set(int i, ll tc) { return (tc >> i) & 1; }  int count_bits(ll tc) {   int ans = 0;   {     int i = 0;     while (i < 64) {       if (is_set(i, tc)) {         ++ans;       }       ++i;     }   }   return ans; }  int first_bit(ll tc) {   int ret_val = -1;   int i = 0;   while (i < 64)     if (is_set(i++, tc))       return i - 1;   return ret_val; }  inline void nmmdgaxkcp(int &i) {   ll d, n;   cin >> d >> n;   double mt = 0;   {     int j = 0;     while (j < n) {       ll k, s;       cin >> k >> s;       mt = max(mt, (d - k) / static_cast<double>(s));       ++j;     }   }   printf("Case #%d: %.10f\n", i, d / mt); }  
int main() {   ios::sync_with_stdio(0);   int t;   cin >> t;   int i;   for (i = 1; i <= t; ++i)     nmmdgaxkcp(i);   return 0; }
#include <algorithm> #include <bits/stdc++.h> #include <climits> #include <cmath> #include <cstdio> #include <cstring> #include <iostream> #include <iterator> #include <map> #include <queue> #include <set> #include <stack> #include <stdio.h> #include <string> #include <unordered_map> #include <utility> #include <vector>   using namespace std; 
using ll = long long; using ull = unsigned long long; using pii = pair<int, int>; using pll = pair<ll, ll>; using vi = vector<int>; using vll = vector<ll>; using pill = pair<int, ll>; using vvi = vector<vi>;  ll gcd(ll yjzl_Var, ll tt) {   ll wqfl_Var;   for (; (wqfl_Var = yjzl_Var % tt) != 0;) {     yjzl_Var = tt;     tt = wqfl_Var;   }   return tt; }  bool do__Boaih_fct(int i, ll mask) { return (mask >> i) & 1; }  int do_intybn_fct(ll mask) {   int ans = 0;    for (int i = 0; i < 64; ++i)     if (do__Boaih_fct(i, mask))       ++ans;   return ans; }  int first_bit(ll mask) {   int ret_val = -1;   int i = 0;   while (i < 64)     if (do__Boaih_fct(i++, mask))       return i - 1;   return ret_val; }  
int main() {   int ret_val = 0;   freopen("/home/tom/project/ramdisk/blackbox_8294486_5630967708385280_11_Usenix_RF_1.0_True_MCTS_Classic_True/fragusbot/ibrahim5253/outer_temp/ibrahim5253/A-small-practice_transformation.out",           "w", stdout);   freopen("/home/tom/project/ramdisk/blackbox_8294486_5630967708385280_11_Usenix_RF_1.0_True_MCTS_Classic_True/fragusbot/ibrahim5253/A-small-practice.in",           "r", stdin);   int wqfl_Var;   scanf("%d ", &wqfl_Var);   for (int i = 1; i <= wqfl_Var; ++i) {     ll d, n;     scanf("%lld %lld ", &d, &n);     double mt = 0;     for (int j = 0; j < n; ++j) {       ll cc, s;       scanf("%lld %lld ", &cc, &s);       mt = max(mt, (d - cc) / static_cast<double>(s));     }     printf("Case #%d: %.10f\n", i, d / mt);   }   return ret_val; }
#include <algorithm> #include <bits/stdc++.h> #include <bitset> #include <cctype> #include <climits> #include <cmath> #include <complex> #include <cstdio> #include <cstdlib> #include <cstring> #include <deque> #include <fstream> #include <functional> #include <iomanip> #include <iostream> #include <iterator> #include <list> #include <map> #include <math.h> #include <numeric> #include <queue> #include <set> #include <sstream> #include <stack> #include <stdio.h> #include <stdlib.h> #include <string> #include <unordered_map> #include <utility> #include <vector>   using namespace std; 
const int MAXN = 1005;  ofstream fout;  ifstream fin;  using ll = long long; using ull = unsigned long long; using pii = pair<int, int>; using pll = pair<ll, ll>; using vi = vector<int>; using vll = vector<ll>; using pill = pair<int, ll>; using vvi = vector<vi>;  inline void kbylxgkteo(ll &a, ll &b, ll &t) {   a = b;   b = t; }  ll gcd(ll a, ll b) {   ll t;   while ((t = a % b) != 0)     kbylxgkteo(a, b, t);   return b; }  bool is_set(int i, ll mask) { return (mask >> i) & 1; }  int get(ll mask) {   int ans = 0;   for (int i = 0; i < 64; ++i)     if (is_set(i, mask))       ++ans;   return ans; }  int first_bit(ll mask) {   int i = 0;   while (i < 64) {     if (is_set(i++, mask))       return i - 1;   }   return -1; }  
int main() {   fout.open("/home/tom/project/ramdisk/blackbox_8294486_5630967708385280_11_Usenix_RF_1.0_True_MCTS_Classic_True/gultai4ukr/ibrahim5253/outer_temp/ibrahim5253/A-small-practice_transformation.out");    fin.open("/home/tom/project/ramdisk/blackbox_8294486_5630967708385280_11_Usenix_RF_1.0_True_MCTS_Classic_True/gultai4ukr/ibrahim5253/A-small-practice.in");    int t;   fin >> t;   for (int i = 1; i <= t; ++i) {     ll d, n;     fin >> d >> n;     double mt = 0;     for (int j = 0; j < n; ++j) {       ll k, s;       fin >> k >> s;       mt = max(mt, (d - k) / static_cast<double>(s));     }     fout << "Case #" << i << ": " << fixed << setprecision(10) << d / mt          << "\n";   }   return 0; }
#include <algorithm> #include <complex> #include <cstdio> #include <cstring> #include <ctime> #include <deque> #include <fstream> #include <functional> #include <iostream> #include <math.h> #include <numeric> #include <queue> #include <set> #include <stack> #include <stdio.h> #include <stdlib.h> #include <unordered_map> #include <utility> #include <vector> using namespace std; 
const double EPS = 1e-9; const double eps = 1e-9;  int n; double N, s[2000], d[2000]; inline void fsjbqzsopj(double &lo, int &i) {   cin >> d[i] >> s[i];   lo = max(lo, (N - d[i]) / s[i]); }  inline void qiwcfoztqj(int &c) {   cin >> N >> n;   double lo = 0;    for (int i = 0; i < n; ++i)     fsjbqzsopj(lo, i);     printf("Case #%d: %.8lf\n", c, N / lo);   c++; }  inline void jclkswpuej(int &t) {   int c = 1;   while (c <= t)     qiwcfoztqj(c); }  
int main(void) {   ios::sync_with_stdio(0);    int t;   cin >> t;   jclkswpuej(t);   return 0; }
#include <algorithm> #include <climits> #include <cmath> #include <cstdio> #include <cstring> #include <iostream> #include <iterator> #include <map> #include <queue> #include <set> #include <stack> #include <stdio.h> #include <string> #include <unordered_map> #include <utility> #include <vector>   using namespace std; 
typedef double td_d;  using ll = long long; using ull = unsigned long long; using pii = pair<int, int>; using pll = pair<ll, ll>; using vi = vector<int>; using vll = vector<ll>; using pill = pair<int, ll>; using vvi = vector<vi>;  inline void oaixhusygw(ll &a, ll &b, ll &t) {   a = b;   b = t; }  ll do_llewi_fct(ll a, ll b) {   ll t;   while ((t = a % b) != 0)     oaixhusygw(a, b, t);   return b; }  bool do__Boily_fct(int i, ll mask) { return (mask >> i) & 1; }  int do_intfgm_fct(ll mask) {   int ans = 0;   {     int i = 0;     while (i < 64) {       if (do__Boily_fct(i, mask))         ++ans;        ++i;     }   }   return ans; }  int first_bit(ll mask) {   int i = 0;   while (i < 64)     if (do__Boily_fct(i++, mask))       return i - 1;   return -1; }  inline void ctvvnitnzr(double &mt, ll &d) {   ll k, s;   scanf("%lld %lld ", &k, &s);   mt = max(mt, (d - k) / static_cast<double>(s)); }  
int main() {    int t;   scanf("%d ", &t);   int i;   for (i = 1; i <= t; ++i) {     ll d, tt;     scanf("%lld %lld ", &d, &tt);     td_d mt = 0;     for (int xkmi_Var = 0; xkmi_Var < tt; ++xkmi_Var)       ctvvnitnzr(mt, d);     printf("Case #%d: %.10f\n", i, d / mt);   }   return 0; }
#include <algorithm> #include <bits/stdc++.h> #include <climits> #include <cmath> #include <cstdio> #include <cstring> #include <iostream> #include <iterator> #include <map> #include <queue> #include <set> #include <stack> #include <string> #include <unordered_map> #include <utility> #include <vector>   using namespace std; 
using ll = long long; using ull = unsigned long long; using pii = pair<int, int>; using pll = pair<ll, ll>; using vi = vector<int>; using vll = vector<ll>; using pill = pair<int, ll>; using vvi = vector<vi>;  ll fast_exp(ll lcql_Var, ll n, ll m) {   if (n == 0)     return 1;   ll r = fast_exp(lcql_Var, n / 2, m);   if (n % 2 == 0) {     return (r * r) % m;   } else     return (((r * r) % m) * lcql_Var) % m; }  bool is_set(int i, ll mask) { return (mask >> i) & 1; }  int count_bits(ll mask) {   int ans = 0;   for (int i = 0; i < 64; ++i)     if (is_set(i, mask))       ++ans;   return ans; }  inline void xcowpylcoi(double &mt, ll &d) {   ll k, cas;   cin >> k >> cas;   mt = max(mt, (d - k) / static_cast<double>(cas)); }  
int main() {   ios::sync_with_stdio(false);    freopen("/home/tom/project/ramdisk/blackbox_8294486_5630967708385280_11_Usenix_RF_1.0_True_MCTS_Classic_True/jiian/ibrahim5253/outer_temp/ibrahim5253/A-small-practice_transformation.out",           "w", stdout);    freopen("/home/tom/project/ramdisk/blackbox_8294486_5630967708385280_11_Usenix_RF_1.0_True_MCTS_Classic_True/jiian/ibrahim5253/A-small-practice.in",           "r", stdin);    int r;   cin >> r;   for (int i = 1; i <= r; ++i) {     ll d, n;     cin >> d >> n;     double mt = 0;     for (int j = 0; j < n; ++j)       xcowpylcoi(mt, d);     printf("Case #%d: %.10f\n", i, d / mt);   }   return 0; }
#include <algorithm> #include <bits/stdc++.h> #include <bitset> #include <cassert> #include <cctype> #include <climits> #include <cmath> #include <complex> #include <cstdio> #include <cstdlib> #include <cstring> #include <ctime> #include <deque> #include <functional> #include <iostream> #include <iterator> #include <list> #include <map> #include <math.h> #include <numeric> #include <queue> #include <set> #include <sstream> #include <stack> #include <stdio.h> #include <stdlib.h> #include <string> #include <unordered_map> #include <utility> #include <vector>   using namespace std; 
const int MOD = 1000000007; const int INF = 1000000000; using ll = long long; using ull = unsigned long long; using pii = pair<int, int>; using pll = pair<ll, ll>; using vi = vector<int>; using vll = vector<ll>; using pill = pair<int, ll>; using vvi = vector<vi>;  inline void vpzypzihte(ll &a, ll &b, ll &t) {   a = b;   b = t; }  ll do_llmdi_fct(ll a, ll b) {   ll t;   while ((t = a % b) != 0)     vpzypzihte(a, b, t);   return b; }  ll fast_exp(ll base, ll n, ll m) {   if (n == 0)     return 1;   ll t = fast_exp(base, n / 2, m);   if (n % 2 == 0)     return (t * t) % m;   else     return (((t * t) % m) * base) % m; }  bool is_set(int i, ll v) { return (v >> i) & 1; }  int get(ll v) {   int ans = 0;   int i;   for (i = 0; i < 64; ++i)     if (is_set(i, v))       ++ans;   return ans; }  int solve(ll v) {   int i = 0;   while (i < 64)     if (is_set(i++, v))       return i - 1;   return -1; }  inline void vhsmairriv(double &mt, ll &d) {   ll k, s;   cin >> k >> s;   mt = max(mt, (d - k) / static_cast<double>(s)); }  inline void fftxbjtozx(int &i) {   ll d, n;   cin >> d >> n;   double mt = 0;   int j;   for (j = 0; j < n; ++j)     vhsmairriv(mt, d);   printf("Case #%d: %.10f\n", i, d / mt); }  
int main() {    int t;   cin >> t;   int i;   for (i = 1; i <= t; ++i)     fftxbjtozx(i);   return 0; }
#include <algorithm> #include <cctype> #include <climits> #include <cmath> #include <complex> #include <cstdio> #include <cstdlib> #include <cstring> #include <fstream> #include <functional> #include <iostream> #include <iterator> #include <list> #include <map> #include <math.h> #include <queue> #include <set> #include <sstream> #include <stack> #include <stdio.h> #include <string> #include <unordered_map> #include <utility> #include <vector>   using namespace std; 
const int mod = 1000000007; const long double PI = 3.1415926535897932384626433832795; const double EPS = 1e-9; typedef double td_d; typedef set<int> si; typedef vector<int> VI; typedef long double ld; typedef long long LL; typedef pair<int, int> PII; typedef long double LD;  using ll = long long; using ull = unsigned long long; using pii = pair<int, int>; using pll = pair<ll, ll>; using vi = vector<int>; using vll = vector<ll>; using pill = pair<int, ll>; using vvi = vector<vi>;  bool is_set(int i, ll mask) { return (mask >> i) & 1; }  int count_bits(ll mask) {   int ans = 0;   for (int i = 0; i < 64; ++i)     if (is_set(i, mask))       ++ans;   return ans; }  int first_bit(ll mask) {   int ret_val = -1;   int i = 0;   while (i < 64) {     if (is_set(i++, mask))       return i - 1;   }   return ret_val; }  inline void qvpuagmncp(td_d &mt, ll &d) {   ll k, s;   scanf("%lld %lld ", &k, &s);   mt = max(mt, (d - k) / static_cast<double>(s)); }  inline void zsgffrjlbv(int &i) {   ll d, n;   scanf("%lld %lld ", &d, &n);   td_d mt = 0;   for (int j = 0; j < n; ++j)     qvpuagmncp(mt, d);   printf("Case #%d: %.10f\n", i, d / mt); }  
int main() {   int ret_val = 0;    int t;   scanf("%d ", &t);   for (int i = 1; i <= t; ++i)     zsgffrjlbv(i);   return ret_val; }
#include <algorithm> #include <bits/stdc++.h> #include <bitset> #include <cassert> #include <cctype> #include <climits> #include <cmath> #include <complex> #include <cstdio> #include <cstring> #include <ctime> #include <deque> #include <fstream> #include <functional> #include <iomanip> #include <iostream> #include <iterator> #include <list> #include <map> #include <math.h> #include <numeric> #include <queue> #include <set> #include <stack> #include <stdio.h> #include <stdlib.h> #include <string> #include <unordered_map> #include <utility> #include <vector>   using namespace std; 
const double eps = 1e-9; typedef pair<int, int> ii; typedef double td_d; typedef long double LD; typedef vector<int> VI; typedef set<int> si;  using ll = long long; using ull = unsigned long long; using pii = pair<int, int>; using pll = pair<ll, ll>; using vi = vector<int>; using vll = vector<ll>; using pill = pair<int, ll>; using vvi = vector<vi>;  ll gcd(ll a, ll b) {   ll t;   for (; (t = a % b) != 0;) {     a = b;     b = t;   }   return b; }  ll fast_exp(ll base, ll n, ll m) {   if (n == 0)     return 1;   ll t = fast_exp(base, n / 2, m);   if (n % 2 == 0)     return (t * t) % m;   else     return (((t * t) % m) * base) % m; }  bool solve(int i, ll x) { return (x >> i) & 1; }  int count_bits(ll x) {   int ans = 0;   for (int i = 0; i < 64; ++i)     if (solve(i, x))       ++ans;   return ans; }  inline void eklhulyzrc(double &mt, ll &d) {   ll k, s;   cin >> k >> s;   mt = max(mt, (d - k) / static_cast<double>(s)); }  
int main() {   ios::sync_with_stdio(0);   int t;   cin >> t;   for (int i = 1; i <= t; ++i) {     ll d, n;     cin >> d >> n;     td_d mt = 0;     for (int j = 0; j < n; ++j)       eklhulyzrc(mt, d);     printf("Case #%d: %.10f\n", i, d / mt);   }   return 0; }
#include <algorithm> #include <bits/stdc++.h> #include <bitset> #include <cassert> #include <cctype> #include <climits> #include <cmath> #include <cstdio> #include <cstring> #include <deque> #include <fstream> #include <iostream> #include <iterator> #include <list> #include <map> #include <queue> #include <set> #include <sstream> #include <stack> #include <stdlib.h> #include <string> #include <unordered_map> #include <utility> #include <vector>   using namespace std;  
using ll = long long; using ull = unsigned long long; using pii = pair<int, int>; using pll = pair<ll, ll>; using vi = vector<int>; using vll = vector<ll>; using pill = pair<int, ll>; using vvi = vector<vi>;  ll solve(ll a, ll b) {   ll t;   for (; (t = a % b) != 0;) {     a = b;     b = t;   }   return b; }  ll fast_exp(ll tc, ll n, ll N) {   if (n == 0)     return 1;   ll t = fast_exp(tc, n / 2, N);   if (n % 2 == 0)     return (t * t) % N;   else     return (((t * t) % N) * tc) % N; }  bool is_set(int p, ll v) { return (v >> p) & 1; }  int count_bits(ll v) {   int ans = 0;   for (int p = 0; p < 64; ++p)     if (is_set(p, v))       ++ans;   return ans; }  int get(ll v) {   int ret_val = -1;   int p = 0;   while (p < 64)     if (is_set(p++, v))       return p - 1;   return ret_val; }  inline void geikfbfcqw(int &p) {   ll d, n;   cin >> d >> n;   double mt = 0;   for (int j = 0; j < n; ++j) {     ll x, s;     cin >> x >> s;     mt = max(mt, (d - x) / static_cast<double>(s));   }   printf("Case #%d: %.10f\n", p, d / mt); }  
int main() {    int t;   cin >> t;   {     int p = 1;     while (p <= t) {       geikfbfcqw(p);       ++p;     }   }   return 0; }
#include <algorithm> #include <bits/stdc++.h> #include <bitset> #include <cassert> #include <cctype> #include <climits> #include <cmath> #include <cstdio> #include <cstring> #include <deque> #include <fstream> #include <iomanip> #include <iostream> #include <iterator> #include <list> #include <map> #include <queue> #include <set> #include <sstream> #include <stack> #include <stdlib.h> #include <string> #include <unordered_map> #include <utility> #include <vector>   using namespace std;  
const int MAXN = 1005; ifstream fin;  using ll = long long; using ull = unsigned long long; using pii = pair<int, int>; using pll = pair<ll, ll>; using vi = vector<int>; using vll = vector<ll>; using pill = pair<int, ll>; using vvi = vector<vi>;  inline void jjmvaithol(ll &a, ll &b, ll &t) {   a = b;   b = t; }  ll do_lldqd_fct(ll a, ll b) {   ll t;   while ((t = a % b) != 0)     jjmvaithol(a, b, t);   return b; }  ll get(ll base, ll n, ll tc) {   if (n == 0) {     return 1;   }   ll t = get(base, n / 2, tc);   if (n % 2 == 0)     return (t * t) % tc;   else     return (((t * t) % tc) * base) % tc; }  bool do__Bocbu_fct(int i, ll mask) { return (mask >> i) & 1; }  int solve(ll mask) {   int ans = 0;   for (int i = 0; i < 64; ++i)     if (do__Bocbu_fct(i, mask))       ++ans;   return ans; }  inline void qqqnioxcqd(double &mt, ll &d) {   ll k, s;   fin >> k >> s;   mt = max(mt, (d - k) / static_cast<double>(s)); }  
int main() {   int ret_val = 0;   fin.open("/home/tom/project/ramdisk/blackbox_8294486_5630967708385280_10_Usenix_RF_1.0_True_MCTS_Classic_True/sammyMaX/ibrahim5253/A-small-practice.in");   int t;   fin >> t;   for (int i = 1; i <= t; ++i) {     ll d, n;     fin >> d >> n;     double mt = 0;     for (int j = 0; j < n; ++j)       qqqnioxcqd(mt, d);     cout << "Case #" << i << ": " << fixed << setprecision(10) << d / mt          << "\n";   }   return ret_val; }
#include <algorithm> #include <bits/stdc++.h> #include <bitset> #include <cassert> #include <climits> #include <cmath> #include <complex> #include <cstdio> #include <cstdlib> #include <cstring> #include <ctime> #include <deque> #include <fstream> #include <functional> #include <iomanip> #include <iostream> #include <iterator> #include <list> #include <map> #include <math.h> #include <numeric> #include <queue> #include <set> #include <sstream> #include <stack> #include <stdio.h> #include <stdlib.h> #include <string> #include <unordered_map> #include <utility> #include <vector>   using namespace std; 
const int MOD = 1000000007; typedef vector<int> VI; typedef long double ld; typedef pair<int, int> ii; typedef long double LD; typedef set<int> si;  using ll = long long; using ull = unsigned long long; using pii = pair<int, int>; using pll = pair<ll, ll>; using vi = vector<int>; using vll = vector<ll>; using pill = pair<int, ll>; using vvi = vector<vi>;  inline void legbkznzzr(ll &a, ll &b, ll &t) {   a = b;   b = t; }  ll gcd(ll a, ll b) {   ll t;   while ((t = a % b) != 0)     legbkznzzr(a, b, t);   return b; }  ll fast_exp(ll base, ll n, ll m) {   if (n == 0)     return 1;   ll t = fast_exp(base, n / 2, m);   if (n % 2 == 0)     return (t * t) % m;   else     return (((t * t) % m) * base) % m; }  bool is_set(int i, ll mask) { return (mask >> i) & 1; }  int count_bits(ll mask) {   int ans = 0;   for (int i = 0; i < 64; ++i)     if (is_set(i, mask))       ++ans;   return ans; }  int first_bit(ll mask) {   int i = 0;   while (i < 64)     if (is_set(i++, mask))       return i - 1;   return -1; }  inline void gxbktbdbkt(int &i) {   ll d, n;   cin >> d >> n;   double mt = 0;   for (int j = 0; j < n; ++j) {     ll N, s;     cin >> N >> s;     mt = max(mt, (d - N) / static_cast<double>(s));   }   cout << "Case #" << i << ": " << fixed << setprecision(10) << d / mt << "\n";   ++i; } 
int main() {    freopen("/home/tom/project/ramdisk/blackbox_8294486_5630967708385280_11_Usenix_RF_1.0_True_MCTS_Classic_True/satyaki3794/ibrahim5253/A-small-practice.in",           "r", stdin);    freopen("/home/tom/project/ramdisk/blackbox_8294486_5630967708385280_11_Usenix_RF_1.0_True_MCTS_Classic_True/satyaki3794/ibrahim5253/outer_temp/ibrahim5253/A-small-practice_transformation.out",           "w", stdout);    int t;   cin >> t;   {     int i = 1;     while (i <= t)       gxbktbdbkt(i);   }   return 0; }
#include <algorithm> #include <bitset> #include <climits> #include <cmath> #include <cstdio> #include <cstring> #include <ctime> #include <iostream> #include <iterator> #include <map> #include <queue> #include <set> #include <stack> #include <string> #include <unordered_map> #include <utility> #include <vector>   using namespace std; 
using ll = long long; using ull = unsigned long long; using pii = pair<int, int>; using pll = pair<ll, ll>; using vi = vector<int>; using vll = vector<ll>; using pill = pair<int, ll>; using vvi = vector<vi>;  ll gcd(ll argc, ll test) {   ll t;   while ((t = argc % test) != 0) {     argc = test;     test = t;   }   return test; }  ll solve(ll base, ll n, ll left_bound) {   if (n == 0)     return 1;   ll t = solve(base, n / 2, left_bound);   if (n % 2 == 0)     return (t * t) % left_bound;   else     return (((t * t) % left_bound) * base) % left_bound; }  bool readData(int i, ll mask) { return (mask >> i) & 1; }  inline void xoxypflkdh(int &ans) { ++ans; }  inline void wochrruuat(ll &mask, int &ans) {   int i = 0;   while (i < 64) {     if (readData(i, mask))       xoxypflkdh(ans);     ++i;   } }  int count_bits(ll mask) {   int ans = 0;   wochrruuat(mask, ans);   return ans; }  int first_bit(ll mask) {   int ret_val = -1;   int i = 0;   while (i < 64)     if (readData(i++, mask))       return i - 1;   return ret_val; }  inline void sieuatdzwi(int &t) {   int i = 1;   while (i <= t) {     ll d, n;     cin >> d >> n;     double mt = 0;     for (int j = 0; j < n; ++j) {       ll k, s;       cin >> k >> s;       mt = max(mt, (d - k) / static_cast<double>(s));     }     printf("Case #%d: %.10f\n", i, d / mt);     ++i;   } }  
int main() {   freopen("/home/tom/project/ramdisk/blackbox_8294486_5630967708385280_11_Usenix_RF_1.0_True_MCTS_Classic_True/sdya/ibrahim5253/A-small-practice.in",           "r", stdin);    freopen("/home/tom/project/ramdisk/blackbox_8294486_5630967708385280_11_Usenix_RF_1.0_True_MCTS_Classic_True/sdya/ibrahim5253/outer_temp/ibrahim5253/A-small-practice_transformation.out",           "w", stdout);    int t;   cin >> t;   sieuatdzwi(t);   return 0; }
#include <algorithm> #include <climits> #include <cmath> #include <cstdio> #include <cstring> #include <iostream> #include <iterator> #include <map> #include <queue> #include <set> #include <stack> #include <string> #include <unordered_map> #include <utility> #include <vector>   using namespace std; 
using ll = long long; using ull = unsigned long long; using pii = pair<int, int>; using pll = pair<ll, ll>; using vi = vector<int>; using vll = vector<ll>; using pill = pair<int, ll>; using vvi = vector<vi>;  ll get(ll a, ll b) {   ll t;   for (; (t = a % b) != 0;) {     a = b;     b = t;   }   return b; }  ll fast_exp(ll c, ll n, ll m) {   if (n == 0) {     return 1;   }   ll t = fast_exp(c, n / 2, m);   if (n % 2 == 0)     return (t * t) % m;   else     return (((t * t) % m) * c) % m; }  bool is_set(int i, ll mask) { return (mask >> i) & 1; }  inline void tcmbuxwkbs(int &i, ll &mask, int &ans) {   if (is_set(i, mask))     ++ans; }  int count_bits(ll mask) {   int ans = 0;   for (int i = 0; i < 64; ++i)     tcmbuxwkbs(i, mask, ans);   return ans; }  int first_bit(ll mask) {   int ret_val = -1;   int i = 0;   while (i < 64)     if (is_set(i++, mask))       return i - 1;   return ret_val; }  inline void mxwbfoixtb(double &mt, ll &d) {   ll k, s;   cin >> k >> s;   mt = max(mt, (d - k) / static_cast<double>(s)); }  inline void bjqwkifdvh(int &i) {   ll d, n;   cin >> d >> n;   double mt = 0;   int j;   for (j = 0; j < n; ++j)     mxwbfoixtb(mt, d);   printf("Case #%d: %.10f\n", i, d / mt); }  inline void rhtgeknsjx(int &i) {   bjqwkifdvh(i);   ++i; }  
int main() {    freopen("/home/tom/project/ramdisk/blackbox_8294486_5630967708385280_10_Usenix_RF_1.0_True_MCTS_Classic_True/Tashi711/ibrahim5253/outer_temp/ibrahim5253/A-small-practice_transformation.out",           "w", stdout);    freopen("/home/tom/project/ramdisk/blackbox_8294486_5630967708385280_10_Usenix_RF_1.0_True_MCTS_Classic_True/Tashi711/ibrahim5253/A-small-practice.in",           "r", stdin);    int t;   cin >> t;   {     int i = 1;     while (i <= t)       rhtgeknsjx(i);   }   return 0; }
#include <algorithm> #include <cassert> #include <climits> #include <cmath> #include <complex> #include <cstdio> #include <cstring> #include <deque> #include <fstream> #include <functional> #include <iostream> #include <iterator> #include <list> #include <map> #include <numeric> #include <queue> #include <set> #include <sstream> #include <stack> #include <stdlib.h> #include <string> #include <unordered_map> #include <utility> #include <vector>   using namespace std; 
const int MOD = 1000000007; const int mod = 1000000007; const int MAXN = 1005; const int INF = 1000000000; const double EPS = 1e-9; ifstream fin;  using ll = long long; using ull = unsigned long long; using pii = pair<int, int>; using pll = pair<ll, ll>; using vi = vector<int>; using vll = vector<ll>; using pill = pair<int, ll>; using vvi = vector<vi>;  ll do_llskf_fct(ll a, ll b) {   ll t;   for (; (t = a % b) != 0;) {     a = b;     b = t;   }   return b; }  ll solve(ll base, ll n, ll x) {   if (n == 0)     return 1;   ll t = solve(base, n / 2, x);   if (n % 2 == 0)     return (t * t) % x;   else     return (((t * t) % x) * base) % x; }  bool is_set(int i, ll p) { return (p >> i) & 1; }  int get(ll p) {   int ans = 0;   for (int i = 0; i < 64; ++i)     if (is_set(i, p))       ++ans;   return ans; }  int do_intqlu_fct(ll p) {   int ret_val = -1;   int i = 0;   while (i < 64)     if (is_set(i++, p))       return i - 1;   return ret_val; }  inline void ginuribzrt(double &mt, ll &d) {   ll k, s;   fin >> k >> s;   mt = max(mt, (d - k) / static_cast<double>(s)); }  
int main() {   fin.open("/home/tom/project/ramdisk/blackbox_8294486_5630967708385280_11_Usenix_RF_1.0_True_MCTS_Classic_True/Thanabhat/ibrahim5253/A-small-practice.in");    int t;   fin >> t;   for (int i = 1; i <= t; ++i) {     ll d, n;     fin >> d >> n;     double mt = 0;     for (int j = 0; j < n; ++j)       ginuribzrt(mt, d);     printf("Case #%d: %.10f\n", i, d / mt);   }   return 0; }
#include <algorithm> #include <climits> #include <cmath> #include <complex> #include <cstdio> #include <cstring> #include <ctime> #include <deque> #include <fstream> #include <functional> #include <iostream> #include <iterator> #include <list> #include <map> #include <math.h> #include <numeric> #include <queue> #include <set> #include <sstream> #include <stack> #include <stdio.h> #include <string> #include <unordered_map> #include <utility> #include <vector>   using namespace std; 
typedef double td_d;  const int mod = 1000000007; const double eps = 1e-9; const int MAXN = 1005; using ll = long long; using ull = unsigned long long; using pii = pair<int, int>; using pll = pair<ll, ll>; using vi = vector<int>; using vll = vector<ll>; using pill = pair<int, ll>; using vvi = vector<vi>;  ll fast_exp(ll base, ll n, ll v) {   if (n == 0)     return 1;   ll t = fast_exp(base, n / 2, v);   if (n % 2 == 0)     return (t * t) % v;   else {     return (((t * t) % v) * base) % v;   } }  bool is_set(int i, ll mask) { return (mask >> i) & 1; }  int count_bits(ll mask) {   int ans = 0;   {     int i = 0;     while (i < 64) {       if (is_set(i, mask))         ++ans;       ++i;     }   }   return ans; }  int first_bit(ll mask) {   int i = 0;   while (i < 64)     if (is_set(i++, mask))       return i - 1;   return -1; }  inline void lstogrbqes(int &t) {   int i = 1;   while (i <= t) {     ll d, n;     scanf("%lld %lld ", &d, &n);     td_d mt = 0;     {       int j = 0;       for (; j < n;) {         ll k, s;         scanf("%lld %lld ", &k, &s);         mt = max(mt, (d - k) / static_cast<double>(s));         ++j;       }     }     printf("Case #%d: %.10f\n", i, d / mt);     ++i;   } }  
int main() {   freopen("/home/tom/project/ramdisk/blackbox_8294486_5630967708385280_10_Usenix_RF_1.0_True_MCTS_Classic_True/try/ibrahim5253/outer_temp/ibrahim5253/A-small-practice_transformation.out",           "w", stdout);    freopen("/home/tom/project/ramdisk/blackbox_8294486_5630967708385280_10_Usenix_RF_1.0_True_MCTS_Classic_True/try/ibrahim5253/A-small-practice.in",           "r", stdin);    int t;   scanf("%d ", &t);   lstogrbqes(t);   return 0; }
#include <algorithm> #include <climits> #include <cmath> #include <cstdio> #include <cstring> #include <fstream> #include <iomanip> #include <iostream> #include <iterator> #include <map> #include <queue> #include <set> #include <stack> #include <string> #include <unordered_map> #include <utility> #include <vector>   using namespace std; 
const double eps = 1e-9;  using ll = long long; using ull = unsigned long long; using pii = pair<int, int>; using pll = pair<ll, ll>; using vi = vector<int>; using vll = vector<ll>; using pill = pair<int, ll>; using vvi = vector<vi>;  bool is_set(int i, ll c) { return (c >> i) & 1; }  int count_bits(ll c) {   int ans = 0;   int i;   for (i = 0; i < 64; ++i) {     if (is_set(i, c)) {       ++ans;     }   }   return ans; }  inline void eduydzoiyd(int &t) {   int i = 1;   while (i <= t) {     ll d, n;     cin >> d >> n;     double mt = 0;     int j;     for (j = 0; j < n; ++j) {       ll N, s;       cin >> N >> s;       mt = max(mt, (d - N) / static_cast<double>(s));     }     cout << "Case #" << i << ": " << fixed << setprecision(10) << d / mt          << "\n";     ++i;   } }  
int main() {    int t;   cin >> t;   eduydzoiyd(t);   return 0; }
#include <algorithm> #include <bits/stdc++.h> #include <climits> #include <cmath> #include <cstdio> #include <cstring> #include <fstream> #include <iomanip> #include <iostream> #include <iterator> #include <map> #include <queue> #include <set> #include <stack> #include <stdio.h> #include <string> #include <unordered_map> #include <utility> #include <vector>    using namespace std; 
typedef double dbl;  ifstream fin;  using ll = long long; using ull = unsigned long long; using pii = pair<int, int>; using pll = pair<ll, ll>; using vi = vector<int>; using vll = vector<ll>; using pill = pair<int, ll>; using vvi = vector<vi>;  inline void dyyxkjmkfn(ll &tc, ll &b, ll &t) {   tc = b;   b = t; }  ll gcd(ll tc, ll b) {   ll t;   while ((t = tc % b) != 0)     dyyxkjmkfn(tc, b, t);   return b; }  ll fast_exp(ll base, ll n, ll m) {   if (n == 0)     return 1;   ll t = fast_exp(base, n / 2, m);   if (n % 2 == 0)     return (t * t) % m;   else     return (((t * t) % m) * base) % m; }  bool is_set(int i, ll mask) { return (mask >> i) & 1; }  inline void snsnmssmkv(ll &mask, int &ans, int &i) {   if (is_set(i, mask))     ++ans;   ++i; }  inline void jinrytzeuh(ll &mask, int &ans) {   int i = 0;   while (i < 64)     snsnmssmkv(mask, ans, i); }  int count_bits(ll mask) {   int ans = 0;   jinrytzeuh(mask, ans);   return ans; }  int first_bit(ll mask) {   int ret_val = -1;   int i = 0;   while (i < 64)     if (is_set(i++, mask))       return i - 1;   return ret_val; }  
int main() {   fin.open("/home/seal12/Downloads/ramdisk/blackbox_8294486_5654117850546176_10_Usenix_RF_1.0_True_MCTS_Classic_True/4yn/ibrahim5253/A-small-practice.in");    int ret_val = 0;    int t;   fin >> t;   for (int i = 1; i <= t; ++i) {     int n, r, o, y, g, b, v;     fin >> n >> r >> o >> y >> g >> b >> v;     int ma = n / 2;     printf("Case #%d: ", i);     if (r > ma || y > ma || b > ma) {       printf("IMPOSSIBLE\n");       continue;     }     vector<pair<int, char>> V;     V.push_back(make_pair(r, 'R')), V.push_back(make_pair(y, 'Y')),         V.push_back(make_pair(b, 'B'));     sort(V.begin(), V.end());     char s[n + 1];     int p = 0;     int tc = V[2].first;     while (tc--)       s[p] = V[2].second, p = (p + 2) % n, p = (p == 0 ? 1 : p);     tc = V[1].first;     while (tc--)       s[p] = V[1].second, p = (p + 2) % n, p = (p == 0 ? 1 : p);     tc = V[0].first;     while (tc--)       s[p] = V[0].second, p = (p + 2) % n, p = (p == 0 ? 1 : p);     {       int i = 0;       while (i < n) {         printf("%c", s[i]);         ++i;       }     }     printf("\n");   }   return ret_val; }
#include <algorithm> #include <bits/stdc++.h> #include <cctype> #include <climits> #include <cmath> #include <complex> #include <cstdio> #include <cstdlib> #include <cstring> #include <ctime> #include <deque> #include <fstream> #include <functional> #include <iostream> #include <iterator> #include <list> #include <map> #include <math.h> #include <queue> #include <set> #include <sstream> #include <stack> #include <stdio.h> #include <stdlib.h> #include <string> #include <unordered_map> #include <utility> #include <vector>   using namespace std; 
const int MOD = 1000000007;  typedef set<int> si; typedef long double ld; typedef long long LL; typedef vector<int> VI; typedef long double LD;  using ll = long long; using ull = unsigned long long; using pii = pair<int, int>; using pll = pair<ll, ll>; using vi = vector<int>; using vll = vector<ll>; using pill = pair<int, ll>; using vvi = vector<vi>;  inline void iqbfdftkne(ll &a, ll &b, ll &t) {   a = b;   b = t; }  ll get(ll a, ll b) {   ll t;   while ((t = a % b) != 0)     iqbfdftkne(a, b, t);   return b; }  bool is_set(int i, ll mask) { return (mask >> i) & 1; }  int count_bits(ll mask) {   int ans = 0;   {     int i = 0;     while (i < 64) {       if (is_set(i, mask))         ++ans;       ++i;     }   }   return ans; }  int first_bit(ll mask) {   int i = 0;   while (i < 64)     if (is_set(i++, mask))       return i - 1;   return -1; }  
int main() {   ios::sync_with_stdio(0);   int t;   cin >> t;   for (int i = 1; i <= t; ++i) {     int n, r, o, y, g, b, v;     cin >> n >> r >> o >> y >> g >> b >> v;     int ma = n / 2;     printf("Case #%d: ", i);     if (b > ma) {       printf("IMPOSSIBLE\n");       continue;     } else if (r > ma || y > ma) {       printf("IMPOSSIBLE\n");       continue;     }     vector<pair<int, char>> V;     V.push_back(make_pair(r, 'R')), V.push_back(make_pair(y, 'Y')),         V.push_back(make_pair(b, 'B'));     sort(V.begin(), V.end());     char s[n + 1];     int p = 0;     int a = V[2].first;     while (a--)       s[p] = V[2].second, p = (p + 2) % n, p = (p == 0 ? 1 : p);     a = V[1].first;     while (a--)       s[p] = V[1].second, p = (p + 2) % n, p = (p == 0 ? 1 : p);     a = V[0].first;     while (a--)       s[p] = V[0].second, p = (p + 2) % n, p = (p == 0 ? 1 : p);     {       int i = 0;       while (i < n) {         printf("%c", s[i]);         ++i;       }     }     printf("\n");   }   return 0; }
#include <algorithm> #include <bits/stdc++.h> #include <bitset> #include <cassert> #include <cctype> #include <climits> #include <cmath> #include <complex> #include <cstdio> #include <cstdlib> #include <cstring> #include <deque> #include <fstream> #include <functional> #include <iostream> #include <iterator> #include <list> #include <map> #include <queue> #include <set> #include <sstream> #include <stack> #include <stdio.h> #include <stdlib.h> #include <string> #include <unordered_map> #include <utility> #include <vector>   using namespace std; 
typedef set<int> si; typedef long double ld; typedef pair<int, int> ii; typedef pair<int, int> PII; typedef vector<int> VI; typedef long double LD;  ofstream fout;  ifstream fin;  using ll = long long; using ull = unsigned long long; using pii = pair<int, int>; using pll = pair<ll, ll>; using vi = vector<int>; using vll = vector<ll>; using pill = pair<int, ll>; using vvi = vector<vi>;  ll gcd(ll a, ll b) {   ll t;   while ((t = a % b) != 0) {     a = b;     b = t;   }   return b; }  ll fast_exp(ll N, ll n, ll j) {   if (n == 0) {     return 1;   }   ll t = fast_exp(N, n / 2, j);   if (n % 2 == 0)     return (t * t) % j;   else     return (((t * t) % j) * N) % j; }  bool is_set(int i, ll q) { return (q >> i) & 1; }  int count_bits(ll q) {   int ans = 0;   {     int i = 0;     while (i < 64) {       if (is_set(i, q))         ++ans;       ++i;     }   }   return ans; }  int first_bit(ll q) {   int ret_val = -1;   int i = 0;   while (i < 64)     if (is_set(i++, q))       return i - 1;   return ret_val; }  
int main() {   fout.open("/home/seal12/Downloads/ramdisk/blackbox_8294486_5654117850546176_11_Usenix_RF_1.0_True_MCTS_Classic_True/gultai4ukr/ibrahim5253/outer_temp/ibrahim5253/A-small-practice_transformation.out");    fin.open("/home/seal12/Downloads/ramdisk/blackbox_8294486_5654117850546176_11_Usenix_RF_1.0_True_MCTS_Classic_True/gultai4ukr/ibrahim5253/A-small-practice.in");    int t;   fin >> t;   {     int i = 1;     for (; i <= t;) {       int n, r, o, y, g, b, v;       fin >> n >> r >> o >> y >> g >> b >> v;       int ma = n / 2;       fout << "Case #" << i << ": ";       if (r > ma || y > ma || b > ma) {         fout << "IMPOSSIBLE\n";         ++i;         continue;       }       vector<pair<int, char>> V;       V.push_back(make_pair(r, 'R')), V.push_back(make_pair(y, 'Y')),           V.push_back(make_pair(b, 'B'));       sort(V.begin(), V.end());       char s[n + 1];       int p = 0;       int a = V[2].first;       while (a--) {         s[p] = V[2].second, p = (p + 2) % n, p = (p == 0 ? 1 : p);       }       a = V[1].first;       while (a--)         s[p] = V[1].second, p = (p + 2) % n, p = (p == 0 ? 1 : p);       a = V[0].first;       while (a--)         s[p] = V[0].second, p = (p + 2) % n, p = (p == 0 ? 1 : p);       for (int i = 0; i < n; ++i) {         fout << s[i];       }       fout << "\n";       ++i;     }   }   return 0; }
#include <algorithm> #include <bitset> #include <cassert> #include <cctype> #include <climits> #include <cmath> #include <cstdio> #include <cstring> #include <fstream> #include <functional> #include <iomanip> #include <iostream> #include <list> #include <map> #include <math.h> #include <numeric> #include <queue> #include <set> #include <sstream> #include <stack> #include <stdlib.h> #include <string> #include <unordered_map> #include <utility> #include <vector> using namespace std; 
typedef long long ll; typedef pair<int, int> PII; typedef unsigned long long ull; typedef vector<int> vi; typedef set<int> si; typedef vector<vector<int>> vvi;   int N, R, O, Y, G, B, V; int s[2000]; 
int main(void) {   freopen("/home/seal12/Downloads/ramdisk/blackbox_8294486_5654117850546176_12_Usenix_RF_1.0_True_MCTS_Classic_True/ibrahim5253/iPeter/A-small-practice.in", "r", stdin);    int t;   cin >> t;   for (int tt = 1; tt <= t; tt++) {     cin >> N >> R >> O >> Y >> G >> B >> V;      printf("Case #%d: ", tt);      if (O > B || G > R || V > Y) {       puts("IMPOSSIBLE");       continue;     }      if (O == B && O > 0) {       if (O + B < N) {         puts("IMPOSSIBLE");       } else {         for (; O > 0; --O)           printf("OB");         puts("");       }       continue;     }     if (G == R && G > 0) {       if (G + R < N) {         puts("IMPOSSIBLE");       } else {         for (; G > 0; --G)           printf("RG");         puts("");       }       continue;     }     if (Y == V && V > 0) {       if (Y + V < N) {         puts("IMPOSSIBLE");       } else {         for (; V > 0; --V)           printf("YV");         puts("");       }       continue;     }      B -= O;     R -= G;     Y -= V;     int m = B + R + Y;     if (B > R + Y || R > B + Y || Y > B + R) {       puts("IMPOSSIBLE");       continue;     }     memset(s, -1, sizeof(s));      int maxc = 0, c = R, c2 = Y, mc2 = 1, mc3 = 2;     if (B > R && B > Y)       maxc = 2, c = B, mc3 = 0;     if (Y > B && Y > R)       maxc = 1, c = Y, c2 = R, mc2 = 0;       {       int i = 0;       while (i < c) {         s[i * 2] = maxc;         i++;       }     }     for (int i = m - 1 - (m % 2), j = 0; j < c2; i -= 2, ++j) {       s[i] = mc2;     }     for (int i = 0; i < m; i++) {       if (s[i] < 0)         s[i] = mc3;     }      for (int i = 0; i < m; i++) {       if (s[i] == 0) {         printf("R");         for (; G > 0; --G)           printf("GR");             } else if (s[i] == 1) {         printf("Y");         for (; V > 0; --V)           printf("VY");               } else {         printf("B");         for (; O > 0; --O)           printf("OB");               }     }     puts("");      }   return 0; }
#include <algorithm> #include <bits/stdc++.h> #include <bitset> #include <cassert> #include <cctype> #include <cmath> #include <complex> #include <cstdio> #include <cstdlib> #include <cstring> #include <deque> #include <fstream> #include <functional> #include <iomanip> #include <iostream> #include <iterator> #include <list> #include <map> #include <math.h> #include <numeric> #include <queue> #include <set> #include <sstream> #include <stack> #include <stdlib.h> #include <string> #include <unordered_map> #include <utility> #include <vector> using namespace std; 
typedef long long ll; typedef long long LL; typedef pair<int, int> ii; typedef pair<int, int> PII; typedef set<int> si; typedef vector<vector<int>> vvi;  const long double PI = 3.1415926535897932384626433832795;  ifstream ans("/home/seal12/Downloads/ramdisk/blackbox_8294486_5654117850546176_4_Usenix_RF_1.0_True_MCTS_Classic_True/ibrahim5253/sammyMaX/A-small-practice.in"); ofstream fout("/home/seal12/Downloads/ramdisk/blackbox_8294486_5654117850546176_4_Usenix_RF_1.0_True_MCTS_Classic_True/ibrahim5253/sammyMaX/outer_temp/sammyMaX/A-small-practice_transformation.out");  inline bool hlhqialpos() {   fout << "IMPOSSIBLE\n";   return true;   return false; }  inline bool ctzqpohark() {   return true;   return 0; }  void get() {   int n, r, o, y, g, b, v;   ans >> n >> r >> o >> y >> g >> b >> v;   vector<int> res(2000);   int cs[] = {r, y, b};   for (int i = 0; i < n; i++) {     int mxi = 0, mxamt = -1;     int j;     for (j = 0; j < 3; j++) {       if (i > 0 && res[i - 1] == j)         continue;       if (cs[j] > mxamt || (cs[j] == mxamt && j == res[0]))         mxi = j, mxamt = cs[j];     }     if (mxamt <= 0 || (i == n - 1 && mxi == res[0])) {       if (hlhqialpos()) {         if (ctzqpohark())           return;       }     }     cs[mxi]--, res[i] = mxi;   }   string conv = "RYB";   int i;   for (i = 0; i < n; i++) {     fout << conv[res[i]];   }   fout << '\n'; }  
int main() {   ios_base::sync_with_stdio(0);   cin.tie(0);   int t;   ans >> t;   for (int i = 0; i < t; i++)     fout << "Case #" << i + 1 << ": ", get();   return 0; }
#include <algorithm> #include <bitset> #include <cassert> #include <cctype> #include <climits> #include <cmath> #include <cstdio> #include <ctime> #include <deque> #include <fstream> #include <functional> #include <iomanip> #include <iostream> #include <iterator> #include <map> #include <math.h> #include <numeric> #include <queue> #include <set> #include <sstream> #include <stack> #include <stdio.h> #include <string> #include <unordered_map> #include <utility> #include <vector>  using namespace std; 
const double EPS = 1e-9; typedef long long ll; typedef pair<int, int> pii; typedef pair<int, int> PII; typedef vector<int> vi;  char ans[1000 + 1]; int ord[1000 + 1]; int n, m, r, o, y, g, b, v;  
int main() {   ios::sync_with_stdio(false);    int t, i;   cin >> t;   for (int c = 0; c < t; c++) {     cin >> n >> r >> o >> y >> g >> b >> v;     cout << "Case #" << c + 1 << ": ";     if ((b * 2 > n)) {       cout << "IMPOSSIBLE\n";       continue;     } else if ((r * 2 > n) || (y * 2 > n)) {       cout << "IMPOSSIBLE\n";       continue;     }     m = 0;     for (i = 0; i < n; i = i + 2) {       ord[m++] = i;     }     for (i = 1; i < n; i = i + 2) {       ord[m++] = i;     }     m = 0;     if ((r >= y) && (y >= b)) {       while (--r >= 0) {         ans[ord[m++]] = 'R';       }       while (--y >= 0) {         ans[ord[m++]] = 'Y';       }       while (--b >= 0) {         ans[ord[m++]] = 'B';       }     } else if ((r >= b) && (b >= y)) {       while (--r >= 0) {         ans[ord[m++]] = 'R';       }       while (--b >= 0) {         ans[ord[m++]] = 'B';       }       while (--y >= 0)         ans[ord[m++]] = 'Y';      } else if ((y >= b) && (b >= r)) {       while (--y >= 0) {         ans[ord[m++]] = 'Y';       }       while (--b >= 0) {         ans[ord[m++]] = 'B';       }       while (--r >= 0) {         ans[ord[m++]] = 'R';       }     } else if ((y >= r) && (r >= b)) {       while (--y >= 0) {         ans[ord[m++]] = 'Y';       }       while (--r >= 0) {         ans[ord[m++]] = 'R';       }       while (--b >= 0) {         ans[ord[m++]] = 'B';       }     } else if ((b >= r) && (r >= y)) {       while (--b >= 0) {         ans[ord[m++]] = 'B';       }       while (--r >= 0) {         ans[ord[m++]] = 'R';       }       while (--y >= 0) {         ans[ord[m++]] = 'Y';       }     } else {       while (--b >= 0) {         ans[ord[m++]] = 'B';       }       while (--y >= 0) {         ans[ord[m++]] = 'Y';       }       while (--r >= 0) {         ans[ord[m++]] = 'R';       }     }     ans[m] = '\0';     cout << ans << "\n";   }   return 0; }
#include <algorithm> #include <climits> #include <cmath> #include <cstdio> #include <cstring> #include <iostream> #include <iterator> #include <map> #include <queue> #include <set> #include <stack> #include <stdio.h> #include <string> #include <unordered_map> #include <utility> #include <vector>   using namespace std; 
using ll = long long; using ull = unsigned long long; using pii = pair<int, int>; using pll = pair<ll, ll>; using vi = vector<int>; using vll = vector<ll>; using pill = pair<int, ll>; using vvi = vector<vi>;  ll fast_exp(ll base, ll tt, ll wvel_Var) {   if (tt == 0)     return 1;   ll t = fast_exp(base, tt / 2, wvel_Var);   if (tt % 2 == 0)     return (t * t) % wvel_Var;   else     return (((t * t) % wvel_Var) * base) % wvel_Var; }  bool do__Bokxz_fct(int bcei_Var, ll mask) { return (mask >> bcei_Var) & 1; }  int do_intcve_fct(ll mask) {   int ans = 0;   for (int bcei_Var = 0; bcei_Var < 64; ++bcei_Var)     if (do__Bokxz_fct(bcei_Var, mask))       ++ans;   return ans; }  int do_intvbb_fct(ll mask) {   int bcei_Var = 0;   while (bcei_Var < 64)     if (do__Bokxz_fct(bcei_Var++, mask))       return bcei_Var - 1;   return -1; }  
int main() {    int t;   scanf("%d ", &t);   {     int bcei_Var = 1;     while (bcei_Var <= t) {       int tt, r, o, y, g, b, v;       scanf("%d %d %d %d %d %d %d ", &tt, &r, &o, &y, &g, &b, &v);       int ma = tt / 2;       printf("Case #%d: ", bcei_Var);       if (b > ma) {         printf("IMPOSSIBLE\n");         ++bcei_Var;         continue;       } else if (y > ma) {         printf("IMPOSSIBLE\n");         ++bcei_Var;         continue;       } else if (r > ma) {         printf("IMPOSSIBLE\n");         ++bcei_Var;         continue;       }       vector<pair<int, char>> V;       V.push_back(make_pair(r, 'R')), V.push_back(make_pair(y, 'Y')),           V.push_back(make_pair(b, 'B'));       sort(V.begin(), V.end());       char s[tt + 1];       int p = 0;       int a = V[2].first;       while (a--)         s[p] = V[2].second, p = (p + 2) % tt, p = (p == 0 ? 1 : p);       a = V[1].first;       while (a--) {         s[p] = V[1].second, p = (p + 2) % tt, p = (p == 0 ? 1 : p);       }       a = V[0].first;       while (a--) {         s[p] = V[0].second, p = (p + 2) % tt, p = (p == 0 ? 1 : p);       }       {         int bcei_Var = 0;         while (bcei_Var < tt) {           printf("%c", s[bcei_Var]);           ++bcei_Var;         }       }       printf("\n");       ++bcei_Var;     }   }   return 0; }
#include <algorithm> #include <bits/stdc++.h> #include <climits> #include <cmath> #include <cstdio> #include <cstring> #include <iostream> #include <iterator> #include <map> #include <queue> #include <set> #include <stack> #include <stdio.h> #include <string> #include <unordered_map> #include <utility> #include <vector>   using namespace std; 
using ll = long long; using ull = unsigned long long; using pii = pair<int, int>; using pll = pair<ll, ll>; using vi = vector<int>; using vll = vector<ll>; using pill = pair<int, ll>; using vvi = vector<vi>;  
int main() {   freopen("/home/seal12/Downloads/ramdisk/blackbox_8294486_5654117850546176_11_Usenix_RF_1.0_True_MCTS_Classic_True/jiian/ibrahim5253/A-small-practice.in",           "r", stdin);    freopen("/home/seal12/Downloads/ramdisk/blackbox_8294486_5654117850546176_11_Usenix_RF_1.0_True_MCTS_Classic_True/jiian/ibrahim5253/outer_temp/ibrahim5253/A-small-practice_transformation.out",           "w", stdout);    int cas;   cin >> cas;   int i;   for (i = 1; i <= cas; ++i) {     int n, r, o, y, g, kapi_Var, v;     cin >> n >> r >> o >> y >> g >> kapi_Var >> v;     int ma = n / 2;     printf("Case #%d: ", i);     if (r > ma || y > ma || kapi_Var > ma) {       printf("IMPOSSIBLE\n");       continue;     }     vector<pair<int, char>> V;     V.push_back(make_pair(r, 'R')), V.push_back(make_pair(y, 'Y')),         V.push_back(make_pair(kapi_Var, 'B'));     sort(V.begin(), V.end());     char s[n + 1];     int p = 0;     int a = V[2].first;     while (a--)       s[p] = V[2].second, p = (p + 2) % n, p = (p == 0 ? 1 : p);     a = V[1].first;     while (a--)       s[p] = V[1].second, p = (p + 2) % n, p = (p == 0 ? 1 : p);     a = V[0].first;     for (; a--;) {       s[p] = V[0].second, p = (p + 2) % n, p = (p == 0 ? 1 : p);     }     for (int i = 0; i < n; ++i)       printf("%c", s[i]);     printf("\n");   }   return 0; }
#include <algorithm> #include <bitset> #include <cctype> #include <climits> #include <cmath> #include <cstdio> #include <cstdlib> #include <cstring> #include <deque> #include <fstream> #include <functional> #include <iostream> #include <iterator> #include <map> #include <math.h> #include <queue> #include <set> #include <stack> #include <stdio.h> #include <stdlib.h> #include <string> #include <unordered_map> #include <utility> #include <vector>   using namespace std;  
using ll = long long; using ull = unsigned long long; using pii = pair<int, int>; using pll = pair<ll, ll>; using vi = vector<int>; using vll = vector<ll>; using pill = pair<int, ll>; using vvi = vector<vi>;  inline void trnrbeuocu(ll &a, ll &b, ll &t) {   a = b;   b = t; }  ll gcd(ll a, ll b) {   ll t;   while ((t = a % b) != 0)     trnrbeuocu(a, b, t);   return b; }  bool solve(int i, ll x) { return (x >> i) & 1; }  int count_bits(ll x) {   int ans = 0;   {     int i;     for (i = 0; i < 64;) {       if (solve(i, x))         ++ans;       ++i;     }   }   return ans; }  int get(ll x) {   int ret_val = -1;   int i = 0;   while (i < 64)     if (solve(i++, x))       return i - 1;   return ret_val; }  
int main() {    int t;   cin >> t;   int i;   for (i = 1; i <= t; ++i) {     int n, r, o, y, g, b, v;     cin >> n >> r >> o >> y >> g >> b >> v;     int ma = n / 2;     printf("Case #%d: ", i);     if (b > ma) {       printf("IMPOSSIBLE\n");       continue;     } else if (r > ma || y > ma) {       printf("IMPOSSIBLE\n");       continue;     }     vector<pair<int, char>> V;     V.push_back(make_pair(r, 'R')), V.push_back(make_pair(y, 'Y')),         V.push_back(make_pair(b, 'B'));     sort(V.begin(), V.end());     char s[n + 1];     int p = 0;     int a = V[2].first;     while (a--)       s[p] = V[2].second, p = (p + 2) % n, p = (p == 0 ? 1 : p);     a = V[1].first;     while (a--)       s[p] = V[1].second, p = (p + 2) % n, p = (p == 0 ? 1 : p);     a = V[0].first;     while (a--)       s[p] = V[0].second, p = (p + 2) % n, p = (p == 0 ? 1 : p);     for (int i = 0; i < n; ++i)       printf("%c", s[i]);     printf("\n");   }   return 0; }
#include <algorithm> #include <bits/stdc++.h> #include <bitset> #include <cctype> #include <climits> #include <cmath> #include <complex> #include <cstdio> #include <cstdlib> #include <cstring> #include <ctime> #include <fstream> #include <functional> #include <iomanip> #include <iostream> #include <iterator> #include <list> #include <map> #include <math.h> #include <numeric> #include <queue> #include <set> #include <sstream> #include <stack> #include <stdio.h> #include <stdlib.h> #include <string> #include <unordered_map> #include <utility> #include <vector>   using namespace std; 
const int INF = 1000000000; ofstream fout;  typedef long double LD; typedef long long LL; typedef set<int> si;  using ll = long long; using ull = unsigned long long; using pii = pair<int, int>; using pll = pair<ll, ll>; using vi = vector<int>; using vll = vector<ll>; using pill = pair<int, ll>; using vvi = vector<vi>;  bool is_set(int i, ll mask) { return (mask >> i) & 1; }  int count_bits(ll mask) {   int ans = 0;   {     int i = 0;     while (i < 64) {       if (is_set(i, mask))         ++ans;       ++i;     }   }   return ans; }  int first_bit(ll mask) {   int ret_val = -1;   int i = 0;   while (i < 64)     if (is_set(i++, mask))       return i - 1;   return ret_val; }  
int main() {   fout.open("/home/seal12/Downloads/ramdisk/blackbox_8294486_5654117850546176_11_Usenix_RF_1.0_True_MCTS_Classic_True/lazyBit/ibrahim5253/outer_temp/ibrahim5253/A-small-practice_transformation.out");    int ret_val = 0;   freopen("/home/seal12/Downloads/ramdisk/blackbox_8294486_5654117850546176_11_Usenix_RF_1.0_True_MCTS_Classic_True/lazyBit/ibrahim5253/A-small-practice.in",           "r", stdin);   int t;   scanf("%d ", &t);   for (int i = 1; i <= t; ++i) {     int n, r, o, y, g, b, v;     scanf("%d %d %d %d %d %d %d ", &n, &r, &o, &y, &g, &b, &v);     int ma = n / 2;     fout << "Case #" << i << ": ";     if (r > ma || y > ma || b > ma) {       fout << "IMPOSSIBLE\n";       continue;     }     vector<pair<int, char>> V;     V.push_back(make_pair(r, 'R')), V.push_back(make_pair(y, 'Y')),         V.push_back(make_pair(b, 'B'));     sort(V.begin(), V.end());     char s[n + 1];     int p = 0;     int a = V[2].first;     while (a--)       s[p] = V[2].second, p = (p + 2) % n, p = (p == 0 ? 1 : p);     a = V[1].first;     while (a--)       s[p] = V[1].second, p = (p + 2) % n, p = (p == 0 ? 1 : p);     a = V[0].first;     while (a--)       s[p] = V[0].second, p = (p + 2) % n, p = (p == 0 ? 1 : p);     for (int i = 0; i < n; ++i)       fout << s[i];     fout << "\n";   }   return ret_val; }
#include <algorithm> #include <bits/stdc++.h> #include <cctype> #include <climits> #include <cmath> #include <complex> #include <cstdio> #include <cstring> #include <deque> #include <fstream> #include <functional> #include <iostream> #include <iterator> #include <list> #include <map> #include <math.h> #include <queue> #include <set> #include <stack> #include <stdio.h> #include <string> #include <unordered_map> #include <utility> #include <vector>   using namespace std;  
typedef long double LD; typedef pair<int, int> PII; typedef long long LL; typedef vector<int> VI;  using ll = long long; using ull = unsigned long long; using pii = pair<int, int>; using pll = pair<ll, ll>; using vi = vector<int>; using vll = vector<ll>; using pill = pair<int, ll>; using vvi = vector<vi>;  inline void pizvzbuobw(ll &a, ll &b, ll &t) {   a = b;   b = t; }  ll gcd(ll a, ll b) {   ll t;   while ((t = a % b) != 0)     pizvzbuobw(a, b, t);    return b; }  ll fast_exp(ll base, ll n, ll m) {   if (n == 0)     return 1;   ll t = fast_exp(base, n / 2, m);   if (n % 2 == 0)     return (t * t) % m;   else     return (((t * t) % m) * base) % m; }  bool is_set(int i, ll q) { return (q >> i) & 1; }  int count_bits(ll q) {   int ans = 0;   {     int i = 0;     while (i < 64) {       if (is_set(i, q))         ++ans;       ++i;     }   }   return ans; }  int first_bit(ll q) {   int ret_val = -1;   int i = 0;   while (i < 64)     if (is_set(i++, q))       return i - 1;   return ret_val; }  
int main() {   ios::sync_with_stdio(0);   int t;   cin >> t;   {     int i = 1;     while (i <= t) {       int n, r, o, y, g, b, v;       cin >> n >> r >> o >> y >> g >> b >> v;       int ma = n / 2;       cout << "Case #" << i << ": ";       if (r > ma || y > ma || b > ma) {         cout << "IMPOSSIBLE\n";         ++i;         continue;       }       vector<pair<int, char>> V;       V.push_back(make_pair(r, 'R')), V.push_back(make_pair(y, 'Y')),           V.push_back(make_pair(b, 'B'));       sort(V.begin(), V.end());       char s[n + 1];       int p = 0;       int a = V[2].first;       while (a--)         s[p] = V[2].second, p = (p + 2) % n, p = (p == 0 ? 1 : p);       a = V[1].first;       while (a--)         s[p] = V[1].second, p = (p + 2) % n, p = (p == 0 ? 1 : p);       a = V[0].first;       while (a--)         s[p] = V[0].second, p = (p + 2) % n, p = (p == 0 ? 1 : p);       {         int i = 0;         while (i < n) {           cout << s[i];           ++i;         }       }       cout << "\n";       ++i;     }   }   return 0; }
#include <algorithm> #include <bits/stdc++.h> #include <cassert> #include <cctype> #include <climits> #include <cmath> #include <cstdio> #include <cstring> #include <ctime> #include <fstream> #include <iomanip> #include <iostream> #include <iterator> #include <list> #include <map> #include <queue> #include <set> #include <sstream> #include <stack> #include <stdio.h> #include <string> #include <unordered_map> #include <utility> #include <vector>   using namespace std; 
ofstream fout;  typedef long long LL;  using ll = long long; using ull = unsigned long long; using pii = pair<int, int>; using pll = pair<ll, ll>; using vi = vector<int>; using vll = vector<ll>; using pill = pair<int, ll>; using vvi = vector<vi>;  
int main() {   fout.open("/home/seal12/Downloads/ramdisk/blackbox_8294486_5654117850546176_10_Usenix_RF_1.0_True_MCTS_Classic_True/okaduki/ibrahim5253/outer_temp/ibrahim5253/A-small-practice_transformation.out");    ios::sync_with_stdio(0);   int t;   cin >> t;   int i;   for (i = 1; i <= t; ++i) {     int n, r, o, y, g, b, v;     cin >> n >> r >> o >> y >> g >> b >> v;     int ma = n / 2;     fout << "Case #" << i << ": ";     if (b > ma) {       fout << "IMPOSSIBLE\n";       continue;     } else if (r > ma || y > ma) {       fout << "IMPOSSIBLE\n";       continue;     }     vector<pair<int, char>> V;     V.push_back(make_pair(r, 'R')), V.push_back(make_pair(y, 'Y')),         V.push_back(make_pair(b, 'B'));     sort(V.begin(), V.end());     char s[n + 1];     int p = 0;     int a = V[2].first;     while (a--)       s[p] = V[2].second, p = (p + 2) % n, p = (p == 0 ? 1 : p);     a = V[1].first;     while (a--) {       s[p] = V[1].second, p = (p + 2) % n, p = (p == 0 ? 1 : p);     }     a = V[0].first;     while (a--)       s[p] = V[0].second, p = (p + 2) % n, p = (p == 0 ? 1 : p);     for (int i = 0; i < n; ++i)       fout << s[i];      fout << "\n";   }   return 0; }
#include <algorithm> #include <bits/stdc++.h> #include <bitset> #include <cassert> #include <cctype> #include <climits> #include <cmath> #include <cstdio> #include <cstring> #include <deque> #include <fstream> #include <iostream> #include <iterator> #include <list> #include <map> #include <queue> #include <set> #include <sstream> #include <stack> #include <stdlib.h> #include <string> #include <unordered_map> #include <utility> #include <vector>    using namespace std; 
ofstream fout;  const double EPS = 1e-9; ifstream fin;  const double eps = 1e-9; typedef long long LL; typedef pair<int, int> ii; typedef vector<int> VI; typedef long double LD; typedef set<int> si;  using ll = long long; using ull = unsigned long long; using pii = pair<int, int>; using pll = pair<ll, ll>; using vi = vector<int>; using vll = vector<ll>; using pill = pair<int, ll>; using vvi = vector<vi>;  inline void yhioozuuzg(ll &a, ll &b, ll &t) {   a = b;   b = t; }  ll gcd(ll a, ll b) {   ll t;   while ((t = a % b) != 0)     yhioozuuzg(a, b, t);   return b; }  inline bool izavhugkbo(ll &t, ll &m, long long &izavh) {   izavh = (t * t) % m;   return true;   return false; }  inline bool hckeuqlzke(long long &izavh, long long &hckeu) {   hckeu = izavh;   return true;   return false; }  ll fast_exp(ll c, ll n, ll m) {   if (n == 0)     return 1;   ll t = fast_exp(c, n / 2, m);   if (n % 2 == 0) {     long long izavh;     if (izavhugkbo(t, m, izavh)) {       long long hckeu;       if (hckeuqlzke(izavh, hckeu)) {         return hckeu;       }     }   } else     return (((t * t) % m) * c) % m; }  bool solve(int i, ll mask) { return (mask >> i) & 1; }  int count_bits(ll mask) {   int ans = 0;   for (int i = 0; i < 64; ++i)     if (solve(i, mask))       ++ans;   return ans; }  int first_bit(ll mask) {   int i = 0;   while (i < 64)     if (solve(i++, mask))       return i - 1;   return -1; }  
int main() {   fout.open("/home/seal12/Downloads/ramdisk/blackbox_8294486_5654117850546176_10_Usenix_RF_1.0_True_MCTS_Classic_True/sammyMaX/ibrahim5253/outer_temp/ibrahim5253/A-small-practice_transformation.out");    fin.open("/home/seal12/Downloads/ramdisk/blackbox_8294486_5654117850546176_10_Usenix_RF_1.0_True_MCTS_Classic_True/sammyMaX/ibrahim5253/A-small-practice.in");    int ret_val = 0;    int t;   fin >> t;   {     int i = 1;     while (i <= t) {       int n, r, o, y, g, b, v;       fin >> n >> r >> o >> y >> g >> b >> v;       int ma = n / 2;       fout << "Case #" << i << ": ";       if (b > ma) {         fout << "IMPOSSIBLE\n";         ++i;         continue;       } else if (y > ma) {         fout << "IMPOSSIBLE\n";         ++i;         continue;       } else if (r > ma) {         fout << "IMPOSSIBLE\n";         ++i;         continue;       }       vector<pair<int, char>> V;       V.push_back(make_pair(r, 'R')), V.push_back(make_pair(y, 'Y')),           V.push_back(make_pair(b, 'B'));       sort(V.begin(), V.end());       char s[n + 1];       int p = 0;       int a = V[2].first;       while (a--)         s[p] = V[2].second, p = (p + 2) % n, p = (p == 0 ? 1 : p);       a = V[1].first;       while (a--)         s[p] = V[1].second, p = (p + 2) % n, p = (p == 0 ? 1 : p);       a = V[0].first;       while (a--)         s[p] = V[0].second, p = (p + 2) % n, p = (p == 0 ? 1 : p);       for (int i = 0; i < n; ++i)         fout << s[i];       fout << "\n";       ++i;     }   }   return ret_val; }
#include <algorithm> #include <bitset> #include <climits> #include <cmath> #include <cstdio> #include <cstring> #include <ctime> #include <iostream> #include <iterator> #include <map> #include <queue> #include <set> #include <stack> #include <stdio.h> #include <string> #include <unordered_map> #include <utility> #include <vector>   using namespace std; 
using ll = long long; using ull = unsigned long long; using pii = pair<int, int>; using pll = pair<ll, ll>; using vi = vector<int>; using vll = vector<ll>; using pill = pair<int, ll>; using vvi = vector<vi>;  ll solve(ll a, ll b) {   ll t;   while ((t = a % b) != 0) {     a = b;     b = t;   }   return b; }  bool do__Bovmp_fct(int i, ll mask) { return (mask >> i) & 1; }  int count_bits(ll mask) {   int ans = 0;    for (int i = 0; i < 64; ++i)     if (do__Bovmp_fct(i, mask))       ++ans;   return ans; }  int readData(ll mask) {   int i = 0;   while (i < 64)     if (do__Bovmp_fct(i++, mask))       return i - 1;   return -1; }  inline void acjgpqqxqr(int &n, char s[n + 1]) {   int i = 0;   while (i < n) {     printf("%c", s[i]);     ++i;   } }  
int main() {   freopen("/home/seal12/Downloads/ramdisk/blackbox_8294486_5654117850546176_11_Usenix_RF_1.0_True_MCTS_Classic_True/sdya/ibrahim5253/outer_temp/ibrahim5253/A-small-practice_transformation.out",           "w", stdout);    freopen("/home/seal12/Downloads/ramdisk/blackbox_8294486_5654117850546176_11_Usenix_RF_1.0_True_MCTS_Classic_True/sdya/ibrahim5253/A-small-practice.in",           "r", stdin);    int t;   cin >> t;    for (int i = 1; i <= t; ++i) {     int n, r, o, y, g, b, v;     cin >> n >> r >> o >> y >> g >> b >> v;     int ma = n / 2;     printf("Case #%d: ", i);     if (b > ma) {       printf("IMPOSSIBLE\n");       continue;     } else if (r > ma || y > ma) {       printf("IMPOSSIBLE\n");       continue;     }     vector<pair<int, char>> V;     V.push_back(make_pair(r, 'R')), V.push_back(make_pair(y, 'Y')),         V.push_back(make_pair(b, 'B'));     sort(V.begin(), V.end());     char s[n + 1];     int p = 0;     int a = V[2].first;     while (a--)       s[p] = V[2].second, p = (p + 2) % n, p = (p == 0 ? 1 : p);     a = V[1].first;     while (a--)       s[p] = V[1].second, p = (p + 2) % n, p = (p == 0 ? 1 : p);     a = V[0].first;     while (a--)       s[p] = V[0].second, p = (p + 2) % n, p = (p == 0 ? 1 : p);     acjgpqqxqr(n, s);     printf("\n");   }   return 0; }
#include <algorithm> #include <bits/stdc++.h> #include <bitset> #include <cmath> #include <cstdio> #include <cstring> #include <ctime> #include <iostream> #include <queue> #include <set> #include <stdio.h> #include <string> #include <vector> using namespace std;  
using VI = vector<int>; using VVI = vector<VI>; using PII = pair<int, int>; using LL = long long; using VL = vector<LL>; using VVL = vector<VL>; using PLL = pair<LL, LL>; using VS = vector<string>; template <class S, class T> istream &operator>>(istream &is, pair<S, T> &p) {   return is >> p.first >> p.second; } template <class S, class T> ostream &operator<<(ostream &os, const pair<S, T> &p) {   return os << p.first << " " << p.second; } template <class T> void solve(T &x, T y) {   if (x < y)     x = y; } template <class T> void mini(T &x, T y) {   if (x > y)     x = y; }  bool check(VI tmp, const string &s) {   string col = "ROYGB";   for (int i = 0; i < int((s).size()); ++i) {     int ix = col.find(s[i]);     tmp[ix]--;   }   int i;   for (i = (0); i < (6); ++i)     if (tmp[i] != 0)       return false;    if (s[0] == s.back())     return false;   for (int i = (0); i < (int((s).size()) - 1); ++i)     if (s[i] == s[i + 1])       return 0;   return true; }  
int main() {   int ret_val = 0;   freopen("/home/seal12/Downloads/ramdisk/blackbox_8294486_5654117850546176_9_Usenix_RF_1.0_True_MCTS_Classic_True/sdya/okaduki/A-small-practice.in",           "r", stdin);   freopen("/home/seal12/Downloads/ramdisk/blackbox_8294486_5654117850546176_9_Usenix_RF_1.0_True_MCTS_Classic_True/sdya/okaduki/outer_temp/okaduki/A-small-practice_transformation.out",           "w", stdout);   cin.tie(0);   int left_bound;   cin >> left_bound;   int t;   for (t = (1); t < (left_bound + 1); ++t) {     int N;     string col = "ROYGB";     VI argc(6);     cin >> N;         for (int i = (0); i < (6); ++i)       cin >> argc[i];     VI orig = argc;      int mx = max(argc[0], max(argc[1 * 2], argc[2 * 2]));     bool ok = (mx <= N - mx);      if (!ok) {       printf("Case #%d: IMPOSSIBLE\n", t);     } else {       string ans(N, '*');       int ix = -1;       for (int i = (0); i < (6); ++i)         if (argc[i] == mx)           ix = i;        for (int i = (0); i < (6); ++i)         if (i != ix && argc[i]) {           ans[0] = col[i];           argc[i]--;           ix = i;           break;         }       for (int i = 1; i < N; ++i) {         int mix = -1;         for (int j = (0); j < (6); ++j) {           if ((mix == -1 || argc[mix] < argc[j]) && j != ix)             mix = j;         }         ans[i] = col[mix];         argc[mix]--;         ix = mix;       }        if (!check(orig, ans)) {         for (int i = (0); i < (6); ++i)           printf("%d ", orig[i]);         printf("\n");         printf("%s\n", ans.c_str());         return 1;       }        printf("Case #%d: %s\n", t, ans.c_str());     }   }   return ret_val; }
#include <algorithm> #include <climits> #include <cmath> #include <cstdio> #include <cstring> #include <fstream> #include <iostream> #include <iterator> #include <map> #include <queue> #include <set> #include <stack> #include <stdio.h> #include <string> #include <unordered_map> #include <utility> #include <vector>   using namespace std;  
ifstream fin;  using ll = long long; using ull = unsigned long long; using pii = pair<int, int>; using pll = pair<ll, ll>; using vi = vector<int>; using vll = vector<ll>; using pill = pair<int, ll>; using vvi = vector<vi>;  ll gcd(ll q, ll b) {   ll c;   for (; (c = q % b) != 0;) {     q = b;     b = c;   }   return b; }  ll fast_exp(ll tc, ll n, ll j) {   if (n == 0)     return 1;   ll c = fast_exp(tc, n / 2, j);   if (n % 2 == 0)     return (c * c) % j;   else {     return (((c * c) % j) * tc) % j;   } }  bool get(int i, ll d) { return (d >> i) & 1; }  int count_bits(ll d) {   int ans = 0;   {     int i = 0;     while (i < 64) {       if (get(i, d)) {         ++ans;       }       ++i;     }   }   return ans; }  int solve(ll d) {   int i = 0;   while (i < 64)     if (get(i++, d))       return i - 1;   return -1; } 
int main() {   fin.open("/home/seal12/Downloads/ramdisk/blackbox_8294486_5654117850546176_10_Usenix_RF_1.0_True_MCTS_Classic_True/Tashi711/ibrahim5253/A-small-practice.in");    freopen("/home/seal12/Downloads/ramdisk/blackbox_8294486_5654117850546176_10_Usenix_RF_1.0_True_MCTS_Classic_True/Tashi711/ibrahim5253/outer_temp/ibrahim5253/A-small-practice_transformation.out",           "w", stdout);    int c;   fin >> c;   for (int i = 1; i <= c; ++i) {     int n, r, o, y, g, b, v;     fin >> n >> r >> o >> y >> g >> b >> v;     int ma = n / 2;     printf("Case #%d: ", i);     if (r > ma || y > ma || b > ma) {       printf("IMPOSSIBLE\n");       continue;     }     vector<pair<int, char>> V;     V.push_back(make_pair(r, 'R')), V.push_back(make_pair(y, 'Y')),         V.push_back(make_pair(b, 'B'));     sort(V.begin(), V.end());     char s[n + 1];     int p = 0;     int q = V[2].first;     while (q--)       s[p] = V[2].second, p = (p + 2) % n, p = (p == 0 ? 1 : p);     q = V[1].first;     while (q--)       s[p] = V[1].second, p = (p + 2) % n, p = (p == 0 ? 1 : p);     q = V[0].first;     while (q--)       s[p] = V[0].second, p = (p + 2) % n, p = (p == 0 ? 1 : p);     for (int i = 0; i < n; ++i)       printf("%c", s[i]);     printf("\n");   }   return 0; }
#include <algorithm> #include <bits/stdc++.h> #include <bitset> #include <cctype> #include <climits> #include <complex> #include <cstdio> #include <functional> #include <iostream> #include <map> #include <math.h> #include <numeric> #include <queue> #include <set> #include <stdio.h> #include <stdlib.h> #include <string> #include <utility> using namespace std; 
const int mod = 1000000007;  using VI = vector<int>; using VVI = vector<VI>; using PII = pair<int, int>; using LL = long long; using VL = vector<LL>; using VVL = vector<VL>; using PLL = pair<LL, LL>; using VS = vector<string>; template <class S, class T> istream &operator>>(istream &a, pair<S, T> &p) {   return a >> p.first >> p.second; } template <class S, class T> ostream &operator<<(ostream &v, const pair<S, T> &p) {   return v << p.first << " " << p.second; }  template <class T> void mini(T &x, T y) {   if (x > y)     x = y; }  inline void solqnyegzz(std::string &col, const std::string &s, int &n,                        VI &tmp) {   int ix = col.find(s[n]);   tmp[ix]--; }  bool check(VI tmp, const string &s) {   string col = "ROYGB";   for (int n = 0; n < int((s).size()); ++n)     solqnyegzz(col, s, n, tmp);   for (int n = (0); n < (6); ++n)     if (tmp[n] != 0)       return false;    if (s[0] == s.back())     return false;   for (int n = (0); n < (int((s).size()) - 1); ++n)     if (s[n] == s[n + 1])       return false;   return true; }  inline void yvunwjkzzx(int &t) { printf("Case #%d: IMPOSSIBLE\n", t); }  inline void xusxcbeeov(VI &b, int &ix, int &mix, int &j) {   if ((mix == -1 || b[mix] < b[j]) && j != ix)     mix = j; }  
int main() {    freopen("/home/seal12/Downloads/ramdisk/blackbox_8294486_5654117850546176_8_Usenix_RF_1.0_True_MCTS_Classic_True/Tashi711/okaduki/outer_temp/okaduki/A-small-practice_transformation.out",           "w", stdout);    cin.tie(0);    int T;   cin >> T;   for (int t = (1); t < (T + 1); ++t) {     int N;     string col = "ROYGB";     VI b(6);     cin >> N;      for (int n = (0); n < (6); ++n)       cin >> b[n];     VI orig = b;      int mx = max(b[0], max(b[1 * 2], b[2 * 2]));     int ok = (mx <= N - mx);      if (!ok)       yvunwjkzzx(t);     else {       string ans(N, '*');       int ix = -1;       for (int n = (0); n < (6); ++n)         if (b[n] == mx)           ix = n;        for (int n = (0); n < (6); ++n)         if (n != ix && b[n]) {           ans[0] = col[n];           b[n]--;           ix = n;           break;         }       for (int n = 1; n < N; ++n) {         int mix = -1;         for (int j = (0); j < (6); ++j)           xusxcbeeov(b, ix, mix, j);         ans[n] = col[mix];         b[mix]--;         ix = mix;       }        if (!check(orig, ans)) {         for (int n = (0); n < (6); ++n)           printf("%d ", orig[n]);         printf("\n");         printf("%s\n", ans.c_str());         return 1;       }        printf("Case #%d: %s\n", t, ans.c_str());     }   }    return 0; }
#include <algorithm> #include <climits> #include <cmath> #include <cstdio> #include <cstring> #include <fstream> #include <iostream> #include <iterator> #include <map> #include <queue> #include <set> #include <stack> #include <string> #include <unordered_map> #include <utility> #include <vector>   using namespace std; 
const double EPS = 1e-9;  const long double PI = 3.1415926535897932384626433832795; const int MOD = 1000000007; const int INF = 1000000000; using ll = long long; using ull = unsigned long long; using pii = pair<int, int>; using pll = pair<ll, ll>; using vi = vector<int>; using vll = vector<ll>; using pill = pair<int, ll>; using vvi = vector<vi>;  ll fast_exp(ll q, ll n, ll m) {   if (n == 0)     return 1;   ll t = fast_exp(q, n / 2, m);   if (n % 2 == 0)     return (t * t) % m;   else     return (((t * t) % m) * q) % m; }  bool solve(int i, ll mask) { return (mask >> i) & 1; }  int count_bits(ll mask) {   int ans = 0;   for (int i = 0; i < 64; ++i)     if (solve(i, mask))       ++ans;   return ans; }  int first_bit(ll mask) {   int ret_val = -1;   int i = 0;   while (i < 64)     if (solve(i++, mask))       return i - 1;   return ret_val; }  
int main() {    int t;   cin >> t;    for (int i = 1; i <= t; ++i) {     int n, r, o, y, g, b, v;     cin >> n >> r >> o >> y >> g >> b >> v;     int ma = n / 2;     cout << "Case #" << i << ": ";     if (r > ma || y > ma || b > ma) {       cout << "IMPOSSIBLE\n";       continue;     }     vector<pair<int, char>> V;     V.push_back(make_pair(r, 'R')), V.push_back(make_pair(y, 'Y')),         V.push_back(make_pair(b, 'B'));     sort(V.begin(), V.end());     char s[n + 1];     int p = 0;     int a = V[2].first;     while (a--)       s[p] = V[2].second, p = (p + 2) % n, p = (p == 0 ? 1 : p);     a = V[1].first;     while (a--)       s[p] = V[1].second, p = (p + 2) % n, p = (p == 0 ? 1 : p);     a = V[0].first;     while (a--)       s[p] = V[0].second, p = (p + 2) % n, p = (p == 0 ? 1 : p);     for (int i = 0; i < n; ++i)       cout << s[i];     cout << "\n";   }   return 0; }
#include <algorithm> #include <climits> #include <cmath> #include <cstdio> #include <cstring> #include <iostream> #include <iterator> #include <map> #include <queue> #include <set> #include <stack> #include <stdio.h> #include <string> #include <unordered_map> #include <utility> #include <vector>    using namespace std; 
const int MOD = 1000000007;  using ll = long long; using ull = unsigned long long; using pii = pair<int, int>; using pll = pair<ll, ll>; using vi = vector<int>; using vll = vector<ll>; using pill = pair<int, ll>; using vvi = vector<vi>;  inline void qrygesunkn(ll &a, ll &b, ll &t) {   a = b;   b = t; }  ll gcd(ll a, ll b) {   ll t;   while ((t = a % b) != 0)     qrygesunkn(a, b, t);   return b; }  ll fast_exp(ll j, ll n, ll q) {   if (n == 0)     return 1;   ll t = fast_exp(j, n / 2, q);   if (n % 2 == 0)     return (t * t) % q;   else     return (((t * t) % q) * j) % q; }  bool is_set(int i, ll N) { return (N >> i) & 1; }  inline void teanbokvkz(int &i, ll &N, int &ans) {   if (is_set(i, N))     ++ans; }  int count_bits(ll N) {   int ans = 0;   for (int i = 0; i < 64; ++i)     teanbokvkz(i, N, ans);   return ans; }  int first_bit(ll N) {   int ret_val = -1;   int i = 0;   while (i < 64)     if (is_set(i++, N))       return i - 1;   return ret_val; } 
int main() {   freopen("/home/seal12/Downloads/ramdisk/blackbox_8294486_5654117850546176_10_Usenix_RF_1.0_True_MCTS_Classic_True/try/ibrahim5253/outer_temp/ibrahim5253/A-small-practice_transformation.out",           "w", stdout);    int t;   scanf("%d ", &t);   for (int i = 1; i <= t; ++i) {     int n, r, o, y, g, b, v;     scanf("%d %d %d %d %d %d %d ", &n, &r, &o, &y, &g, &b, &v);     int tc = n / 2;     printf("Case #%d: ", i);     if (b > tc) {       printf("IMPOSSIBLE\n");       continue;     } else if (r > tc || y > tc) {       printf("IMPOSSIBLE\n");       continue;     }     vector<pair<int, char>> V;     V.push_back(make_pair(r, 'R')), V.push_back(make_pair(y, 'Y')),         V.push_back(make_pair(b, 'B'));     sort(V.begin(), V.end());     char s[n + 1];     int p = 0;     int a = V[2].first;     while (a--)       s[p] = V[2].second, p = (p + 2) % n, p = (p == 0 ? 1 : p);     a = V[1].first;     while (a--)       s[p] = V[1].second, p = (p + 2) % n, p = (p == 0 ? 1 : p);     a = V[0].first;     while (a--)       s[p] = V[0].second, p = (p + 2) % n, p = (p == 0 ? 1 : p);     for (int i = 0; i < n; ++i)       printf("%c", s[i]);     printf("\n");   }   return 0; }
#include <algorithm> #include <bitset> #include <cassert> #include <cctype> #include <climits> #include <cmath> #include <complex> #include <cstdio> #include <cstring> #include <deque> #include <fstream> #include <functional> #include <iomanip> #include <iostream> #include <iterator> #include <list> #include <map> #include <math.h> #include <numeric> #include <queue> #include <set> #include <sstream> #include <stack> #include <stdio.h> #include <stdlib.h> #include <string> #include <unordered_map> #include <utility> #include <vector>   using namespace std; 
const long double PI = 3.1415926535897932384626433832795; ofstream fout;  const int MAXN = 1005; const double eps = 1e-9; const int INF = 1000000000; typedef long long LL; typedef pair<int, int> PII; typedef vector<int> VI;  ifstream fin;  using ll = long long; using ull = unsigned long long; using pii = pair<int, int>; using pll = pair<ll, ll>; using vi = vector<int>; using vll = vector<ll>; using pill = pair<int, ll>; using vvi = vector<vi>;  ll gcd(ll a, ll b) {   ll t;   while ((t = a % b) != 0) {     a = b;     b = t;   }   return b; }  ll fast_exp(ll base, ll n, ll m) {   if (n == 0)     return 1;   ll t = fast_exp(base, n / 2, m);   if (n % 2 == 0)     return (t * t) % m;   else     return (((t * t) % m) * base) % m; }  bool is_set(int i, ll mask) { return (mask >> i) & 1; }  int first_bit(ll mask) {   int i = 0;   while (i < 64)     if (is_set(i++, mask))       return i - 1;   return -1; }  
int main() {   fout.open("/home/seal12/Downloads/ramdisk/blackbox_8294486_5654117850546176_10_Usenix_RF_1.0_True_MCTS_Classic_True/WCG/ibrahim5253/outer_temp/ibrahim5253/A-small-practice_transformation.out");    fin.open("/home/seal12/Downloads/ramdisk/blackbox_8294486_5654117850546176_10_Usenix_RF_1.0_True_MCTS_Classic_True/WCG/ibrahim5253/A-small-practice.in");    int t;   fin >> t;   for (int i = 1; i <= t; ++i) {     int n, r, o, y, g, b, v;     fin >> n >> r >> o >> y >> g >> b >> v;     int ma = n / 2;     fout << "Case #" << i << ": ";     if (b > ma) {       fout << "IMPOSSIBLE\n";       continue;     } else if (r > ma || y > ma) {       fout << "IMPOSSIBLE\n";       continue;     }     vector<pair<int, char>> V;     V.push_back(make_pair(r, 'R')), V.push_back(make_pair(y, 'Y')),         V.push_back(make_pair(b, 'B'));     sort(V.begin(), V.end());     char s[n + 1];     int p = 0;     int a = V[2].first;     while (a--)       s[p] = V[2].second, p = (p + 2) % n, p = (p == 0 ? 1 : p);     a = V[1].first;     while (a--)       s[p] = V[1].second, p = (p + 2) % n, p = (p == 0 ? 1 : p);     a = V[0].first;     while (a--)       s[p] = V[0].second, p = (p + 2) % n, p = (p == 0 ? 1 : p);     {       int i = 0;       while (i < n) {         fout << s[i];         ++i;       }     }     fout << "\n";   }   return 0; }
#include <algorithm> #include <bits/stdc++.h> #include <climits> #include <cmath> #include <cstdio> #include <cstring> #include <fstream> #include <iomanip> #include <iostream> #include <iterator> #include <map> #include <queue> #include <set> #include <stack> #include <string> #include <unordered_map> #include <utility> #include <vector>    using namespace std; 
typedef double dbl;  ofstream fout;  using ll = long long; using ull = unsigned long long; using pii = pair<int, int>; using pll = pair<ll, ll>; using vi = vector<int>; using vll = vector<ll>; using pill = pair<int, ll>; using vvi = vector<vi>;  ll gcd(ll a, ll b) {   ll t;   for (; (t = a % b) != 0;) {     a = b;     b = t;   }   return b; }  ll do_llqsz_fct(ll tc, ll n, ll m) {   if (n == 0)     return 1;   ll t = do_llqsz_fct(tc, n / 2, m);   if (n % 2 == 0)     return (t * t) % m;   else     return (((t * t) % m) * tc) % m; }  bool is_set(int i, ll invl_Var) { return (invl_Var >> i) & 1; }  int do_intrro_fct(ll invl_Var) {   int nkai_Var = 0;   int i;   for (i = 0; i < 64; ++i)     if (is_set(i, invl_Var))       ++nkai_Var;   return nkai_Var; }  int first_bit(ll invl_Var) {   int ret_val = -1;   int i = 0;   while (i < 64)     if (is_set(i++, invl_Var))       return i - 1;   return ret_val; }  
int main() {   fout.open("/home/seal12/Downloads/ramdisk/blackbox_8294486_5681755159789568_10_Usenix_RF_1.0_True_MCTS_Classic_True/4yn/ibrahim5253/outer_temp/ibrahim5253/A-small-practice_transformation.out");    int ret_val = 0;    int t;   cin >> t;   for (int i = 1; i <= t; ++i) {     int n, q;     cin >> n >> q;     ll e[n], qckl_Var[n];     for (int i = 0; i < n; ++i)       cin >> e[i] >> qckl_Var[i];     ll d[n][n];     for (int i = 0; i < n; ++i)       for (int axwi_Var = 0; axwi_Var < n; ++axwi_Var)         cin >> d[i][axwi_Var];     {       int u, mgni_Var;       cin >> u >> mgni_Var;       --u, --mgni_Var;       double dp[n];       dp[0] = 0;       for (int i = 1; i < n; ++i) {         dp[i] = 1e12;         ll dist = 0;         for (int axwi_Var = i - 1; axwi_Var >= 0; --axwi_Var) {           dist += d[axwi_Var][axwi_Var + 1];           if (e[axwi_Var] > dist)             dp[i] = min(dp[i], dp[axwi_Var] + dist / static_cast<double>(                                                          qckl_Var[axwi_Var]));         }       }       fout << "Case #" << i << ": " << fixed << setprecision(10) << dp[mgni_Var]            << "\n";     }   }   return ret_val; }
#include <algorithm> #include <bits/stdc++.h> #include <bitset> #include <cassert> #include <cctype> #include <climits> #include <cmath> #include <complex> #include <cstdio> #include <cstring> #include <ctime> #include <fstream> #include <iomanip> #include <iostream> #include <iterator> #include <map> #include <math.h> #include <numeric> #include <queue> #include <set> #include <sstream> #include <stack> #include <stdio.h> #include <stdlib.h> #include <string> #include <unordered_map> #include <utility> #include <vector>   using namespace std; 
typedef long double LD; typedef vector<int> VI; typedef pair<int, int> ii;  using ll = long long; using ull = unsigned long long; using pii = pair<int, int>; using pll = pair<ll, ll>; using vi = vector<int>; using vll = vector<ll>; using pill = pair<int, ll>; using vvi = vector<vi>;  ll get(ll a, ll b) {   ll t;   for (; (t = a % b) != 0;) {     a = b;     b = t;   }   return b; }  ll fast_exp(ll y, ll n, ll N) {   if (n == 0)     return 1;   ll t = fast_exp(y, n / 2, N);   if (n % 2 == 0)     return (t * t) % N;   else     return (((t * t) % N) * y) % N; }  bool is_set(int i, ll x) { return (x >> i) & 1; }  int do_intgcw_fct(ll x) {   int ans = 0;   for (int i = 0; i < 64; ++i)     if (is_set(i, x))       ++ans;   return ans; }  int solve(ll x) {   int i = 0;   while (i < 64)     if (is_set(i++, x))       return i - 1;   return -1; }  
int main() {   ios::sync_with_stdio(false);   int t;   cin >> t;   for (int i = 1; i <= t; ++i) {     int n, q;     cin >> n >> q;     ll e[n], s[n];     for (int i = 0; i < n; ++i)       cin >> e[i] >> s[i];     ll d[n][n];     for (int i = 0; i < n; ++i)       for (int j = 0; j < n; ++j)         cin >> d[i][j];     {       int u, v;       cin >> u >> v;       --u, --v;       vector<double> dp(n);       dp[0] = 0;       for (int i = 1; i < n; ++i) {         dp[i] = 1e12;         ll dist = 0;         for (int j = i - 1; j >= 0; --j) {           dist += d[j][j + 1];           if (e[j] > dist)             dp[i] = min(dp[i], dp[j] + dist / static_cast<double>(s[j]));         }       }       printf("Case #%d: %.10f\n", i, dp[v]);     }   }   return 0; }
#include <algorithm> #include <bits/stdc++.h> #include <climits> #include <cmath> #include <cstdio> #include <cstring> #include <iostream> #include <iterator> #include <map> #include <queue> #include <set> #include <stack> #include <stdio.h> #include <string> #include <unordered_map> #include <utility> #include <vector>   using namespace std; 
using ll = long long; using ull = unsigned long long; using pii = pair<int, int>; using pll = pair<ll, ll>; using vi = vector<int>; using vll = vector<ll>; using pill = pair<int, ll>; using vvi = vector<vi>;  ll gcd(ll a, ll cc) {   ll vpnl_Var;   while ((vpnl_Var = a % cc) != 0) {     a = cc;     cc = vpnl_Var;   }   return cc; }  ll fast_exp(ll gasl_Var, ll tt, ll m) {   if (tt == 0)     return 1;   ll vpnl_Var = fast_exp(gasl_Var, tt / 2, m);   if (tt % 2 == 0)     return (vpnl_Var * vpnl_Var) % m;   else     return (((vpnl_Var * vpnl_Var) % m) * gasl_Var) % m; }  bool is_set(int i, ll mask) { return (mask >> i) & 1; }  int do_intzlz_fct(ll mask) {   int ans = 0;   for (int i = 0; i < 64; ++i)     if (is_set(i, mask))       ++ans;    return ans; }  inline bool oljcitjuvm(ll &mask, int &i, int &oljci) {   if (is_set(i++, mask))     oljci = i - 1;   return true;   return false; }  int first_bit(ll mask) {   int i = 0;   while (i < 64) {     int oljci;     if (oljcitjuvm(mask, i, oljci)) {       return oljci;     }   }   return -1; }  
int main() {   freopen("/home/seal12/Downloads/ramdisk/blackbox_8294486_5681755159789568_11_Usenix_RF_1.0_True_MCTS_Classic_True/fragusbot/ibrahim5253/A-small-practice.in",           "r", stdin);    freopen("/home/seal12/Downloads/ramdisk/blackbox_8294486_5681755159789568_11_Usenix_RF_1.0_True_MCTS_Classic_True/fragusbot/ibrahim5253/outer_temp/ibrahim5253/A-small-practice_transformation.out",           "w", stdout);    int ret_val = 0;    int vpnl_Var;   scanf("%d ", &vpnl_Var);   for (int i = 1; i <= vpnl_Var; ++i) {     int tt, q;     scanf("%d %d ", &tt, &q);     ll e[tt], zgtl_Var[tt];     for (int i = 0; i < tt; ++i)       scanf("%lld %lld ", &e[i], &zgtl_Var[i]);     ll d[tt][tt];     for (int i = 0; i < tt; ++i)       for (int pjei_Var = 0; pjei_Var < tt; ++pjei_Var)         scanf("%lld ", &d[i][pjei_Var]);     {       int u, v;       scanf("%d %d ", &u, &v);       --u, --v;       vector<double> dp(tt);       dp[0] = 0;       {         int i = 1;         while (i < tt) {           dp[i] = 1e12;           ll dist = 0;           for (int pjei_Var = i - 1; pjei_Var >= 0; --pjei_Var) {             dist += d[pjei_Var][pjei_Var + 1];             if (e[pjei_Var] > dist)               dp[i] = min(dp[i], dp[pjei_Var] + dist / static_cast<double>(                                                            zgtl_Var[pjei_Var]));           }           ++i;         }       }       printf("Case #%d: %.10f\n", i, dp[v]);     }   }   return ret_val; }
#include <algorithm> #include <bits/stdc++.h> #include <bitset> #include <cassert> #include <cctype> #include <climits> #include <cmath> #include <complex> #include <cstdio> #include <cstring> #include <ctime> #include <deque> #include <fstream> #include <functional> #include <iomanip> #include <iostream> #include <iterator> #include <list> #include <map> #include <math.h> #include <numeric> #include <queue> #include <set> #include <sstream> #include <stack> #include <stdlib.h> #include <string> #include <unordered_map> #include <utility> #include <vector>   using namespace std; 
typedef long double ld; typedef pair<int, int> PII; typedef long double LD;  const int INF = 1000000000; ofstream fout;  ifstream fin;  using ll = long long; using ull = unsigned long long; using pii = pair<int, int>; using pll = pair<ll, ll>; using vi = vector<int>; using vll = vector<ll>; using pill = pair<int, ll>; using vvi = vector<vi>;  ll gcd(ll a, ll b) {   ll t;   for (; (t = a % b) != 0;) {     a = b;     b = t;   }   return b; }  ll fast_exp(ll N, ll n, ll m) {   if (n == 0)     return 1;   ll t = fast_exp(N, n / 2, m);   if (n % 2 == 0)     return (t * t) % m;   else     return (((t * t) % m) * N) % m; }  bool is_set(int i, ll mask) { return (mask >> i) & 1; }  int get(ll mask) {   int ans = 0;   for (int i = 0; i < 64; ++i)     if (is_set(i, mask))       ++ans;    return ans; }  int first_bit(ll mask) {   int ret_val = -1;   int i = 0;   while (i < 64)     if (is_set(i++, mask))       return i - 1;   return ret_val; }  
int main() {   fout.open("/home/seal12/Downloads/ramdisk/blackbox_8294486_5681755159789568_11_Usenix_RF_1.0_True_MCTS_Classic_True/gultai4ukr/ibrahim5253/outer_temp/ibrahim5253/A-small-practice_transformation.out");    fin.open("/home/seal12/Downloads/ramdisk/blackbox_8294486_5681755159789568_11_Usenix_RF_1.0_True_MCTS_Classic_True/gultai4ukr/ibrahim5253/A-small-practice.in");    int t;   fin >> t;   for (int i = 1; i <= t; ++i) {     int n, q;     fin >> n >> q;     ll e[n], s[n];     for (int i = 0; i < n; ++i)       fin >> e[i] >> s[i];     ll d[n][n];     for (int i = 0; i < n; ++i)       for (int j = 0; j < n; ++j)         fin >> d[i][j];     {       int u, v;       fin >> u >> v;       --u, --v;       vector<double> dp(n);       dp[0] = 0;       for (int i = 1; i < n; ++i) {         dp[i] = 1e12;         ll dist = 0;         for (int j = i - 1; j >= 0; --j) {           dist += d[j][j + 1];           if (e[j] > dist)             dp[i] = min(dp[i], dp[j] + dist / static_cast<double>(s[j]));         }       }       fout << "Case #" << i << ": " << fixed << setprecision(10) << dp[v]            << "\n";     }   }   return 0; }
#include <algorithm> #include <cassert> #include <climits> #include <cstdio> #include <cstring> #include <deque> #include <fstream> #include <functional> #include <iomanip> #include <iostream> #include <map> #include <math.h> #include <set> #include <sstream> #include <stack> #include <stdio.h> #include <stdlib.h> #include <utility> #include <vector> using namespace std; 
typedef long long ll; typedef pair<int, int> pii; typedef vector<int> vi; typedef vector<int> VI; typedef long double LD;  int N, Q, U, V; int e[200]; double s[200]; int d[200][200]; int go[200];  double ans[200]; 
int main(void) {   int t;   cin >> t;   for (int tt = 1; tt <= t; tt++) {     cin >> N >> Q;     for (int i = 0; i < N; ++i)       cin >> e[i] >> s[i];     for (int i = 0; i < N; ++i)       for (int j = 0; j < N; ++j)         cin >> d[i][j];      for (int k = 0; k < N; ++k)       for (int i = 0; i < N; ++i)         for (int j = 0; j < N; ++j) {           if (i == j || d[i][k] < 0 || d[k][j] < 0)             continue;           if (d[i][j] < 0 || d[i][j] >= d[i][k] + d[k][j]) {             d[i][j] = d[i][k] + d[k][j];           }         }      printf("Case #%d:", tt);      for (; Q--;) {       cin >> U >> V;       --U, --V;       for (int i = 0; i < N; ++i) {         ans[i] = -1;         go[i] = false;       }       ans[U] = 0;         int cur = U;       while (true) {         go[cur] = true;         for (int i = 0; i < N; ++i) {           if (d[cur][i] > e[cur] || d[cur][i] < 0)             continue;           if (ans[i] < 0 || ans[i] > ans[cur] + d[cur][i] / s[cur])             ans[i] = ans[cur] + d[cur][i] / s[cur];         }          double mind = -1;         for (int i = 0; i < N; ++i) {           if (go[i] || ans[i] < 0)             continue;           if (mind < 0 || mind > ans[i]) {             cur = i;             mind = ans[i];           }         }          if (mind < 0)           break;       }        printf(" %lf", ans[V]);     }      puts("");   }   return 0; }
#include <algorithm> #include <bitset> #include <cassert> #include <cctype> #include <climits> #include <cmath> #include <cstdio> #include <cstring> #include <ctime> #include <deque> #include <fstream> #include <iomanip> #include <iostream> #include <list> #include <math.h> #include <numeric> #include <queue> #include <set> #include <stack> #include <utility> #include <vector>  using namespace std; 
typedef long long ll; typedef pair<int, int> pii; typedef pair<int, int> PII; typedef vector<int> vi; typedef long double LD; typedef set<int> si;  long long gra[100 + 1][100 + 1]; int lim[100 + 1], spd[100 + 1], vis[100 + 1]; double dis[100 + 1]; int n, q;  inline void tqdorkosgd(double &newd, int &u, int &j) {   if ((vis[j] == 0) && (newd > dis[j])) {     newd = dis[j];     u = j;   } }  double dijkstra(int s, int e) {   int i, j, u;   double newd;   memset(vis, 0, sizeof(vis));   fill(dis + 1, dis + n + 1, 1000000000000000000LL);   dis[s] = 0.0;   for (i = 1; i <= n; i++) {     newd = 1000000000000000000LL;     u = -1;     for (j = 1; j <= n; j++)       tqdorkosgd(newd, u, j);     if (u == -1) {       break;     }     vis[u] = 1;     for (j = 1; j <= n; j++) {       if ((lim[u] >= gra[u][j]) &&           (dis[j] > dis[u] + 1.0 * gra[u][j] / spd[u])) {         dis[j] = dis[u] + 1.0 * gra[u][j] / spd[u];       }     }   }   return dis[e]; }  inline void sjldahmdii(int &p, int &j, int &c, int &i, int &u, int &v) {   cin >> n >> q;   for (i = 1; i <= n; i++) {     cin >> lim[i] >> spd[i];   }   for (i = 1; i <= n; i++) {     for (j = 1; j <= n; j++) {       cin >> gra[i][j];       if (gra[i][j] == -1)         gra[i][j] = 1000000000000000000LL;     }   }   for (p = 1; p <= n; p++) {     for (i = 1; i <= n; i++) {       for (j = 1; j <= n; j++) {         gra[i][j] = min(gra[i][j], gra[i][p] + gra[p][j]);       }     }   }   cout << "Case #" << c + 1 << ":";   for (i = 0; i < q; i++) {     cin >> u >> v;     cout << " " << fixed << setprecision(9) << dijkstra(u, v);   }   cout << "\n"; }  
int main() {    int t, i, j, p, u, v;   cin >> t;   for (int c = 0; c < t; c++)     sjldahmdii(p, j, c, i, u, v);   return 0; }
#include <algorithm> #include <climits> #include <cmath> #include <cstdio> #include <cstring> #include <iostream> #include <iterator> #include <map> #include <queue> #include <set> #include <stack> #include <stdio.h> #include <string> #include <unordered_map> #include <utility> #include <vector>   using namespace std; 
using ll = long long; using ull = unsigned long long; using pii = pair<int, int>; using pll = pair<ll, ll>; using vi = vector<int>; using vll = vector<ll>; using pill = pair<int, ll>; using vvi = vector<vi>;  ll do_llzto_fct(ll zkxl_Var, ll mucl_Var) {   ll t;   while ((t = zkxl_Var % mucl_Var) != 0) {     zkxl_Var = mucl_Var;     mucl_Var = t;   }   return mucl_Var; }  ll do_llxum_fct(ll base, ll n, ll tt) {   if (n == 0)     return 1;   ll t = do_llxum_fct(base, n / 2, tt);   if (n % 2 == 0) {     return (t * t) % tt;   } else     return (((t * t) % tt) * base) % tt; }  bool do__Boauo_fct(int i, ll mask) { return (mask >> i) & 1; }  int do_intsya_fct(ll mask) {   int ans = 0;   for (int i = 0; i < 64; ++i)     if (do__Boauo_fct(i, mask))       ++ans;   return ans; }  inline void eeuicigclo(int &i) {   int n, q;   scanf("%d %d ", &n, &q);   ll e[n], s[n];   for (int i = 0; i < n; ++i)     scanf("%lld %lld ", &e[i], &s[i]);   ll d[n][n];   for (int i = 0; i < n; ++i)     for (int oxri_Var = 0; oxri_Var < n; ++oxri_Var)       scanf("%lld ", &d[i][oxri_Var]);   {     int u, v;     scanf("%d %d ", &u, &v);     --u, --v;     vector<double> dp(n);     dp[0] = 0;     for (int i = 1; i < n; ++i) {       dp[i] = 1e12;       ll dist = 0;       {         int oxri_Var = i - 1;         while (oxri_Var >= 0) {           dist += d[oxri_Var][oxri_Var + 1];           if (e[oxri_Var] > dist)             dp[i] = min(dp[i],                         dp[oxri_Var] + dist / static_cast<double>(s[oxri_Var]));           --oxri_Var;         }       }     }     printf("Case #%d: %.10f\n", i, dp[v]);   } }  
int main() {    int t;   scanf("%d ", &t);   for (int i = 1; i <= t; ++i)     eeuicigclo(i);   return 0; }
#include <algorithm> #include <bits/stdc++.h> #include <climits> #include <cmath> #include <cstdio> #include <cstring> #include <iomanip> #include <iostream> #include <iterator> #include <map> #include <queue> #include <set> #include <stack> #include <stdio.h> #include <string> #include <unordered_map> #include <utility> #include <vector>   using namespace std; 
using ll = long long; using ull = unsigned long long; using pii = pair<int, int>; using pll = pair<ll, ll>; using vi = vector<int>; using vll = vector<ll>; using pill = pair<int, ll>; using vvi = vector<vi>;  bool is_set(int i, ll mask) { return (mask >> i) & 1; }  int count_bits(ll mask) {   int ans = 0;   for (int i = 0; i < 64; ++i)     if (is_set(i, mask))       ++ans;   return ans; }  
int main() {   ios::sync_with_stdio(false);    freopen("/home/seal12/Downloads/ramdisk/blackbox_8294486_5681755159789568_11_Usenix_RF_1.0_True_MCTS_Classic_True/jiian/ibrahim5253/A-small-practice.in",           "r", stdin);    freopen("/home/seal12/Downloads/ramdisk/blackbox_8294486_5681755159789568_11_Usenix_RF_1.0_True_MCTS_Classic_True/jiian/ibrahim5253/outer_temp/ibrahim5253/A-small-practice_transformation.out",           "w", stdout);    int cas;   cin >> cas;   for (int i = 1; i <= cas; ++i) {     int n, q;     cin >> n >> q;     ll e[n], r[n];     for (int i = 0; i < n; ++i)       cin >> e[i] >> r[i];     ll d[n][n];     for (int i = 0; i < n; ++i)       for (int ecci_Var = 0; ecci_Var < n; ++ecci_Var)         cin >> d[i][ecci_Var];     {       int u, v;       cin >> u >> v;       --u, --v;       vector<double> dp(n);       dp[0] = 0;       for (int i = 1; i < n; ++i) {         dp[i] = 1e12;         ll dist = 0;         for (int ecci_Var = i - 1; ecci_Var >= 0; --ecci_Var) {           dist += d[ecci_Var][ecci_Var + 1];           if (e[ecci_Var] > dist)             dp[i] = min(dp[i],                         dp[ecci_Var] + dist / static_cast<double>(r[ecci_Var]));         }       }       printf("Case #%d: %.10f\n", i, dp[v]);     }   }   return 0; }
#include <algorithm> #include <bitset> #include <cassert> #include <climits> #include <cmath> #include <complex> #include <cstdio> #include <cstdlib> #include <cstring> #include <ctime> #include <deque> #include <fstream> #include <functional> #include <iomanip> #include <iostream> #include <iterator> #include <list> #include <map> #include <math.h> #include <numeric> #include <queue> #include <set> #include <sstream> #include <stack> #include <stdio.h> #include <stdlib.h> #include <string> #include <unordered_map> #include <utility> #include <vector>   using namespace std; 
const int MAXN = 1005; const double EPS = 1e-9; const long double PI = 3.1415926535897932384626433832795; const int MOD = 1000000007; const int mod = 1000000007;  using ll = long long; using ull = unsigned long long; using pii = pair<int, int>; using pll = pair<ll, ll>; using vi = vector<int>; using vll = vector<ll>; using pill = pair<int, ll>; using vvi = vector<vi>;  ll gcd(ll a, ll b) {   ll t;   while ((t = a % b) != 0) {     a = b;     b = t;   }   return b; }  ll fast_exp(ll base, ll n, ll tc) {   if (n == 0)     return 1;   ll t = fast_exp(base, n / 2, tc);   if (n % 2 == 0)     return (t * t) % tc;   else     return (((t * t) % tc) * base) % tc; }  bool is_set(int i, ll mask) { return (mask >> i) & 1; }  int get(ll mask) {   int ret_val = -1;   int i = 0;   while (i < 64)     if (is_set(i++, mask))       return i - 1;   return ret_val; }  
int main() {    int t;   cin >> t;   for (int i = 1; i <= t; ++i) {     int n, q;     cin >> n >> q;     ll e[n], s[n];     for (int i = 0; i < n; ++i)       cin >> e[i] >> s[i];     ll d[n][n];     for (int i = 0; i < n; ++i)       for (int j = 0; j < n; ++j)         cin >> d[i][j];     {       int u, v;       cin >> u >> v;       --u, --v;       vector<double> dp(n);       dp[0] = 0;       for (int i = 1; i < n; ++i) {         dp[i] = 1e12;         ll dist = 0;         for (int j = i - 1; j >= 0; --j) {           dist += d[j][j + 1];           if (e[j] > dist)             dp[i] = min(dp[i], dp[j] + dist / static_cast<double>(s[j]));         }       }       printf("Case #%d: %.10f\n", i, dp[v]);     }   }   return 0; }
#include <algorithm> #include <bitset> #include <cassert> #include <cctype> #include <climits> #include <cmath> #include <complex> #include <cstdio> #include <cstdlib> #include <cstring> #include <ctime> #include <deque> #include <fstream> #include <iomanip> #include <iostream> #include <iterator> #include <list> #include <map> #include <math.h> #include <queue> #include <set> #include <stack> #include <stdio.h> #include <stdlib.h> #include <string> #include <unordered_map> #include <utility> #include <vector>   using namespace std; 
const double EPS = 1e-9; typedef vector<int> VI; typedef long long LL; typedef pair<int, int> ii; typedef long double ld; typedef set<int> si;  using ll = long long; using ull = unsigned long long; using pii = pair<int, int>; using pll = pair<ll, ll>; using vi = vector<int>; using vll = vector<ll>; using pill = pair<int, ll>; using vvi = vector<vi>;  ll get(ll a, ll b) {   ll t;   for (; (t = a % b) != 0;) {     a = b;     b = t;   }   return b; }  ll fast_exp(ll base, ll n, ll m) {   if (n == 0)     return 1;   ll t = fast_exp(base, n / 2, m);   if (n % 2 == 0)     return (t * t) % m;   else     return (((t * t) % m) * base) % m; }  bool is_set(int i, ll mask) { return (mask >> i) & 1; }  int first_bit(ll mask) {   int i = 0;   while (i < 64)     if (is_set(i++, mask))       return i - 1;   return -1; }  
int main() {   int ret_val = 0;   freopen("/home/seal12/Downloads/ramdisk/blackbox_8294486_5681755159789568_11_Usenix_RF_1.0_True_MCTS_Classic_True/lazyBit/ibrahim5253/A-small-practice.in",           "r", stdin);   int t;   scanf("%d ", &t);   for (int i = 1; i <= t; ++i) {     int n, q;     scanf("%d %d ", &n, &q);     ll e[n], s[n];     {       int i = 0;       while (i < n) {         scanf("%lld %lld ", &e[i], &s[i]);         ++i;       }     }     ll d[n][n];     for (int i = 0; i < n; ++i) {       int j = 0;       while (j < n) {         scanf("%lld ", &d[i][j]);         ++j;       }     }     {       int u, v;       scanf("%d %d ", &u, &v);       --u, --v;       double dp[n];       dp[0] = 0;       for (int i = 1; i < n; ++i) {         dp[i] = 1e12;         ll dist = 0;         {           int j = i - 1;           while (j >= 0) {             dist += d[j][j + 1];             if (e[j] > dist)               dp[i] = min(dp[i], dp[j] + dist / static_cast<double>(s[j]));             --j;           }         }       }       cout << "Case #" << i << ": " << fixed << setprecision(10) << dp[v]            << "\n";     }   }   return ret_val; }
#include <algorithm> #include <bits/stdc++.h> #include <bitset> #include <cassert> #include <cctype> #include <climits> #include <cmath> #include <complex> #include <cstdio> #include <cstdlib> #include <cstring> #include <ctime> #include <deque> #include <fstream> #include <functional> #include <iomanip> #include <iostream> #include <iterator> #include <map> #include <math.h> #include <numeric> #include <queue> #include <set> #include <sstream> #include <stack> #include <stdio.h> #include <stdlib.h> #include <string> #include <unordered_map> #include <utility> #include <vector>   using namespace std; 
ifstream fin;  typedef long double ld; typedef long long LL; typedef pair<int, int> ii; typedef pair<int, int> PII;  using ll = long long; using ull = unsigned long long; using pii = pair<int, int>; using pll = pair<ll, ll>; using vi = vector<int>; using vll = vector<ll>; using pill = pair<int, ll>; using vvi = vector<vi>;  ll gcd(ll a, ll b) {   ll t;   while ((t = a % b) != 0) {     a = b;     b = t;   }   return b; }  ll fast_exp(ll base, ll n, ll N) {   if (n == 0)     return 1;   ll t = fast_exp(base, n / 2, N);   if (n % 2 == 0)     return (t * t) % N;   else     return (((t * t) % N) * base) % N; }  bool is_set(int i, ll mask) { return (mask >> i) & 1; }  int count_bits(ll mask) {   int ans = 0;   {     int i = 0;     while (i < 64) {       if (is_set(i, mask))         ++ans;       ++i;     }   }   return ans; }  inline void hsnkrscmix(int &i) {   int n, q;   fin >> n >> q;   ll e[n], s[n];   for (int i = 0; i < n; ++i)     fin >> e[i] >> s[i];   ll d[n][n];   for (int i = 0; i < n; ++i)     for (int j = 0; j < n; ++j)       fin >> d[i][j];   {     int u, v;     fin >> u >> v;     --u, --v;     vector<double> dp(n);     dp[0] = 0;     for (int i = 1; i < n; ++i) {       dp[i] = 1e12;       ll dist = 0;       for (int j = i - 1; j >= 0; --j) {         dist += d[j][j + 1];         if (e[j] > dist)           dp[i] = min(dp[i], dp[j] + dist / static_cast<double>(s[j]));       }     }     cout << "Case #" << i << ": " << fixed << setprecision(10) << dp[v] << "\n";   } }  
int main() {   ios::sync_with_stdio(false);    fin.open("/home/seal12/Downloads/ramdisk/blackbox_8294486_5681755159789568_11_Usenix_RF_1.0_True_MCTS_Classic_True/Mucosolvan/ibrahim5253/A-small-practice.in");    int t;   fin >> t;   for (int i = 1; i <= t; ++i)     hsnkrscmix(i);   return 0; }
#include <algorithm> #include <bits/stdc++.h> #include <bitset> #include <cassert> #include <cctype> #include <climits> #include <cmath> #include <complex> #include <cstdio> #include <cstdlib> #include <cstring> #include <deque> #include <fstream> #include <iostream> #include <iterator> #include <list> #include <map> #include <math.h> #include <queue> #include <set> #include <sstream> #include <stack> #include <stdio.h> #include <stdlib.h> #include <string> #include <unordered_map> #include <utility> #include <vector>   using namespace std; 
const double EPS = 1e-9; const int MOD = 1000000007; typedef long long LL; typedef long double ld; typedef pair<int, int> ii; typedef vector<int> VI; typedef long double LD;  const double eps = 1e-9; using ll = long long; using ull = unsigned long long; using pii = pair<int, int>; using pll = pair<ll, ll>; using vi = vector<int>; using vll = vector<ll>; using pill = pair<int, ll>; using vvi = vector<vi>;  bool is_set(int i, ll N) { return (N >> i) & 1; }  
int main() {    int t;   scanf("%d ", &t);   {     int i = 1;     while (i <= t) {       int n, q;       scanf("%d %d ", &n, &q);       ll e[n], s[n];       for (int i = 0; i < n; ++i)         scanf("%lld %lld ", &e[i], &s[i]);       ll d[n][n];       for (int i = 0; i < n; ++i)         for (int j = 0; j < n; ++j)           scanf("%lld ", &d[i][j]);       {         int u, v;         scanf("%d %d ", &u, &v);         --u, --v;         vector<double> dp(n);         dp[0] = 0;         for (int i = 1; i < n; ++i) {           dp[i] = 1e12;           ll dist = 0;           for (int j = i - 1; j >= 0; --j) {             dist += d[j][j + 1];             if (e[j] > dist)               dp[i] = min(dp[i], dp[j] + dist / static_cast<double>(s[j]));           }         }         printf("Case #%d: %.10f\n", i, dp[v]);       }       ++i;     }   }   return 0; }
#include <algorithm> #include <bits/stdc++.h> #include <bitset> #include <cassert> #include <cctype> #include <climits> #include <cmath> #include <complex> #include <cstdio> #include <cstdlib> #include <cstring> #include <ctime> #include <deque> #include <fstream> #include <functional> #include <iomanip> #include <iostream> #include <iterator> #include <list> #include <map> #include <math.h> #include <numeric> #include <queue> #include <set> #include <sstream> #include <stack> #include <stdio.h> #include <stdlib.h> #include <string> #include <unordered_map> #include <utility> #include <vector>   using namespace std; 
typedef long long LL; typedef pair<int, int> ii; typedef vector<int> VI;  using ll = long long; using ull = unsigned long long; using pii = pair<int, int>; using pll = pair<ll, ll>; using vi = vector<int>; using vll = vector<ll>; using pill = pair<int, ll>; using vvi = vector<vi>;  ll gcd(ll a, ll b) {   ll t;   while ((t = a % b) != 0) {     a = b;     b = t;   }   return b; }  ll fast_exp(ll base, ll n, ll m) {   if (n == 0)     return 1;   ll t = fast_exp(base, n / 2, m);   if (n % 2 == 0)     return (t * t) % m;   else {     return (((t * t) % m) * base) % m;   } }  bool is_set(int i, ll mask) { return (mask >> i) & 1; }  int count_bits(ll mask) {   int ans = 0;   for (int i = 0; i < 64; ++i)     if (is_set(i, mask))       ++ans;   return ans; }  int first_bit(ll mask) {   int i = 0;   while (i < 64)     if (is_set(i++, mask))       return i - 1;   return -1; }  
int main() {   ios::sync_with_stdio(false);    freopen("/home/seal12/Downloads/ramdisk/blackbox_8294486_5681755159789568_11_Usenix_RF_1.0_True_MCTS_Classic_True/satyaki3794/ibrahim5253/outer_temp/ibrahim5253/A-small-practice_transformation.out",           "w", stdout);    freopen("/home/seal12/Downloads/ramdisk/blackbox_8294486_5681755159789568_11_Usenix_RF_1.0_True_MCTS_Classic_True/satyaki3794/ibrahim5253/A-small-practice.in",           "r", stdin);    int t;   cin >> t;   for (int i = 1; i <= t; ++i) {     int n, q;     cin >> n >> q;     ll e[n], s[n];     {       int i = 0;       while (i < n) {         cin >> e[i] >> s[i];         ++i;       }     }     ll d[n][n];     for (int i = 0; i < n; ++i)       for (int j = 0; j < n; ++j)         cin >> d[i][j];     {       int u, v;       cin >> u >> v;       --u, --v;       double dp[n];       dp[0] = 0;       for (int i = 1; i < n; ++i) {         dp[i] = 1e12;         ll dist = 0;         for (int j = i - 1; j >= 0; --j) {           dist += d[j][j + 1];           if (e[j] > dist)             dp[i] = min(dp[i], dp[j] + dist / static_cast<double>(s[j]));         }       }       cout << "Case #" << i << ": " << fixed << setprecision(10) << dp[v]            << "\n";     }   }   return 0; }
#include <algorithm> #include <bitset> #include <climits> #include <cmath> #include <cstdio> #include <cstring> #include <ctime> #include <iostream> #include <iterator> #include <map> #include <queue> #include <set> #include <stack> #include <string> #include <unordered_map> #include <utility> #include <vector>   using namespace std; 
using ll = long long; using ull = unsigned long long; using pii = pair<int, int>; using pll = pair<ll, ll>; using vi = vector<int>; using vll = vector<ll>; using pill = pair<int, ll>; using vvi = vector<vi>;  ll readData(ll left_bound, ll b) {   ll t;   while ((t = left_bound % b) != 0) {     left_bound = b;     b = t;   }   return b; }  ll solve(ll base, ll argc, ll m) {   if (argc == 0)     return 1;   ll t = solve(base, argc / 2, m);   if (argc % 2 == 0)     return (t * t) % m;   else     return (((t * t) % m) * base) % m; }  bool do__Bojxo_fct(int i, ll mask) { return (mask >> i) & 1; }  int do_intbno_fct(ll mask) {   int right_bound = 0;   for (int i = 0; i < 64; ++i) {     if (do__Bojxo_fct(i, mask))       ++right_bound;   }   return right_bound; }  int do_intkel_fct(ll mask) {   int ret_val = -1;   int i = 0;   while (i < 64)     if (do__Bojxo_fct(i++, mask))       return i - 1;   return ret_val; }  
int main() {   freopen("/home/seal12/Downloads/ramdisk/blackbox_8294486_5681755159789568_11_Usenix_RF_1.0_True_MCTS_Classic_True/sdya/ibrahim5253/outer_temp/ibrahim5253/A-small-practice_transformation.out",           "w", stdout);    freopen("/home/seal12/Downloads/ramdisk/blackbox_8294486_5681755159789568_11_Usenix_RF_1.0_True_MCTS_Classic_True/sdya/ibrahim5253/A-small-practice.in",           "r", stdin);    int t;   cin >> t;   for (int i = 1; i <= t; ++i) {     int argc, q;     cin >> argc >> q;     ll e[argc], s[argc];     for (int i = 0; i < argc; ++i)       cin >> e[i] >> s[i];     ll d[argc][argc];     for (int i = 0; i < argc; ++i) {       int j = 0;       while (j < argc) {         cin >> d[i][j];         ++j;       }     }     {       int u, v;       cin >> u >> v;       --u, --v;       vector<double> dp(argc);       dp[0] = 0;       for (int i = 1; i < argc; ++i) {         dp[i] = 1e12;         ll dist = 0;         for (int j = i - 1; j >= 0; --j) {           dist += d[j][j + 1];           if (e[j] > dist)             dp[i] = min(dp[i], dp[j] + dist / static_cast<double>(s[j]));         }       }       printf("Case #%d: %.10f\n", i, dp[v]);     }   }   return 0; }
#include <algorithm> #include <climits> #include <cmath> #include <cstdio> #include <cstring> #include <iostream> #include <iterator> #include <map> #include <queue> #include <set> #include <stack> #include <stdio.h> #include <string> #include <unordered_map> #include <utility> #include <vector>   using namespace std; 
const int mod = 1000000007; const double eps = 1e-9; using ll = long long; using ull = unsigned long long; using pii = pair<int, int>; using pll = pair<ll, ll>; using vi = vector<int>; using vll = vector<ll>; using pill = pair<int, ll>; using vvi = vector<vi>;  ll gcd(ll a, ll b) {   ll t;   for (; (t = a % b) != 0;) {     a = b;     b = t;   }   return b; }  ll fast_exp(ll p, ll n, ll tc) {   if (n == 0)     return 1;   ll t = fast_exp(p, n / 2, tc);   if (n % 2 == 0)     return (t * t) % tc;   else     return (((t * t) % tc) * p) % tc; }  bool get(int i, ll mask) { return (mask >> i) & 1; }  int count_bits(ll mask) {   int ans = 0;   for (int i = 0; i < 64; ++i)     if (get(i, mask))       ++ans;   return ans; }  int solve(ll mask) {   int i = 0;   while (i < 64)     if (get(i++, mask))       return i - 1;   return -1; }  inline void nzyvxcjujl(int &i) {   int n, q;   cin >> n >> q;   ll e[n], s[n];   for (int i = 0; i < n; ++i)     cin >> e[i] >> s[i];   ll d[n][n];   for (int i = 0; i < n; ++i) {     for (int j = 0; j < n; ++j)       cin >> d[i][j];   }   {     int u, v;     cin >> u >> v;     --u, --v;     double dp[n];     dp[0] = 0;     for (int i = 1; i < n; ++i) {       dp[i] = 1e12;       ll dist = 0;        for (int j = i - 1; j >= 0; --j) {         dist += d[j][j + 1];         if (e[j] > dist)           dp[i] = min(dp[i], dp[j] + dist / static_cast<double>(s[j]));       }     }     printf("Case #%d: %.10f\n", i, dp[v]);   } }  
int main() {   freopen("/home/seal12/Downloads/ramdisk/blackbox_8294486_5681755159789568_10_Usenix_RF_1.0_True_MCTS_Classic_True/Tashi711/ibrahim5253/outer_temp/ibrahim5253/A-small-practice_transformation.out",           "w", stdout);    int t;   cin >> t;   for (int i = 1; i <= t; ++i)     nzyvxcjujl(i);   return 0; }
#include <algorithm> #include <climits> #include <cmath> #include <cstdio> #include <cstring> #include <fstream> #include <iomanip> #include <iostream> #include <iterator> #include <map> #include <queue> #include <set> #include <stack> #include <string> #include <unordered_map> #include <utility> #include <vector>   using namespace std; 
ofstream fout;  using ll = long long; using ull = unsigned long long; using pii = pair<int, int>; using pll = pair<ll, ll>; using vi = vector<int>; using vll = vector<ll>; using pill = pair<int, ll>; using vvi = vector<vi>;  ll solve(ll a, ll b) {   ll t;   for (; (t = a % b) != 0;) {     a = b;     b = t;   }   return b; }  ll fast_exp(ll base, ll n, ll y) {   if (n == 0)     return 1;   ll t = fast_exp(base, n / 2, y);   if (n % 2 == 0)     return (t * t) % y;   else     return (((t * t) % y) * base) % y; }  bool get(int i, ll N) { return (N >> i) & 1; }  int first_bit(ll N) {   int i = 0;   while (i < 64)     if (get(i++, N))       return i - 1;   return -1; }  
int main() {   freopen("/home/seal12/Downloads/ramdisk/blackbox_8294486_5681755159789568_11_Usenix_RF_1.0_True_MCTS_Classic_True/Thanabhat/ibrahim5253/A-small-practice.in", "r", stdin);    fout.open("/home/seal12/Downloads/ramdisk/blackbox_8294486_5681755159789568_11_Usenix_RF_1.0_True_MCTS_Classic_True/Thanabhat/ibrahim5253/outer_temp/ibrahim5253/A-small-practice_transformation.out");    int ret_val = 0;   int t;   cin >> t;   for (int i = 1; i <= t; ++i) {     int n, q;     cin >> n >> q;     ll e[n], s[n];     for (int i = 0; i < n; ++i)       cin >> e[i] >> s[i];     ll d[n][n];     for (int i = 0; i < n; ++i)       for (int j = 0; j < n; ++j)         cin >> d[i][j];     {       int u, v;       cin >> u >> v;       --u, --v;       double dp[n];       dp[0] = 0;       {         int i = 1;         for (; i < n;) {           dp[i] = 1e12;           ll dist = 0;           int j;           for (j = i - 1; j >= 0; --j) {             dist += d[j][j + 1];             if (e[j] > dist) {               dp[i] = min(dp[i], dp[j] + dist / static_cast<double>(s[j]));             }           }           ++i;         }       }       fout << "Case #" << i << ": " << fixed << setprecision(10) << dp[v]            << "\n";     }   }   return ret_val; }
#include <algorithm> #include <bitset> #include <cassert> #include <cctype> #include <climits> #include <cmath> #include <complex> #include <cstdio> #include <cstdlib> #include <cstring> #include <ctime> #include <deque> #include <fstream> #include <functional> #include <iomanip> #include <iostream> #include <iterator> #include <list> #include <map> #include <math.h> #include <numeric> #include <queue> #include <set> #include <sstream> #include <stack> #include <stdio.h> #include <string> #include <unordered_map> #include <utility> #include <vector>    using namespace std; 
const int mod = 1000000007; const int MAXN = 1005; const int INF = 1000000000; const long double PI = 3.1415926535897932384626433832795; using ll = long long; using ull = unsigned long long; using pii = pair<int, int>; using pll = pair<ll, ll>; using vi = vector<int>; using vll = vector<ll>; using pill = pair<int, ll>; using vvi = vector<vi>;  ll gcd(ll a, ll b) {   ll t;   while ((t = a % b) != 0) {     a = b;     b = t;   }   return b; }  ll get(ll base, ll n, ll m) {   if (n == 0)     return 1;   ll t = get(base, n / 2, m);   if (n % 2 == 0)     return (t * t) % m;   else     return (((t * t) % m) * base) % m; }  bool is_set(int i, ll mask) { return (mask >> i) & 1; }  int solve(ll mask) {   int ans = 0;   for (int i = 0; i < 64; ++i)     if (is_set(i, mask))       ++ans;   return ans; }  int first_bit(ll mask) {   int ret_val = -1;   int i = 0;   while (i < 64)     if (is_set(i++, mask))       return i - 1;   return ret_val; }  
int main() {   freopen("/home/seal12/Downloads/ramdisk/blackbox_8294486_5681755159789568_10_Usenix_RF_1.0_True_MCTS_Classic_True/try/ibrahim5253/A-small-practice.in",           "r", stdin);    freopen("/home/seal12/Downloads/ramdisk/blackbox_8294486_5681755159789568_10_Usenix_RF_1.0_True_MCTS_Classic_True/try/ibrahim5253/outer_temp/ibrahim5253/A-small-practice_transformation.out",           "w", stdout);    int t;   scanf("%d ", &t);   int i;   for (i = 1; i <= t; ++i) {     int n, q;     scanf("%d %d ", &n, &q);     ll e[n], s[n];     for (int i = 0; i < n; ++i)       scanf("%lld %lld ", &e[i], &s[i]);     ll d[n][n];     for (int i = 0; i < n; ++i)       for (int j = 0; j < n; ++j)         scanf("%lld ", &d[i][j]);     {       int u, v;       scanf("%d %d ", &u, &v);       --u, --v;       vector<double> dp(n);       dp[0] = 0;       for (int i = 1; i < n; ++i) {         dp[i] = 1e12;         ll dist = 0;         {           int j = i - 1;           while (j >= 0) {             dist += d[j][j + 1];             if (e[j] > dist)               dp[i] = min(dp[i], dp[j] + dist / static_cast<double>(s[j]));             --j;           }         }       }       printf("Case #%d: %.10f\n", i, dp[v]);     }   }   return 0; }
#include <bits/stdc++.h> #include <bitset> #include <cassert> #include <cctype> #include <climits> #include <cmath> #include <complex> #include <cstdio> #include <cstdlib> #include <cstring> #include <ctime> #include <fstream> #include <functional> #include <iomanip> #include <iostream> #include <list> #include <map> #include <math.h> #include <queue> #include <sstream> #include <stdio.h> #include <stdlib.h> #include <string> #include <utility> #include <vector> using namespace std;  
using VI = vector<int>; using VVI = vector<VI>; using PII = pair<int, int>; using LL = long long; using VL = vector<LL>; using VVL = vector<VL>; using PLL = pair<LL, LL>; using VS = vector<string>; template <class S, class T> istream &operator>>(istream &c, pair<S, T> &p) {   return c >> p.first >> p.second; } template <class S, class T> ostream &operator<<(ostream &d, const pair<S, T> &p) {   return d << p.first << " " << p.second; } template <class T> void maxi(T &x, T y) {   if (x < y)     x = y; } template <class T> void mini(T &x, T y) {   if (x > y)     x = y; }  const double INF = 1e15;  
int main() {    freopen("/home/seal12/Downloads/ramdisk/blackbox_8294486_5681755159789568_8_Usenix_RF_1.0_True_MCTS_Classic_True/try/okaduki/A-small-practice.in",           "r", stdin);    freopen("/home/seal12/Downloads/ramdisk/blackbox_8294486_5681755159789568_8_Usenix_RF_1.0_True_MCTS_Classic_True/try/okaduki/outer_temp/okaduki/A-small-practice_transformation.out",           "w", stdout);    cin.tie(0);    int q;   scanf("%d ", &q);   for (int a = (1); a < (q + 1); ++a) {     int N, Q;     scanf("%d %d ", &N, &Q);     vector<PLL> es(N);     for (int tc = (0); tc < (N); ++tc)       cin >> es[tc];      VVL dist(N, VL(N));     for (int tc = (0); tc < (N); ++tc) {       int j = (0);       while (j < (N)) {         cin >> dist[tc][j];         ++j;       }     }      while (Q--) {       int U, V;       scanf("%d %d ", &U, &V);       --U;       --V;        vector<LL> acc(N);       for (int tc = N - 2; tc >= 0; --tc)         acc[tc] = dist[tc][tc + 1] + acc[tc + 1];        vector<double> dp(N + 1, INF);       dp[N - 1] = 0;       for (int tc = N - 2; tc >= 0; --tc) {         for (int j = tc + 1; j < N; ++j) {           if (acc[tc] - acc[j] > es[tc].first)             break;           mini(dp[tc], dp[j] + (acc[tc] - acc[j]) * 1. / es[tc].second);         }       }       double b = dp[0];       printf("Case #%d: %.9f\n", a, b);     }   }    return 0; }
#include <algorithm> #include <climits> #include <cmath> #include <cstdio> #include <cstring> #include <fstream> #include <iomanip> #include <iostream> #include <iterator> #include <map> #include <queue> #include <set> #include <stack> #include <string> #include <unordered_map> #include <utility> #include <vector>   using namespace std; 
const double eps = 1e-9;  const int INF = 1000000000; using ll = long long; using ull = unsigned long long; using pii = pair<int, int>; using pll = pair<ll, ll>; using vi = vector<int>; using vll = vector<ll>; using pill = pair<int, ll>; using vvi = vector<vi>;  ll fast_exp(ll base, ll n, ll y) {   if (n == 0)     return 1;   ll t = fast_exp(base, n / 2, y);   if (n % 2 == 0) {     return (t * t) % y;   } else {     return (((t * t) % y) * base) % y;   } }  bool is_set(int i, ll mask) { return (mask >> i) & 1; }  
int main() {    int t;   cin >> t;   for (int i = 1; i <= t; ++i) {     int n, q;     cin >> n >> q;     ll e[n], s[n];     for (int i = 0; i < n; ++i)       cin >> e[i] >> s[i];      ll d[n][n];     for (int i = 0; i < n; ++i)       for (int j = 0; j < n; ++j)         cin >> d[i][j];     {       int u, v;       cin >> u >> v;       --u, --v;       vector<double> dp(n);       dp[0] = 0;       for (int i = 1; i < n; ++i) {         dp[i] = 1e12;         ll dist = 0;         for (int j = i - 1; j >= 0; --j) {           dist += d[j][j + 1];           if (e[j] > dist)             dp[i] = min(dp[i], dp[j] + dist / static_cast<double>(s[j]));         }       }       cout << "Case #" << i << ": " << fixed << setprecision(10) << dp[v]            << "\n";     }   }   return 0; }
